[
    {
        "id": "HumanEval/0",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "entry_point": "has_close_elements",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\ncheck(has_close_elements)",
        "plan": [
            "# 1. Loop through each number in the given list.\n# 2. For each number, loop through the remaining numbers in the list.\n# 3. Calculate the absolute difference between the current number and each remaining number.\n# 4. If the absolute difference is less than the given threshold, return True.\n# 5. If no pair of numbers has an absolute difference less than the threshold, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of floating-point numbers `numbers` and a floating-point number `threshold` as input.\n- It returns a boolean value indicating whether there are any two numbers in the list that are closer to each other than the given threshold.\n\n## Expected Behavior\n- The function should return True if there exist any two numbers in `numbers` that have an absolute difference less than the given `threshold`.\n- If no pair of numbers satisfies the condition, the function should return False.\n\n## Edge Cases\n- Handle an empty `numbers` list, returning False.\n- Handle the case where all numbers in `numbers` are the same, returning False.\n- Handle the case where no pair of numbers satisfies the condition, returning False.\n- Handle negative values for `threshold`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^2) where n is the length of the `numbers` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `numbers` input or a non-float `threshold`.\n- Handle non-float elements in the `numbers` list.\n\n### Reliability\n- Avoid index errors while accessing `numbers` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The numbers list contains no pair of numbers with an absolute difference less than 0.5\n### The function should return False\nassert has_close_elements([1.0, 2.0, 3.0], 0.5) == False, 'Failed to handle case where no pair of numbers satisfies the condition.'\n\n### The numbers list contains two numbers, 2.0 and 2.8, with an absolute difference of 0.8, which is less than 0.3\n### The function should return True\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True, 'Failed to find a pair of numbers that satisfies the condition.'\n\n## Edge Cases\n### The input list is empty, so the function should return False\nassert has_close_elements([], 0.5) == False, 'Failed to handle an empty input list.'\n\n### The numbers list contains multiple occurrences of the same number, 1.0\n### Since there are no two distinct numbers, the function should return False\nassert has_close_elements([1.0, 1.0, 1.0, 1.0], 0.5) == False, 'Failed to handle case where all numbers in the list are the same.'\n\n### The numbers list contains multiple pairs of numbers with an absolute difference less than 1.0\n### The function should return True\nassert has_close_elements([1.0, 1.5, 1.8, 2.0, 3.0, 3.5], 1.0) == True, 'Failed to find a pair of numbers that satisfies the condition.'\n\n### The numbers list contains only one number, 1.0\n### Since there are no two numbers, the function should return False\nassert has_close_elements([1.0], 0.5) == False, 'Failed to handle case where the numbers list contains only one number.'\n\n### The numbers list contains two numbers, -1.0 and 1.0, with an absolute difference of 2.0, which is less than 3.0\n### The function should return True\nassert has_close_elements([-1.0, 1.0], 3.0) == True, 'Failed to find a pair of numbers that satisfies the condition when the threshold is negative.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The numbers list contains 10^6 elements with increasing values from 1.0 to 10^6\n### The threshold is set to 0.1, which is smaller than the absolute difference between any two adjacent numbers\n### Therefore, there is no pair of numbers that satisfies the condition and the function should return False\nassert has_close_elements(list(range(1, 10**6 + 1)), 0.1) == False, 'Failed to handle large input size.'\n\n### The numbers list contains 10^6 elements with the same value, 1.0\n### Since there are no two distinct numbers, the function should return False\nassert has_close_elements([1.0] * 10**6, 0.5) == False, 'Failed to handle case where all numbers in the list are the same.'\n\n### The numbers list contains 10^6 elements with values from 1.0 to 10^6\n### The threshold is set to 10^3, which is larger than the absolute difference between any two adjacent numbers\n### Therefore, there exists at least one pair of numbers that satisfies the condition and the function should return True\nassert has_close_elements(list(range(1, 10**6 + 1)), 10**3) == True, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The numbers input is not a list of floats, so the function should return False\nassert has_close_elements('invalid', 0.5) == False, 'Failed to handle case where the input numbers is not a list of floats.'\n\n#### The threshold input is not a float, so the function should return False\nassert has_close_elements([1.0, 2.0, 3.0], 'invalid') == False, 'Failed to handle case where the input threshold is not a float.'\n\n#### The numbers list contains elements that are not floats, so the function should return False\nassert has_close_elements([1.0, 2.0, 'invalid', 4.0], 0.5) == False, 'Failed to handle case where the input list contains elements that are not floats.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(has_close_elements))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/1",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "entry_point": "separate_paren_groups",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\ncheck(separate_paren_groups)",
        "plan": [
            "# 1. Remove any spaces from the input string.\n# 2. Initialize an empty list to store the separated paren groups.\n# 3. Initialize a variable to keep track of the current paren group.\n# 4. Initialize a variable to keep track of the count of open parentheses.\n# 5. Loop through each character in the input string.\n# 6. If the current character is an open parenthesis, increment the count of open parentheses and add it to the current paren group.\n# 7. If the current character is a closing parenthesis, decrement the count of open parentheses and add it to the current paren group.\n# 8. If the count of open parentheses becomes zero, add the current paren group to the list of separated paren groups and reset the current paren group.\n# 9. Return the list of separated paren groups."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `paren_string` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should separate the groups of nested parentheses in `paren_string` into separate strings and return a list of these strings.\n- Each group of nested parentheses should be balanced, with each open parenthesis properly closed.\n- The groups should not be nested within each other.\n\n## Edge Cases\n- Handle an empty `paren_string`, returning an empty list.\n- Handle a `paren_string` with no groups of nested parentheses, returning a list with the original string as the only element.\n- Handle a `paren_string` with improperly balanced or nested parentheses, returning an empty list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `paren_string`.\n- Space complexity: O(k) where k is the number of groups of nested parentheses in the `paren_string`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string `paren_string` input.\n- Handle a `paren_string` with non-parenthesis characters.\n- Handle a `paren_string` with unbalanced or improperly nested parentheses.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string contains three groups of nested parentheses\n### The function should return a list with the separate strings for each group\nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())'], 'Failed to separate groups of nested parentheses.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty list\nassert separate_paren_groups('') == [], 'Failed to handle an empty input string.'\n\n### The input string does not contain any groups of nested parentheses, so the function should return a list with the original string as the only element\nassert separate_paren_groups('This is a test string.') == ['This is a test string.'], 'Failed to handle input string with no groups of nested parentheses.'\n\n### The input string contains unbalanced parentheses, so the function should return an empty list\nassert separate_paren_groups('( ( )) (( ) ( ))') == [], 'Failed to handle input string with unbalanced parentheses.'\n\n### The input string contains improperly nested parentheses, so the function should return an empty list\nassert separate_paren_groups('( ( ) (( ) ( ) ))') == [], 'Failed to handle input string with improperly nested parentheses.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 characters, all of which are parentheses\n### The output should be a list with 10^6 elements, each containing a single parenthesis\nassert separate_paren_groups('(' * 10**6 + ')' * 10**6) == ['('] * 10**6 + [')'] * 10**6, 'Failed to handle large input size.'\n\n### The input string contains 10^6 characters, all of which are spaces\n### The output should be an empty list since there are no groups of nested parentheses\nassert separate_paren_groups(' ' * 10**6) == [], 'Failed to handle large input size.'\n\n### The input string contains 10^6 characters, all of which are balanced groups of nested parentheses\n### The output should be a list with 10^6 elements, each containing a pair of parentheses\nassert separate_paren_groups('(())' * 10**6) == ['()' * 10**6], 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty list\nassert separate_paren_groups(12345) == [], 'Failed to handle case where the input is not a string.'\n\n#### The input string contains non-parenthesis characters, so the function should return an empty list\nassert separate_paren_groups('(abc)') == [], 'Failed to handle case where the input string contains non-parenthesis characters.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(separate_paren_groups))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/2",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0\n",
        "entry_point": "truncate_number",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\ncheck(truncate_number)",
        "plan": [
            "# 1. Convert the input number to a string.\n# 2. Split the string by the decimal point.\n# 3. Return the second element of the split string, which represents the decimal part of the number.\n# 4. Ensure that the returned value is a float by converting it back to a float."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors, and other potential exceptions.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- The code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive floating-point number as input.\n- It returns the decimal part of the number as a float.\n\n## Expected Behavior\n- The function should return the decimal part of the given floating-point number.\n\n## Edge Cases\n- Handle negative numbers, returning the decimal part as a positive float.\n- Handle zero as input, returning zero as the decimal part.\n- Handle large input numbers, ensuring efficiency and avoiding overflow.\n- Handle extremely small input numbers, ensuring precision and avoiding underflow.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large or small input numbers, providing results within a few milliseconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-float input, returning an error or a default value.\n- Handle very large or very small input numbers without causing arithmetic errors or loss of precision.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The decimal part of 3.5 is 0.5\nassert truncate_number(3.5) == 0.5, 'Failed to return the decimal part of the number.'\n\n### The decimal part of 7.2 is 0.2\nassert truncate_number(7.2) == 0.2, 'Failed to return the decimal part of the number.'\n\n## Edge Cases\n### The input number is zero, so the function should return zero as the decimal part\nassert truncate_number(0) == 0, 'Failed to handle zero as input.'\n\n### The input number is a very large float, so the function should return the decimal part without causing overflow or precision loss\nassert truncate_number(10**100) == 0, 'Failed to handle very large input numbers.'\n\n### The input number is a very small float, so the function should return the decimal part without causing underflow or precision loss\nassert truncate_number(10**-100) == 0, 'Failed to handle very small input numbers.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input number is within a reasonable range\n### The function should provide results within a few milliseconds\nassert truncate_number(3.14159) == 0.14159, 'Failed to meet performance requirements.'\n\n### The input number is a very large float\n### The function should provide results within a few milliseconds\nassert truncate_number(10**1000) == 0, 'Failed to meet performance requirements for very large input numbers.'\n\n### The input number is a very small float\n### The function should provide results within a few milliseconds\nassert truncate_number(10**-1000) == 0, 'Failed to meet performance requirements for very small input numbers.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input number is not a float, so the function should return an error or a default value\nassert truncate_number('invalid') == 0, 'Failed to handle non-float input.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(truncate_number))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/3",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "entry_point": "below_zero",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\ncheck(below_zero)",
        "plan": [
            "# 1. Initialize a variable balance to keep track of the current balance, starting with zero.\n# 2. Loop through each operation in the operations list.\n# 3. Add the operation value to the balance.\n# 4. Check if the balance is less than zero.\n# 5. If it is, return True.\n# 6. If the loop completes without encountering a balance less than zero, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `operations` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if at any point the balance of the bank account falls below zero, and False otherwise.\n\n## Edge Cases\n- Handle an empty `operations` list, returning False.\n- Handle the case where the balance remains at zero throughout the list, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `operations` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `operations` input.\n- Handle non-integer elements in the `operations` list.\n\n### Reliability\n- Avoid index errors while accessing `operations` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The balance never falls below zero, so the function should return False\nassert below_zero([1, 2, 3]) == False, 'Failed to handle case where balance never falls below zero.'\n\n### The balance falls below zero at index 2, so the function should return True\nassert below_zero([1, 2, -4, 5]) == True, 'Failed to detect when the balance falls below zero.'\n\n## Edge Cases\n### The operations list is empty, so the function should return False\nassert below_zero([]) == False, 'Failed to handle an empty input list.'\n\n### The balance never falls below zero, so the function should return False\nassert below_zero([0, 0, 0, 0, 0]) == False, 'Failed to handle case where the balance remains at zero throughout the list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The operations list contains 10^6 elements, all of which are 1\n### The balance never falls below zero, so the function should return False\nassert below_zero([1] * 10**6) == False, 'Failed to handle large input size.'\n\n### The operations list contains 10^6 elements, all of which are -1\n### The balance falls below zero at index 0, so the function should return True\nassert below_zero([-1] * 10**6) == True, 'Failed to handle large input size.'\n\n### The operations list contains 10^6 elements, alternating between 1 and -1\n### The balance falls below zero at index 1, so the function should return True\nassert below_zero([1, -1] * (10**6 // 2)) == True, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The operations input is not a list of integers, so the function should return False\nassert below_zero('invalid') == False, 'Failed to handle case where the input operations is not a list of integers.'\n\n#### The operations list contains elements that are not integers, so the function should return False\nassert below_zero([1, 2, 'invalid', 4]) == False, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(below_zero))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/4",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "entry_point": "mean_absolute_deviation",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\ncheck(mean_absolute_deviation)",
        "plan": [
            "# 1. Calculate the mean of the input list using the sum() function and divide it by the length of the list.\n# 2. Initialize a variable to keep track of the sum of absolute differences.\n# 3. Loop through each element in the input list.\n# 4. Calculate the absolute difference between each element and the mean.\n# 5. Add the absolute difference to the sum of absolute differences.\n# 6. Divide the sum of absolute differences by the length of the input list.\n# 7. Return the result as the mean absolute deviation."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of floating-point numbers `numbers` as input.\n- It returns a floating-point number as the mean absolute deviation.\n\n## Expected Behavior\n- The function should calculate the mean absolute deviation of the input list, which is the average absolute difference between each element and the mean of the list.\n\n## Edge Cases\n- Handle an empty `numbers` list, returning 0 as the mean absolute deviation.\n- Handle the case where `numbers` contains only one element, returning 0 as the mean absolute deviation.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `numbers` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `numbers` input or non-floating-point elements in the `numbers` list.\n- Handle NaN or infinite values in the `numbers` list.\n\n### Reliability\n- Avoid index errors while accessing `numbers` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The mean absolute deviation of [1.0, 2.0, 3.0, 4.0] is 1.0\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, 'Failed to calculate mean absolute deviation correctly.'\n\n### The mean absolute deviation of [2.0, 2.0, 2.0, 2.0] is 0.0\n### All elements are the same, so the absolute difference from the mean is 0 for each element\n### The average of these differences is also 0\nassert mean_absolute_deviation([2.0, 2.0, 2.0, 2.0]) == 0.0, 'Failed to handle case where all elements are the same.'\n\n## Edge Cases\n### The input list is empty, so the mean absolute deviation should be 0\nassert mean_absolute_deviation([]) == 0.0, 'Failed to handle an empty input list.'\n\n### The input list contains only one element, so the mean absolute deviation should be 0\nassert mean_absolute_deviation([5.0]) == 0.0, 'Failed to handle a single-element input list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are 1.0\n### The mean absolute deviation should be 0.0 since all elements are the same\nassert mean_absolute_deviation([1.0] * 10**6) == 0.0, 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are consecutive integers from 1 to 10^6\n### The mean absolute deviation should be approximately 333333.333\nassert abs(mean_absolute_deviation(list(range(1, 10**6 + 1))) - 333333.333) < 0.001, 'Failed to calculate mean absolute deviation accurately for large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The numbers input is not a list of floats, so the function should return 0.0\nassert mean_absolute_deviation('invalid') == 0.0, 'Failed to handle case where the input numbers is not a list of floats.'\n\n#### The numbers list contains elements that are not floats, so the function should return 0.0\nassert mean_absolute_deviation([1.0, 2.0, 'invalid', 4.0]) == 0.0, 'Failed to handle case where the input list contains elements that are not floats.'\n\n#### The numbers list contains NaN values, so the function should return 0.0\nimport math\nassert math.isnan(mean_absolute_deviation([1.0, 2.0, math.nan, 4.0])), 'Failed to handle case where the input list contains NaN values.'\n\n#### The numbers list contains infinite values, so the function should return 0.0\nassert math.isinf(mean_absolute_deviation([1.0, 2.0, float('inf'), 4.0])), 'Failed to handle case where the input list contains infinite values.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(mean_absolute_deviation))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/5",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "entry_point": "intersperse",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\ncheck(intersperse)",
        "plan": [
            "# 1. Create an empty list called `result` to store the interspersed elements.\n# 2. Loop through the elements in the `numbers` list.\n# 3. For each element, append it to the `result` list.\n# 4. Check if the current element is not the last element in the `numbers` list.\n# 5. If it is not the last element, append the `delimeter` to the `result` list.\n# 6. Return the `result` list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `numbers` and an integer `delimeter` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should insert the `delimeter` number between every two consecutive elements of the `numbers` list.\n\n## Edge Cases\n- Handle an empty `numbers` list, returning an empty list.\n- Handle the case where `delimeter` is not an integer.\n- Handle the case where `numbers` list contains non-integer elements.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `numbers` list.\n- Space complexity: O(n) due to the creation of a new list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `numbers` input or a non-integer `delimeter`.\n- Handle non-integer elements in the `numbers` list.\n\n### Reliability\n- Avoid index errors while accessing `numbers` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Insert 4 between every two consecutive elements of the input list [1, 2, 3]\n### The output should be [1, 4, 2, 4, 3]\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3], 'Failed to insert delimeter between consecutive elements.'\n\n### The input list is empty, so the function should return an empty list\nassert intersperse([], 4) == [], 'Failed to handle an empty input list.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert intersperse([], 5) == [], 'Failed to handle an empty input list.'\n\n### Insert 10 between every two consecutive elements of the input list [5, 5, 5, 5]\n### The output should be [5, 10, 5, 10, 5, 10, 5]\nassert intersperse([5, 5, 5, 5], 10) == [5, 10, 5, 10, 5, 10, 5], 'Failed to insert delimeter between consecutive elements when all elements have the same value.'\n\n### Insert -1 between every two consecutive elements of the input list [1, 2, 3, 4, 5]\n### The output should be [1, -1, 2, -1, 3, -1, 4, -1, 5]\nassert intersperse([1, 2, 3, 4, 5], -1) == [1, -1, 2, -1, 3, -1, 4, -1, 5], 'Failed to insert delimeter between consecutive elements when delimeter is a negative number.'\n\n### Insert 0 between every two consecutive elements of the input list [1, 2, 3, 4, 5]\n### The output should be [1, 0, 2, 0, 3, 0, 4, 0, 5]\nassert intersperse([1, 2, 3, 4, 5], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5], 'Failed to insert delimeter between consecutive elements when delimeter is zero.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### Insert 10^6 between every two consecutive elements of the numbers list\n### The output should be [1, 10^6, 2, 10^6, 3, 10^6, ..., 10^6, 10^6]\nassert intersperse(list(range(1, 10**6 + 1)), 10**6) == [i for j in zip(range(1, 10**6 + 1), [10**6] * (10**6 - 1)) for i in j], 'Failed to handle large input size.'\n\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### Insert 1 between every two consecutive elements of the numbers list\n### The output should be [1, 1, 2, 1, 3, 1, ..., 10^6, 1]\nassert intersperse(list(range(1, 10**6 + 1)), 1) == [i for j in zip(range(1, 10**6 + 1), [1] * (10**6 - 1)) for i in j], 'Failed to handle case where the delimeter length is 1.'\n\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### Insert 2 between every two consecutive elements of the numbers list\n### The output should be [1, 2, 2, 3, 2, 4, 2, ..., 10^6, 2]\nassert intersperse(list(range(1, 10**6 + 1)), 2) == [i for j in zip(range(1, 10**6 + 1), [2] * (10**6 - 1)) for i in j], 'Failed to handle case where the delimeter length is 2.'\n\n### The input list is a list of 10^6 elements, all of which are 10^6\n### The output should be the same as the input list, as there are no consecutive elements to insert the delimeter between\nassert intersperse([10**6] * 10**6, 5) == [10**6] * 10**6, 'Failed to handle case where there are no consecutive elements to insert the delimeter between.'\n\n## Specific Quality Requirements\n### Robustness\n#### The numbers input is not a list of integers, so the function should return an empty list\nassert intersperse('invalid', 10) == [], 'Failed to handle case where the input numbers is not a list of integers.'\n\n#### The delimeter input is not an integer, so the function should return an empty list\nassert intersperse([1, 2, 3], 'invalid') == [], 'Failed to handle case where the input delimeter is not an integer.'\n\n#### The numbers list contains elements that are not integers, so the function should return an empty list\nassert intersperse([1, 2, 'invalid', 4], 5) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(intersperse))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/6",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "entry_point": "parse_nested_parens",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\ncheck(parse_nested_parens)",
        "plan": [
            "# 1. Split the input string by spaces to get a list of nested parentheses groups.\n# 2. Initialize an empty list to store the deepest level of nesting for each group.\n# 3. Loop through each group of nested parentheses.\n# 4. Initialize variables max_depth and current_depth to keep track of the maximum nesting level and the current nesting level respectively. Set both to 0.\n# 5. Loop through each character in the group.\n# 6. If the character is an opening parenthesis '(', increment the current_depth.\n# 7. If the character is a closing parenthesis ')', decrement the current_depth.\n# 8. Update the max_depth with the maximum value between max_depth and current_depth.\n# 9. After processing all characters in the group, append the max_depth to the result list.\n# 10. Return the result list containing the deepest level of nesting for each group of nested parentheses."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `paren_string` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should split the input string into multiple groups of nested parentheses and determine the deepest level of nesting for each group.\n- It should return a list containing the deepest level of nesting for each group.\n\n## Edge Cases\n- Handle an empty `paren_string`, returning an empty list.\n- Handle cases where the `paren_string` contains invalid characters (characters other than '(' or ')'), returning an empty list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `paren_string`.\n- Space complexity: O(k) where k is the number of groups of nested parentheses in `paren_string`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string `paren_string`.\n- Handle a `paren_string` with unbalanced parentheses, returning an empty list.\n- Handle a `paren_string` with invalid characters, returning an empty list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string contains multiple groups of nested parentheses.\n### The deepest level of nesting for each group is [2, 3, 1, 3]\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3], 'Failed to parse nested parentheses.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty list\nassert parse_nested_parens('') == [], 'Failed to handle an empty input string.'\n\n### The input string contains invalid characters ('A' and 'B'), so the function should return an empty list\nassert parse_nested_parens('(()A()) ((B())) () ((())()())') == [], 'Failed to handle case where the input string contains invalid characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 characters, all of which are '('\n### The deepest level of nesting for each group is [10^6]\nassert parse_nested_parens('((' * 10**6 + ') ' + '(' * 10**6 + ')') == [10**6], 'Failed to handle large input size.'\n\n### The input string contains 10^6 characters, all of which are '(' except for the last character which is ')'\n### The deepest level of nesting for each group is [10^6 - 1]\nassert parse_nested_parens('((' * 10**6 + ') ' + '(' * 10**6 + ')') == [10**6 - 1], 'Failed to handle case where the deepest level of nesting is less than the number of characters in the input string.'\n\n### The input string contains 10^6 characters, all of which are '(' except for the first character which is ')'\n### The deepest level of nesting for each group is [0]\nassert parse_nested_parens(')' + ' (' * 10**6 + ')') == [0], 'Failed to handle case where the deepest level of nesting is 0.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty list\nassert parse_nested_parens(123) == [], 'Failed to handle case where the input is not a string.'\n\n#### The input string contains unbalanced parentheses, so the function should return an empty list\nassert parse_nested_parens('(()()) (((())()())') == [], 'Failed to handle case where the input string contains unbalanced parentheses.'\n\n#### The input string contains invalid characters ('A', 'B', 'C'), so the function should return an empty list\nassert parse_nested_parens('(()A()) ((B())()())') == [], 'Failed to handle case where the input string contains invalid characters.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(parse_nested_parens))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/7",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring in x]\n",
        "entry_point": "filter_by_substring",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\ncheck(filter_by_substring)",
        "plan": [
            "# 1. Create an empty list to store the filtered strings.\n# 2. Loop through each string in the input list.\n# 3. Check if the given substring is present in the current string using the \"in\" operator.\n# 4. If the substring is present, append the current string to the filtered list.\n# 5. Return the filtered list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of strings `strings` and a substring `substring` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should return a list of strings from `strings` that contain the given `substring`.\n\n## Edge Cases\n- Handle an empty `strings` list, returning an empty list.\n- Handle the case where no string in `strings` contains the `substring`, returning an empty list.\n- Handle multiple strings containing the `substring` with the same frequency, returning any of them.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n*m) where n is the length of the `strings` list and m is the length of the longest string in `strings`.\n- Space complexity: O(k) where k is the number of strings containing the `substring`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `strings` input or a non-string `substring`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The `strings` list is empty, so the function should return an empty list\nassert filter_by_substring([], 'a') == [], 'Failed to handle an empty `strings` list.'\n\n### The `strings` list contains strings 'abc', 'bacd', and 'array' that contain the `substring`\nassert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array'], 'Failed to filter the `strings` list correctly.'\n\n## Edge Cases\n### The `strings` list is empty, so the function should return an empty list\nassert filter_by_substring([], 'abc') == [], 'Failed to handle an empty `strings` list.'\n\n### None of the strings in the `strings` list contain the `substring`, so the function should return an empty list\nassert filter_by_substring(['def', 'xyz', '123'], 'abc') == [], 'Failed to handle case where no string in `strings` contains the `substring`.'\n\n### The `strings` list contains multiple strings that contain the `substring` with the same frequency\n### The function should return any of the strings\nassert filter_by_substring(['abc', 'bac', 'cab'], 'a') == ['abc', 'bac'], 'Failed to return any of the strings containing the `substring`.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The `strings` list contains 10^6 strings, each with a length of 10^6, and all the strings contain the `substring`\n### The function should return the entire `strings` list\nassert filter_by_substring(['a' * 10**6] * 10**6, 'a') == ['a' * 10**6] * 10**6, 'Failed to handle large input size.'\n\n### The `strings` list contains 10^6 strings, each with a length of 10^6, and none of the strings contain the `substring`\n### The function should return an empty list\nassert filter_by_substring(['b' * 10**6] * 10**6, 'a') == [], 'Failed to handle case where no string in `strings` contains the `substring`.'\n\n## Specific Quality Requirements\n### Robustness\n#### The `strings` input is not a list of strings, so the function should return an empty list\nassert filter_by_substring('invalid', 'a') == [], 'Failed to handle case where the input `strings` is not a list of strings.'\n\n#### The `substring` input is not a string, so the function should return an empty list\nassert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 123) == [], 'Failed to handle case where the input `substring` is not a string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(filter_by_substring))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/8",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "entry_point": "sum_product",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\ncheck(sum_product)",
        "plan": [
            "# 1. Initialize variables sum and product to 0 and 1 respectively.\n# 2. Loop through the list of integers.\n# 3. For each integer, add it to the sum and multiply it to the product.\n# 4. Return a tuple consisting of the sum and product."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `numbers` as input.\n- It returns a tuple of two integers.\n\n## Expected Behavior\n- The function should return a tuple consisting of the sum and product of all the integers in the `numbers` list.\n- If the `numbers` list is empty, the sum should be 0 and the product should be 1.\n\n## Edge Cases\n- Handle non-list `numbers` input.\n- Handle non-integer elements in the `numbers` list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `numbers` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `numbers` input or non-integer elements in the `numbers` list.\n\n### Reliability\n- Avoid index errors while accessing `numbers` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sum of an empty list is 0 and the product is 1\nassert sum_product([]) == (0, 1), 'Failed to handle an empty input list.'\n\n### The sum of [1, 2, 3, 4] is 10 and the product is 24\nassert sum_product([1, 2, 3, 4]) == (10, 24), 'Failed to calculate the sum and product correctly.'\n\n### The sum of [0, 0, 0] is 0 and the product is 0\nassert sum_product([0, 0, 0]) == (0, 0), 'Failed to calculate the sum and product correctly when all elements are 0.'\n\n## Edge Cases\n### The sum of an empty list is 0 and the product is 1\nassert sum_product([]) == (0, 1), 'Failed to handle an empty input list.'\n\n### The sum of [10^6] is 10^6 and the product is 10^6\nassert sum_product([10**6]) == (10**6, 10**6), 'Failed to handle a list with a single element.'\n\n### The sum of [0, 0, 0, ..., 0] (10^6 elements) is 0 and the product is 0\nassert sum_product([0] * 10**6) == (0, 0), 'Failed to handle a list with multiple elements, all of which are 0.'\n\n### The sum of [1, 2, 3, ..., 10^6] is 500000500000 and the product is 1000000!\nimport math\nassert sum_product(list(range(1, 10**6 + 1))) == (500000500000, math.factorial(10**6)), 'Failed to calculate the sum and product correctly for a large input size.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### The sum of all the elements in numbers is 10^12, which is larger than the largest 32-bit signed integer\n### The product of all the elements in numbers is 10^6!\nimport sys\nassert sum_product(list(range(1, 10**6 + 1))) == (10**12, sys.maxsize), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The numbers input is not a list of integers, so the function should return an empty tuple\nassert sum_product('invalid') == (), 'Failed to handle case where the input numbers is not a list of integers.'\n\n#### The numbers list contains elements that are not integers, so the function should return an empty tuple\nassert sum_product([1, 2, 'invalid', 4]) == (), 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sum_product))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/9",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "entry_point": "rolling_max",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\ncheck(rolling_max)",
        "plan": [
            "# 1. Create an empty list to store the rolling maximums.\n# 2. Create a variable max_num to keep track of the maximum number seen so far.\n# 3. Loop through each number in the input list.\n# 4. Check if the current number is greater than max_num.\n# 5. If it is, update max_num to the current number.\n# 6. Append max_num to the rolling maximums list.\n# 7. Return the rolling maximums list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `numbers` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should generate a list of rolling maximum elements from the given list `numbers`.\n- The rolling maximum is the maximum element found until the given moment in the sequence.\n\n## Edge Cases\n- Handle an empty `numbers` list, returning an empty list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `numbers` list.\n- Space complexity: O(n) where n is the length of the `numbers` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `numbers` input or non-integer elements in the `numbers` list.\n\n### Reliability\n- Avoid index errors while accessing `numbers` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The rolling maximum at each moment in the sequence is [1, 2, 3, 3, 3, 4, 4]\nassert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4], 'Failed to generate the correct rolling maximum sequence.'\n\n### The rolling maximum at each moment in the sequence is [10, 10, 10, 10, 10]\nassert rolling_max([10, 10, 10, 10, 10]) == [10, 10, 10, 10, 10], 'Failed to generate the correct rolling maximum sequence when all elements are the same.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert rolling_max([]) == [], 'Failed to handle an empty input list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### The rolling maximum at each moment in the sequence is [1, 2, 3, ..., 10^6]\nassert rolling_max(list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The numbers list contains 10^6 elements with decreasing values from 10^6 to 1\n### The rolling maximum at each moment in the sequence is [10^6, 10^6 - 1, 10^6 - 1, ..., 1]\nassert rolling_max(list(range(10**6, 0, -1))) == [10**6] * 10**6, 'Failed to handle large input size with decreasing values.'\n\n## Specific Quality Requirements\n### Robustness\n#### The numbers input is not a list of integers, so the function should return an empty list\nassert rolling_max('invalid') == [], 'Failed to handle case where the input numbers is not a list of integers.'\n\n#### The numbers list contains elements that are not integers, so the function should return an empty list\nassert rolling_max([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(rolling_max))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/10",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "entry_point": "make_palindrome",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\ncheck(make_palindrome)",
        "plan": [
            "# 1. Initialize a variable \"suffix\" to an empty string.\n# 2. Iterate through the characters of the input string in reverse order.\n# 3. Check if the suffix (concatenated with the current character) is a palindrome.\n# 4. If it is, break the loop.\n# 5. Otherwise, add the current character to the suffix.\n# 6. Create a variable \"prefix\" and assign it the substring of the input string from index 0 to len(suffix) - 1.\n# 7. Return the concatenation of prefix and suffix, resulting in the shortest palindrome."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `string` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should find the shortest palindrome that begins with the supplied string.\n- The palindrome should be formed by appending the reverse of a string prefix to the end of the supplied string.\n\n## Edge Cases\n- Handle an empty input string, returning an empty string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^2) where n is the length of the input string.\n- Space complexity: O(n) where n is the length of the input string.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string input.\n\n### Reliability\n- Avoid index errors while accessing characters in the input string.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The supplied string is empty, so the function should return an empty string\nassert make_palindrome('') == '', 'Failed to handle an empty input string.'\n\n### The supplied string is 'cat'\n### The longest palindromic postfix is 'a'\n### The palindromic prefix before the postfix is 'c'\n### The function should append the reverse of the prefix to the end of the string\n### The resulting palindrome is 'catac'\nassert make_palindrome('cat') == 'catac', 'Failed to find the shortest palindrome for the input string.'\n\n### The supplied string is 'cata'\n### The longest palindromic postfix is 'a'\n### The palindromic prefix before the postfix is 'cat'\n### The function should append the reverse of the prefix to the end of the string\n### The resulting palindrome is 'catac'\nassert make_palindrome('cata') == 'catac', 'Failed to find the shortest palindrome for the input string.'\n\n## Edge Cases\n### The supplied string is a single character, so the function should return the same string\nassert make_palindrome('a') == 'a', 'Failed to handle case where the input string has length 1.'\n\n### The supplied string is a palindrome, so the function should return the same string\nassert make_palindrome('racecar') == 'racecar', 'Failed to handle case where the input string is already a palindrome.'\n\n### The supplied string is a palindrome, so the function should return the same string\nassert make_palindrome('level') == 'level', 'Failed to handle case where the input string is already a palindrome.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has length 10^6 and is a repetition of the letter 'a'\n### The longest palindromic postfix is 'a' and the palindromic prefix is the entire string 'a' * 10^6\n### The function should append the reverse of the prefix to the end of the string, resulting in a palindrome of length 2 * 10^6\nassert make_palindrome('a' * 10**6) == 'a' * (2 * 10**6), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty string\nassert make_palindrome(123) == '', 'Failed to handle case where the input is not a string.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(make_palindrome))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/11",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "entry_point": "string_xor",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\ncheck(string_xor)",
        "plan": [
            "# 1. Convert the input strings `a` and `b` into integers using the int() function with base 2.\n# 2. Perform the XOR operation on the two integers using the ^ operator.\n# 3. Convert the result back into a binary string using the bin() function and remove the '0b' prefix.\n# 4. Return the binary string as the result of the function."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two strings `a` and `b` as input.\n- The strings consist only of 1s and 0s.\n- It returns a string as output.\n\n## Expected Behavior\n- The function should perform a binary XOR operation on the two input strings `a` and `b`.\n- The result of the XOR operation should be returned as a string.\n\n## Edge Cases\n- Handle empty strings `a` and `b`, returning an empty string.\n- Handle strings `a` and `b` of different lengths, returning an empty string.\n- Handle strings `a` and `b` with non-numeric characters, returning an empty string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the longer input string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large input strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string inputs for `a` or `b`.\n- Handle non-numeric characters in the input strings.\n- Handle empty strings for `a` or `b`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10.\n"
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The binary XOR of '010' and '110' is '100'\nassert string_xor('010', '110') == '100', 'Failed to perform binary XOR operation correctly.'\n\n### The binary XOR of '10101' and '01010' is '11111'\nassert string_xor('10101', '01010') == '11111', 'Failed to perform binary XOR operation correctly.'\n\n## Edge Cases\n### The input strings are empty, so the function should return an empty string\nassert string_xor('', '') == '', 'Failed to handle empty input strings.'\n\n### The input strings have different lengths, so the function should return an empty string\nassert string_xor('10101', '101') == '', 'Failed to handle input strings of different lengths.'\n\n### The input strings contain non-numeric characters, so the function should return an empty string\nassert string_xor('10101', '1a010') == '', 'Failed to handle input strings with non-numeric characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input strings are very long, consisting of 10^6 1s and 0s\n### The binary XOR of the two strings is '0'*10^6\nassert string_xor('1'*10**6, '1'*10**6) == '0'*10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input strings contain non-numeric characters, so the function should return an empty string\nassert string_xor('10a1', '1010') == '', 'Failed to handle input strings with non-numeric characters.'\n\n#### The input strings are not strings, so the function should return an empty string\nassert string_xor(['1', '0', '1'], '1010') == '', 'Failed to handle input strings that are not strings.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(string_xor))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/12",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "entry_point": "longest",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\ncheck(longest)",
        "plan": [
            "# 1. Check if the input list `strings` is empty. If it is, return None.\n# 2. Initialize a variable `longest_string` with an empty string.\n# 3. Loop through each string in the input list.\n# 4. Compare the length of the current string with the length of `longest_string`.\n# 5. If the current string is longer, update `longest_string` with the current string.\n# 6. After the loop, return the value of `longest_string`."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of strings `strings` as input.\n- It returns an optional string.\n\n## Expected Behavior\n- The function should return the longest string from the input list `strings`.\n- If the input list is empty, the function should return None.\n- If multiple strings have the same longest length, the function should return the first occurrence.\n\n## Edge Cases\n- Handle an empty `strings` list, returning None.\n- Handle multiple strings with the same longest length, returning the first occurrence.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `strings` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `strings` input or non-string elements in the `strings` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list is empty, so the function should return None\nassert longest([]) is None, 'Failed to handle an empty input list.'\n\n### The longest string is 'a'\nassert longest(['a', 'b', 'c']) == 'a', 'Failed to find the longest string.'\n\n### Multiple strings have the same longest length, 'ccc'\n### The function should return the first occurrence, which is 'ccc'\nassert longest(['a', 'bb', 'ccc']) == 'ccc', 'Failed to return the first occurrence of the longest string.'\n\n## Edge Cases\n### The input list is empty, so the function should return None\nassert longest([]) is None, 'Failed to handle an empty input list.'\n\n### The input list contains only one string, 'abc'\n### The function should return 'abc' as the longest string\nassert longest(['abc']) == 'abc', 'Failed to handle case where the input list contains only one string.'\n\n### Multiple strings have the same longest length, 'abc'\n### The function should return the first occurrence, which is 'abc'\nassert longest(['abc', 'def', 'abc']) == 'abc', 'Failed to return the first occurrence of the longest string.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The strings list contains 10^6 strings, each with 10^4 characters\n### The longest string is 'x' with 10^4 characters\nassert longest(['x' * 10**4] * 10**6) == 'x' * 10**4, 'Failed to handle large input size.'\n\n### The strings list contains 10^6 strings, each with 1 character\n### The longest string is 'x' with 1 character\nassert longest(['x'] * 10**6) == 'x', 'Failed to handle case where all strings have the same length.'\n\n### The strings list contains 10^6 strings, each with increasing lengths from 1 to 10^6\n### The longest string is 'x' with 10^6 characters\nassert longest(['x' * n for n in range(1, 10**6 + 1)]) == 'x' * 10**6, 'Failed to handle case where the longest string has maximum length.'\n\n## Specific Quality Requirements\n### Robustness\n#### The strings input is not a list, so the function should return None\nassert longest('invalid') is None, 'Failed to handle case where the input strings is not a list.'\n\n#### The strings list contains elements that are not strings, so the function should return None\nassert longest(['a', 123, 'c']) is None, 'Failed to handle case where the input list contains elements that are not strings.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(longest))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/13",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "entry_point": "greatest_common_divisor",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\ncheck(greatest_common_divisor)",
        "plan": [
            "# 1. Use the Euclidean algorithm to find the greatest common divisor (GCD) of two integers a and b.\n# 2. Initialize variables x and y with the values of a and b, respectively.\n# 3. Use a while loop to iterate until y becomes zero.\n# 4. Inside the loop, calculate the remainder of x divided by y and assign it to a temporary variable t.\n# 5. Assign the value of y to x and the value of t to y.\n# 6. After the loop ends, return the value of x, which will be the GCD of a and b."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two integers, `a` and `b`, as input.\n- It returns an integer, the greatest common divisor (GCD) of `a` and `b`.\n\n## Expected Behavior\n- The function should calculate and return the GCD of `a` and `b` using the Euclidean algorithm.\n\n## Edge Cases\n- Handle the case where one or both of the inputs are zero, returning the non-zero input as the GCD.\n- Handle negative inputs, returning the GCD as a positive integer.\n- Handle the case where `a` and `b` are the same number, returning that number as the GCD.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log(min(a, b))), where a and b are the input integers.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer inputs for `a` and `b`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The GCD of 3 and 5 is 1\nassert greatest_common_divisor(3, 5) == 1, 'Failed to calculate the GCD.'\n\n### The GCD of 25 and 15 is 5\nassert greatest_common_divisor(25, 15) == 5, 'Failed to calculate the GCD.'\n\n## Edge Cases\n### One input is zero, so the GCD should be the non-zero input\nassert greatest_common_divisor(0, 5) == 5, 'Failed to handle case where one input is zero.'\n\n### Both inputs are zero, so the GCD should be zero\nassert greatest_common_divisor(0, 0) == 0, 'Failed to handle case where both inputs are zero.'\n\n### Both inputs are negative, so the GCD should be positive\nassert greatest_common_divisor(-6, -9) == 3, 'Failed to handle case where both inputs are negative.'\n\n### One input is negative and the other is positive, so the GCD should be positive\nassert greatest_common_divisor(-6, 9) == 3, 'Failed to handle case where one input is negative.'\n\n### Both inputs are the same, so the GCD should be the value of the inputs\nassert greatest_common_divisor(5, 5) == 5, 'Failed to handle case where the inputs are the same.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The inputs are extremely large prime numbers, so the GCD should be 1\nassert greatest_common_divisor(999999999989, 999999999937) == 1, 'Failed to handle large prime numbers.'\n\n### The inputs are extremely large non-prime numbers with a common factor of 100\n### The GCD should be 100\nassert greatest_common_divisor(100000000100, 100000000200) == 100, 'Failed to handle large non-prime numbers with a common factor.'\n\n## Specific Quality Requirements\n### Robustness\n#### The inputs are not integers, so the function should raise a TypeError\ntry:\n    greatest_common_divisor('invalid', 5)\n    assert False, 'Failed to handle case where the input a is not an integer.'\nexcept TypeError:\n    pass\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(greatest_common_divisor))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/14",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "entry_point": "all_prefixes",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\ncheck(all_prefixes)",
        "plan": [
            "# 1. Create an empty list to store the prefixes.\n# 2. Loop through the input string.\n# 3. Append the substring from index 0 to the current index i+1 to the prefixes list.\n# 4. Return the prefixes list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `string` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should return a list of all prefixes of the input string, from the shortest to the longest.\n\n## Edge Cases\n- Handle an empty string input, returning an empty list.\n- Handle a single-character string input, returning a list containing only that character.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^2), where n is the length of the input string.\n- Space complexity: O(n), where n is the length of the input string.\n- Ensure efficiency even for extremely long input strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string is 'abc', so the function should return ['a', 'ab', 'abc']\nassert all_prefixes('abc') == ['a', 'ab', 'abc'], 'Failed to return all prefixes of the input string.'\n\n### The input string is 'hello', so the function should return ['h', 'he', 'hel', 'hell', 'hello']\nassert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello'], 'Failed to return all prefixes of the input string.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty list\nassert all_prefixes('') == [], 'Failed to handle an empty input string.'\n\n### The input string is 'a', so the function should return ['a']\nassert all_prefixes('a') == ['a'], 'Failed to handle a single-character input string.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has 10^6 characters, all of which are 'a'\n### The function should return a list containing 10^6 elements, each being 'a'\nassert all_prefixes('a' * 10**6) == ['a'] * 10**6, 'Failed to handle large input size.'\n\n### The input string has 10^6 characters, each being different\n### The function should return a list with 10^6 elements, each being a single character of the input string\nassert all_prefixes('abcdefghijklmnopqrstuvwxyz'[:10**6]) == list('abcdefghijklmnopqrstuvwxyz'[:10**6]), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty list\nassert all_prefixes(123) == [], 'Failed to handle a non-string input.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(all_prefixes))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/15",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join([str(x) for x in range(n + 1)])\n",
        "entry_point": "string_sequence",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\ncheck(string_sequence)",
        "plan": [
            "# 1. Create an empty list to store the sequence of numbers.\n# 2. Loop through the range from 0 to n (inclusive) and append each number to the list.\n# 3. Use the join() method to convert the list of numbers to a string, delimited by a space character.\n# 4. Return the resulting string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should return a space-delimited string of numbers starting from 0 up to `n` (inclusive).\n\n## Edge Cases\n- Handle negative `n` values, returning an empty string.\n- Handle non-integer `n` values, returning an empty string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the value of `n`.\n- Space complexity: O(n).\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-integer `n` input.\n\n### Reliability\n- Avoid index errors while looping from 0 to `n`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input is 0, so the function should return '0'\nassert string_sequence(0) == '0', 'Failed to handle input n=0.'\n\n### The input is 5, so the function should return '0 1 2 3 4 5'\nassert string_sequence(5) == '0 1 2 3 4 5', 'Failed to generate the correct string sequence.'\n\n## Edge Cases\n### The input is -5, so the function should return an empty string\nassert string_sequence(-5) == '', 'Failed to handle negative input n.'\n\n### The input is not an integer, so the function should return an empty string\nassert string_sequence('invalid') == '', 'Failed to handle non-integer input n.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input is 10^6, so the function should return a string sequence with 10^6+1 numbers\nassert string_sequence(10**6) == ' '.join(map(str, range(10**6+1))), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return an empty string\nassert string_sequence('invalid') == '', 'Failed to handle case where the input n is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(string_sequence))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'\n"
        ]
    },
    {
        "id": "HumanEval/16",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n",
        "entry_point": "count_distinct_characters",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\ncheck(count_distinct_characters)",
        "plan": [
            "# 1. Convert the input string to lowercase using the lower() method.\n# 2. Initialize an empty set to store distinct characters.\n# 3. Loop through each character in the lowercase string.\n# 4. Add each character to the set.\n# 5. Return the length of the set, which represents the count of distinct characters."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `string` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the count of distinct characters in the input string, regardless of case.\n\n## Edge Cases\n- Handle an empty string input, returning 0.\n- Handle a string consisting of only whitespace characters, returning 0.\n- Handle a string with no distinct characters, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string.\n- Space complexity: O(k) where k is the number of distinct characters in the input string.\n- Ensure efficiency even for extremely large strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n\n### Reliability\n- Ensure that the function accurately counts distinct characters, regardless of case.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The string consists of 3 distinct characters: 'x', 'y', and 'z'\nassert count_distinct_characters('xyzXYZ') == 3, 'Failed to count distinct characters correctly.'\n\n### The string consists of 4 distinct characters: 'J', 'e', 'r', and 'y'\nassert count_distinct_characters('Jerry') == 4, 'Failed to count distinct characters correctly.'\n\n## Edge Cases\n### The input string is empty, so the function should return 0\nassert count_distinct_characters('') == 0, 'Failed to handle an empty string.'\n\n### The input string consists of only whitespace characters, so the function should return 0\nassert count_distinct_characters('   ') == 0, 'Failed to handle a string consisting of only whitespace characters.'\n\n### The input string has no distinct characters, so the function should return 0\nassert count_distinct_characters('aaaaaa') == 0, 'Failed to handle a string with no distinct characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has a length of 10^6 and consists of a repeating pattern of 'abcde'\n### The function should return 5, as there are 5 distinct characters in the string\nassert count_distinct_characters('abcde' * (10**6 // 5)) == 5, 'Failed to handle large input size.'\n\n### The input string has a length of 10^6 and consists of the same character 'a'\n### The function should return 1, as there is only one distinct character in the string\nassert count_distinct_characters('a' * 10**6) == 1, 'Failed to handle case where all characters are the same.'\n\n### The input string has a length of 10^6 and consists of distinct characters from 'a' to 'z' in alphabetical order\n### The function should return 26, as there are 26 distinct characters in the string\nassert count_distinct_characters(''.join(chr(97 + i) for i in range(26)) * (10**6 // 26)) == 26, 'Failed to handle case where all characters are distinct.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return 0\nassert count_distinct_characters(123) == 0, 'Failed to handle case where the input is not a string.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(count_distinct_characters))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/17",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "entry_point": "parse_music",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\ncheck(parse_music)",
        "plan": [
            "# 1. Split the input music_string by spaces to get a list of individual musical notes.\n# 2. Create an empty list to store the parsed durations of the notes.\n# 3. Loop through each musical note in the list.\n# 4. Check the last character of the note to determine its duration.\n# 5. If the last character is 'o', append 4 to the list of durations.\n# 6. If the last character is '|', append 2 to the list of durations.\n# 7. If the last character is '.', append 1 to the list of durations.\n# 8. Return the list of parsed durations."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `music_string` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should parse the `music_string` and return a list of integers representing the duration of each note.\n\n## Edge Cases\n- Handle an empty `music_string`, returning an empty list.\n- Handle invalid characters in the `music_string`, skipping them and returning the durations of valid notes.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `music_string`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string `music_string` input.\n\n### Reliability\n- Ensure the function can handle any valid music note format and return the correct durations.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The music string contains a whole note, a half note, a quarter note, and two whole notes\n### The function should return the corresponding durations: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], 'Failed to parse the music string correctly.'\n\n## Edge Cases\n### The music string is empty, so the function should return an empty list\nassert parse_music('') == [], 'Failed to handle an empty music string.'\n\n### The music string contains invalid characters 'a' and 'b'\n### The function should skip these characters and return the durations of the valid notes: [4, 2, 1, 2]\nassert parse_music('o o| .| a| b| .| o|') == [4, 2, 1, 2], 'Failed to skip invalid characters in the music string.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The music string contains 10^6 whole notes\n### The function should return a list with 10^6 elements, all of which are 4\nassert parse_music('o ' * 10**6) == [4] * 10**6, 'Failed to handle large input size.'\n\n### The music string contains 10^6 half notes\n### The function should return a list with 10^6 elements, all of which are 2\nassert parse_music('o| ' * 10**6) == [2] * 10**6, 'Failed to handle large input size.'\n\n### The music string contains 10^6 quarter notes\n### The function should return a list with 10^6 elements, all of which are 1\nassert parse_music('.| ' * 10**6) == [1] * 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The music string input is not a string, so the function should return an empty list\nassert parse_music(12345) == [], 'Failed to handle case where the input music_string is not a string.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(parse_music))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/18",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "entry_point": "how_many_times",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\ncheck(how_many_times)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the number of occurrences of the substring in the original string.\n# 2. Loop through the original string using a sliding window approach.\n# 3. Check if the current substring in the window is equal to the given substring.\n# 4. If they are equal, increment the count.\n# 5. Move the window by one character and repeat steps 3-4 until the end of the string.\n# 6. Return the final count."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two strings `string` and `substring` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should count the number of times the given `substring` can be found in the `string`, considering overlapping cases.\n\n## Edge Cases\n- Handle empty `string` and `substring` inputs, returning 0.\n- Handle the case where `substring` is longer than `string`, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n * m), where n is the length of the `string` and m is the length of the `substring`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string `string` or `substring` inputs.\n\n### Reliability\n- Avoid index errors while accessing characters in `string` and `substring`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5.\n- Code should be concise and avoid unnecessary computations."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The substring 'a' can be found 3 times in the string 'aaa'\nassert how_many_times('aaa', 'a') == 3, 'Failed to count the number of occurrences of the substring.'\n\n### The substring 'aa' can be found 3 times in the string 'aaaa'\nassert how_many_times('aaaa', 'aa') == 3, 'Failed to count the number of occurrences of the substring.'\n\n### The substring 'abc' can be found 2 times in the string 'abcabc'\nassert how_many_times('abcabc', 'abc') == 2, 'Failed to count the number of occurrences of the substring.'\n\n### The substring 'aba' can be found 0 times in the string 'abcabc'\nassert how_many_times('abcabc', 'aba') == 0, 'Failed to count the number of occurrences of the substring.'\n\n## Edge Cases\n### Both the string and the substring are empty, so the function should return 0\nassert how_many_times('', '') == 0, 'Failed to handle empty string and substring.'\n\n### The substring 'a' cannot be found in the empty string, so the function should return 0\nassert how_many_times('', 'a') == 0, 'Failed to handle empty string.'\n\n### The substring 'abc' cannot be found in the string 'a', so the function should return 0\nassert how_many_times('a', 'abc') == 0, 'Failed to handle substring longer than the string.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The string contains 10^6 'a' characters and the substring is 'a'\n### The substring can be found 10^6 times in the string\nassert how_many_times('a' * 10**6, 'a') == 10**6, 'Failed to handle large input size.'\n\n### The string contains 10^6 'a' characters and the substring is 'aa'\n### The substring can be found 10^5 times in the string\nassert how_many_times('a' * 10**6, 'aa') == 10**5, 'Failed to handle large input size.'\n\n### The string contains 10^6 'a' characters and the substring is 'aaa'\n### The substring can be found 10^4 times in the string\nassert how_many_times('a' * 10**6, 'aaa') == 10**4, 'Failed to handle large input size.'\n\n### The string contains 10^6 'a' characters and the substring is 'aaaa'\n### The substring can be found 10^3 times in the string\nassert how_many_times('a' * 10**6, 'aaaa') == 10**3, 'Failed to handle large input size.'\n\n### The string contains 10^6 'a' characters and the substring is 'aaaaa'\n### The substring cannot be found in the string, so the function should return 0\nassert how_many_times('a' * 10**6, 'aaaaa') == 0, 'Failed to handle case where the substring cannot be found.'\n\n## Specific Quality Requirements\n### Robustness\n#### The string input is not a string, so the function should return 0\nassert how_many_times(123, 'a') == 0, 'Failed to handle case where the input string is not a string.'\n\n#### The substring input is not a string, so the function should return 0\nassert how_many_times('abc', 123) == 0, 'Failed to handle case where the input substring is not a string.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(how_many_times))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/19",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "entry_point": "sort_numbers",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\ncheck(sort_numbers)",
        "plan": [
            "# 1. Create a dictionary to map the numberals to their corresponding numeric values.\n# 2. Split the input string into a list of numberals.\n# 3. Convert each numberal to its numeric value using the dictionary.\n# 4. Sort the list of numeric values.\n# 5. Convert each numeric value back to its corresponding numberal using the dictionary.\n# 6. Join the sorted numberals into a string, separated by spaces.\n# 7. Return the sorted string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `numbers` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should sort the numbers in the input string from smallest to largest and return the sorted string.\n- The input string will be space-delimited and consist of valid numberals from 'zero' to 'nine'.\n\n## Edge Cases\n- Handle an empty string as input, returning an empty string.\n- Handle input strings with duplicate numberals, ensuring the duplicates are preserved in the sorted output string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n) where n is the number of numberals in the input string.\n- Space complexity: O(n) where n is the number of numberals in the input string.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n- Handle invalid numberals in the input string.\n- Handle numberals in a different case (e.g., 'One', 'two', 'THREE').\n\n### Reliability\n- Ensure proper handling of empty strings and strings with leading/trailing spaces.\n- Handle the case where the input string contains additional non-numberal words.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string contains 'three', 'one', and 'five'.\n### After sorting, the output string should be 'one three five'\nassert sort_numbers('three one five') == 'one three five', 'Failed to sort numbers in the input string.'\n\n### The input string contains 'zero', 'eight', and 'nine'.\n### After sorting, the output string should be 'eight nine zero'\nassert sort_numbers('zero eight nine') == 'eight nine zero', 'Failed to sort numbers in the input string.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty string\nassert sort_numbers('') == '', 'Failed to handle an empty input string.'\n\n### The input string contains duplicate numberals.\n### After sorting, the output string should have the duplicates preserved.\nassert sort_numbers('two three two') == 'two two three', 'Failed to preserve duplicates in the input string.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 numberals, all of which are 'one'\n### The sorted output string should contain 10^6 'one' numberals\nassert sort_numbers('one ' * 10**6) == ' '.join(['one'] * 10**6), 'Failed to handle large input size.'\n\n### The input string contains 10^6 numberals, all of which are 'zero'\n### The sorted output string should contain 10^6 'zero' numberals\nassert sort_numbers('zero ' * 10**6) == ' '.join(['zero'] * 10**6), 'Failed to handle case where all numberals are the same.'\n\n### The input string contains 10^6 numberals, all of which are 'five'\n### The sorted output string should contain 10^6 'five' numberals\nassert sort_numbers('five ' * 10**6) == ' '.join(['five'] * 10**6), 'Failed to handle case where all numberals are the same.'\n\n### The input string contains 10^6 numberals, all of which are in lowercase\n### The sorted output string should contain 10^6 'eight' numberals\nassert sort_numbers('eight ' * 10**6) == ' '.join(['eight'] * 10**6), 'Failed to handle case where all numberals are in lowercase.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty string\nassert sort_numbers(123) == '', 'Failed to handle case where the input is not a string.'\n\n#### The input string contains invalid numberals, so the function should return an empty string\nassert sort_numbers('one invalid two') == '', 'Failed to handle case where the input string contains invalid numberals.'\n\n#### The input string contains numberals in mixed case, so the function should handle them correctly\nassert sort_numbers('One Two THREE') == 'One THREE Two', 'Failed to handle case where the input string contains numberals in mixed case.'\n\n### Reliability\n#### The input string contains leading and trailing spaces, which should be handled properly\nassert sort_numbers('  three one five  ') == 'one three five', 'Failed to handle leading and trailing spaces in the input string.'\n\n#### The input string contains additional non-numberal words, which should be ignored during sorting\nassert sort_numbers('three one non_numberal five') == 'one three five', 'Failed to ignore additional non-numberal words in the input string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sort_numbers))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/20",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "entry_point": "find_closest_elements",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ncheck(find_closest_elements)",
        "plan": [
            "# 1. Initialize variables min_diff, closest_pair, and pair_found.\n# 2. Loop through each number in the input list.\n# 3. For each number, compare it with all other numbers in the list.\n# 4. Calculate the absolute difference between the current number and each other number.\n# 5. If the absolute difference is smaller than min_diff, update min_diff and closest_pair.\n# 6. Set pair_found to True.\n# 7. Return closest_pair if pair_found is True, otherwise return an empty tuple."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of floats `numbers` as input.\n- It returns a tuple of two floats.\n\n## Expected Behavior\n- The function should select and return two numbers from the `numbers` list that are the closest to each other.\n- The numbers in the returned tuple should be in ascending order, with the smaller number first.\n\n## Edge Cases\n- Handle the case where the `numbers` list has less than two elements, raising a ValueError or returning None.\n- Handle the case where multiple pairs of numbers have the same minimum difference, returning any of them.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^2) where n is the length of the `numbers` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `numbers` input or non-float elements in the `numbers` list.\n- Handle the case where the `numbers` list has duplicate elements.\n\n### Reliability\n- Avoid index errors while accessing `numbers` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The closest elements in the list are 2.0 and 2.2\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2), 'Failed to find the closest elements in the list.'\n\n### The closest elements in the list are both 2.0\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0), 'Failed to handle case where there are duplicate closest elements.'\n\n## Edge Cases\n### The numbers list has less than two elements, so the function should raise a ValueError or return None\n#assert find_closest_elements([]) == None, 'Failed to handle case where the numbers list has less than two elements.'\n#assert find_closest_elements([1.0]) == None, 'Failed to handle case where the numbers list has less than two elements.'\n\n### The numbers list contains duplicate elements, so the function should handle it correctly\n### The closest elements in the list are 1.0 and 1.0\nassert find_closest_elements([1.0, 1.0, 1.0, 1.0]) == (1.0, 1.0), 'Failed to handle case where there are duplicate elements in the numbers list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### The closest elements in the list are 1.0 and 1.1\nassert find_closest_elements(list(range(1, 10**6 + 1))) == (1.0, 1.1), 'Failed to handle large input size.'\n\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### The closest elements in the list are both 1.0\nassert find_closest_elements([1.0] * 10**6) == (1.0, 1.0), 'Failed to handle case where all elements in the list are the same.'\n\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### The closest elements in the list are 10^5 and 10^6\nassert find_closest_elements(list(range(1, 10**6 + 1))) == (10**5, 10**6), 'Failed to handle case where the closest elements are at the ends of the list.'\n\n### The numbers list contains 10^6 elements with increasing values from 1 to 10^6\n### The closest elements in the list are both 10^5\nassert find_closest_elements([10**5] * 10**6) == (10**5, 10**5), 'Failed to handle case where all elements in the list are the same.'\n\n## Specific Quality Requirements\n### Robustness\n#### The numbers input is not a list of floats, so the function should return None\n#assert find_closest_elements('invalid') == None, 'Failed to handle case where the input numbers is not a list of floats.'\n\n#### The numbers list contains elements that are not floats, so the function should return None\n#assert find_closest_elements([1.0, 2.0, 'invalid', 4.0]) == None, 'Failed to handle case where the input list contains elements that are not floats.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(find_closest_elements))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/21",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "entry_point": "rescale_to_unit",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\ncheck(rescale_to_unit)",
        "plan": [
            "# 1. Find the minimum and maximum values in the input list of numbers.\n# 2. Calculate the range of values by subtracting the minimum from the maximum.\n# 3. Initialize an empty list to store the rescaled values.\n# 4. Loop through each number in the input list.\n# 5. Calculate the rescaled value by subtracting the minimum value from the current number, and then dividing it by the range of values.\n# 6. Append the rescaled value to the empty list.\n# 7. Return the list of rescaled values."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of floats `numbers` as input.\n- It returns a list of floats.\n\n## Expected Behavior\n- The function should apply a linear transform to the input list `numbers` such that the smallest number becomes 0 and the largest number becomes 1.\n- The rescaling should be done proportionally to maintain the relative differences between the numbers.\n- The resulting list should have the same length as the input list.\n\n## Edge Cases\n- Handle an empty `numbers` list, returning an empty list.\n- Handle a `numbers` list with a single element, returning a list with that element.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `numbers` list.\n- Space complexity: O(n) as the function creates a new list to store the rescaled values.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input or non-float elements in the `numbers` list.\n- Handle input lists with less than two elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The smallest number is 1 and the largest number is 5\n### After rescaling, the smallest number becomes 0 and the largest number becomes 1\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0], 'Failed to rescale the numbers correctly.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert rescale_to_unit([]) == [], 'Failed to handle an empty input list.'\n\n### The input list has a single element, so the function should return a list with that element\nassert rescale_to_unit([3.14159]) == [3.14159], 'Failed to handle a single element input list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The nums list contains 10^6 elements with increasing values from 1 to 10^6\n### After rescaling, the smallest number becomes 0 and the largest number becomes 1\nassert rescale_to_unit(list(range(1, 10**6 + 1))) == [0.0, 9.99999e-07, 1.9999998e-06, ..., 0.999998, 0.999999, 1.0], 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The numbers input is not a list of floats, so the function should return an empty list\nassert rescale_to_unit('invalid') == [], 'Failed to handle case where the input numbers is not a list of floats.'\n\n#### The numbers list contains elements that are not floats, so the function should return an empty list\nassert rescale_to_unit([1, 2, 'invalid', 4.0]) == [], 'Failed to handle case where the input list contains elements that are not floats.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(rescale_to_unit))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/22",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n",
        "entry_point": "filter_integers",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\ncheck(filter_integers)",
        "plan": [
            "# 1. Create an empty list to store the filtered integers.\n# 2. Loop through each value in the input list.\n# 3. Check if the value is an instance of the int class using the isinstance() function.\n# 4. If the value is an integer, append it to the list of filtered integers.\n# 5. Return the list of filtered integers."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of values `values` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should filter the input list `values` and return a new list containing only the integer values from the input list.\n\n## Edge Cases\n- Handle an empty `values` list, returning an empty list.\n- Handle the case where there are no integer values in the `values` list, returning an empty list.\n- Handle non-integer values in the `values` list, skipping them in the output list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `values` list.\n- Space complexity: O(1) (excluding the output list).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `values` input.\n- Handle non-integer elements in the `values` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5.\n- The code should be modular and well-organized, with meaningful variable names and clear comments."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list contains a mix of integer and non-integer values\n### The function should filter out non-integer values and return only the integer values\nassert filter_integers(['a', 3.14, 5]) == [5], 'Failed to filter out non-integer values.'\n\n### The input list contains a mix of integer and non-integer values\n### The function should filter out non-integer values and return only the integer values\nassert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3], 'Failed to filter out non-integer values.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert filter_integers([]) == [], 'Failed to handle an empty input list.'\n\n### The input list contains no integer values, so the function should return an empty list\nassert filter_integers(['a', 'b', 'c']) == [], 'Failed to handle case where there are no integer values.'\n\n### The input list contains only integer values, so the function should return the same list\nassert filter_integers([1, 2, 3]) == [1, 2, 3], 'Failed to handle case where all values are integers.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are integers\n### The function should return the same list, without any filtering\nassert filter_integers(list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are non-integer values\n### The function should return an empty list, as there are no integer values to filter\nassert filter_integers(['a'] * 10**6) == [], 'Failed to handle large input size with no integer values.'\n\n### The input list contains 10^6 elements, alternating between integer and non-integer values\n### The function should filter out the non-integer values and return only the integer values\nassert filter_integers([1, 'a', 2, 'b'] * (10**6 // 4)) == [1, 2] * (10**6 // 4), 'Failed to handle large input size with alternating integer and non-integer values.'\n\n## Specific Quality Requirements\n### Robustness\n#### The values input is not a list, so the function should return an empty list\nassert filter_integers('invalid') == [], 'Failed to handle case where the input values is not a list.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(filter_integers))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/23",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "entry_point": "strlen",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\ncheck(strlen)",
        "plan": [
            "# 1. Use the len() function to calculate the length of the input string.\n# 2. Return the result of the len() function."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `string` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the length of the given string.\n\n## Edge Cases\n- Handle an empty string, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1) (constant time complexity).\n- Space complexity: O(1) (constant space complexity).\n- Ensure efficiency even for extremely large strings, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string inputs.\n\n### Reliability\n- Ensure the function returns correct results for all valid inputs.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string is empty, so the function should return 0\nassert strlen('') == 0, 'Failed to handle an empty input string.'\n\n### The input string has 3 characters, so the function should return 3\nassert strlen('abc') == 3, 'Failed to return the correct length of the input string.'\n\n## Edge Cases\n### The input string is a single character, so the function should return 1\nassert strlen('a') == 1, 'Failed to handle case where the input string has length 1.'\n\n### The input string is a space character, so the function should return 1\nassert strlen(' ') == 1, 'Failed to handle case where the input string is a space character.'\n\n### The input string is a whitespace character, so the function should return 1\nassert strlen('\\n') == 1, 'Failed to handle case where the input string is a whitespace character.'\n\n### The input string contains special characters, so the function should return the correct length of the input string\nassert strlen('!@#$%^&*()') == 10, 'Failed to return the correct length of the input string with special characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has length 10^6, so the function should return the result in a reasonable time\nassert strlen('a' * 10**6) == 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should raise a TypeError\ntry:\n    strlen(123)\n    assert False, 'Failed to handle case where the input is not a string.'\nexcept TypeError:\n    pass\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(strlen))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/24",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "entry_point": "largest_divisor",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\ncheck(largest_divisor)",
        "plan": [
            "# 1. Iterate from n-1 to 1 (in descending order) and check if each number divides n evenly.\n# 2. Return the first number that divides n evenly.\n# 3. If no number is found, return -1."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the largest number that divides `n` evenly and is smaller than `n`.\n\n## Edge Cases\n- Handle negative `n` values, returning -1.\n- Handle the case where there is no divisor that meets the condition, returning -1.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the value of `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `n` input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The largest divisor of 15 that is smaller than 15 is 5\nassert largest_divisor(15) == 5, 'Failed to find the largest divisor.'\n\n### The largest divisor of 10 that is smaller than 10 is 5\nassert largest_divisor(10) == 5, 'Failed to find the largest divisor.'\n\n### The largest divisor of 16 that is smaller than 16 is 8\nassert largest_divisor(16) == 8, 'Failed to find the largest divisor.'\n\n### The largest divisor of 20 that is smaller than 20 is 10\nassert largest_divisor(20) == 10, 'Failed to find the largest divisor.'\n\n## Edge Cases\n### The input is a negative number, so the function should return -1\nassert largest_divisor(-5) == -1, 'Failed to handle negative input.'\n\n### There is no divisor smaller than 1 that divides 1 evenly, so the function should return -1\nassert largest_divisor(1) == -1, 'Failed to handle case where there is no divisor that meets the condition.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input is a large prime number, so the function should return 1\nassert largest_divisor(999999999989) == 1, 'Failed to handle large input size.'\n\n### The input is a large composite number, so the function should return the largest divisor that is smaller than the input\nassert largest_divisor(999999999979) == 99999999989, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return -1\nassert largest_divisor('invalid') == -1, 'Failed to handle case where the input is not an integer.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(largest_divisor))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/25",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "entry_point": "factorize",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\ncheck(factorize)",
        "plan": [
            "# 1. Create an empty list to store the prime factors.\n# 2. Use a while loop to iterate from 2 to the square root of the input number.\n# 3. Check if the current number divides the input number evenly.\n# 4. If it does, add the current number to the list of prime factors and divide the input number by the current number.\n# 5. Repeat this process until the input number is no longer divisible by the current number.\n# 6. After the loop, if the input number is greater than 1, add it to the list of prime factors.\n# 7. Return the list of prime factors."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return the list of prime factors of the input number `n` in ascending order.\n- Each prime factor should appear in the list as many times as it is a factor of `n`.\n- The product of all the factors in the list should be equal to `n`.\n\n## Edge Cases\n- Handle the case where `n` is less than or equal to 1, returning an empty list.\n- Handle the case where `n` is a prime number, returning a list with a single element equal to `n`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(sqrt(n)) where n is the input number.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `n` input.\n- Handle negative `n` input.\n\n### Reliability\n- Avoid arithmetic errors, such as division by zero or integer overflow.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The prime factorization of 8 is 2 * 2 * 2\nassert factorize(8) == [2, 2, 2], 'Failed to factorize number correctly.'\n\n### The prime factorization of 25 is 5 * 5\nassert factorize(25) == [5, 5], 'Failed to factorize number correctly.'\n\n### The prime factorization of 70 is 2 * 5 * 7\nassert factorize(70) == [2, 5, 7], 'Failed to factorize number correctly.'\n\n## Edge Cases\n### The input number is 0, so the function should return an empty list\nassert factorize(0) == [], 'Failed to handle the case where the input number is 0.'\n\n### The input number is 1, so the function should return an empty list\nassert factorize(1) == [], 'Failed to handle the case where the input number is 1.'\n\n### The input number is a prime number, so the function should return a list with a single element equal to the input number\nassert factorize(13) == [13], 'Failed to handle the case where the input number is a prime number.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input number is 10^9, which is a prime number itself\nassert factorize(10**9) == [10**9], 'Failed to handle large input size.'\n\n### The input number is 10^12, which is a product of 2^12 and 5^12\nassert factorize(10**12) == [2] * 12 + [5] * 12, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input number is not an integer, so the function should return an empty list\nassert factorize('invalid') == [], 'Failed to handle case where the input number is not an integer.'\n\n#### The input number is negative, so the function should return an empty list\nassert factorize(-10) == [], 'Failed to handle case where the input number is negative.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(factorize))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/26",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "entry_point": "remove_duplicates",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\ncheck(remove_duplicates)",
        "plan": [
            "# 1. Create an empty list to store the unique elements.\n# 2. Loop through each element in the input list.\n# 3. Check if the element is already in the unique list.\n# 4. If it is not, append it to the unique list.\n# 5. Return the unique list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `numbers` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should remove all elements from `numbers` that occur more than once.\n- The order of elements in the list should be preserved.\n\n## Edge Cases\n- Handle an empty `numbers` list, returning an empty list.\n- Handle the case where all elements in `numbers` occur more than once, returning an empty list.\n- Handle the case where all elements in `numbers` are unique, returning the same list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `numbers` list.\n- Space complexity: O(n) to store the unique elements.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `numbers` input or non-integer elements in the list.\n\n### Reliability\n- Avoid index errors while accessing `numbers` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list contains duplicate elements [2, 2]\n### After removing duplicates, the list should contain [2]\nassert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4], 'Failed to remove duplicate elements.'\n\n### The input list contains duplicate elements [2, 2, 2, 2]\n### After removing duplicates, the list should be empty\nassert remove_duplicates([2, 2, 2, 2]) == [], 'Failed to handle case where all elements are duplicates.'\n\n### The input list contains only unique elements, so the output should be the same as the input\nassert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4], 'Failed to handle case where there are no duplicate elements.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert remove_duplicates([]) == [], 'Failed to handle an empty input list.'\n\n### The input list contains one element, so the output should be the same as the input\nassert remove_duplicates([1]) == [1], 'Failed to handle case where there is only one element in the list.'\n\n### The input list contains duplicate elements [1, 1, 1, 1]\n### After removing duplicates, the list should be empty\nassert remove_duplicates([1, 1, 1, 1]) == [], 'Failed to handle case where all elements are duplicates.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The nums list contains 10^6 elements with increasing values from 1 to 10^6\n### All elements are unique, so the output should be the same as the input\nassert remove_duplicates(list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The nums list contains 10^6 elements with all elements being 0\n### After removing duplicates, the list should contain a single 0\nassert remove_duplicates([0] * 10**6) == [0], 'Failed to handle case where all elements are the same.'\n\n## Specific Quality Requirements\n### Robustness\n#### The nums input is not a list of integers, so the function should return an empty list\nassert remove_duplicates('invalid') == [], 'Failed to handle case where the input nums is not a list of integers.'\n\n#### The nums list contains elements that are not integers, so the function should return an empty list\nassert remove_duplicates([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(remove_duplicates))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/27",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n",
        "entry_point": "flip_case",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\ncheck(flip_case)",
        "plan": [
            "# 1. Create an empty string to store the flipped case string.\n# 2. Loop through each character in the input string.\n# 3. Check if the character is lowercase using the islower() function.\n# 4. If it is, convert it to uppercase using the upper() function and append it to the flipped case string.\n# 5. If the character is not lowercase, check if it is uppercase using the isupper() function.\n# 6. If it is, convert it to lowercase using the lower() function and append it to the flipped case string.\n# 7. If the character is neither lowercase nor uppercase, append it as is to the flipped case string.\n# 8. Return the flipped case string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `string` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should return a new string where lowercase characters in the input string are flipped to uppercase and uppercase characters are flipped to lowercase.\n\n## Edge Cases\n- Handle an empty input string, returning an empty string.\n- Handle an input string with no alphabetical characters, returning the input string unchanged.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n), where n is the length of the input string.\n- Space complexity: O(n), where n is the length of the input string.\n- Ensure efficiency even for extremely long input strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string input.\n\n### Reliability\n- Avoid index errors while accessing string characters.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string is \"Hello\"\n### The lowercase characters 'e', 'l', and 'l' are flipped to uppercase, and the uppercase character 'H' is flipped to lowercase\n### The expected output is \"hELLO\"\nassert flip_case(\"Hello\") == \"hELLO\", 'Failed to flip lowercase characters to uppercase and vice versa.'\n\n### The input string is \"wORLD\"\n### The lowercase character 'w' is flipped to uppercase, and the uppercase characters 'O', 'R', 'L', and 'D' are flipped to lowercase\n### The expected output is \"World\"\nassert flip_case(\"wORLD\") == \"World\", 'Failed to flip lowercase characters to uppercase and vice versa.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty string\nassert flip_case(\"\") == \"\", 'Failed to handle an empty input string.'\n\n### The input string contains only non-alphabetical characters, so the function should return the input string unchanged\nassert flip_case(\"123#$%^\") == \"123#$%^\", 'Failed to handle a string with no alphabetical characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has a length of 10^6 and consists of alternating uppercase and lowercase characters\n### The expected output is the input string with the case of each character flipped\nassert flip_case(\"AbCdEfGhIjKlMnOpQrStUvWxYz\" * 10**4) == \"aBcDeFgHiJkLmNoPqRsTuVwXyZ\" * 10**4, 'Failed to handle large input size.'\n\n### The input string has a length of 10^6 and consists of only lowercase characters\n### The expected output is the input string with all characters flipped to uppercase\nassert flip_case(\"abcdefghijklmnopqrstuvwxyz\" * 10**4) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" * 10**4, 'Failed to handle case where all characters are lowercase.'\n\n### The input string has a length of 10^6 and consists of only uppercase characters\n### The expected output is the input string with all characters flipped to lowercase\nassert flip_case(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" * 10**4) == \"abcdefghijklmnopqrstuvwxyz\" * 10**4, 'Failed to handle case where all characters are uppercase.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty string\nassert flip_case(123) == \"\", 'Failed to handle case where the input is not a string.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(flip_case))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/28",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "entry_point": "concatenate",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\ncheck(concatenate)",
        "plan": [
            "# 1. Initialize an empty string to store the concatenated string.\n# 2. Loop through each string in the input list.\n# 3. Add each string to the concatenated string using the += operator.\n# 4. Return the concatenated string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of strings `strings` as input.\n- It returns a single string.\n\n## Expected Behavior\n- The function should concatenate all strings in the `strings` list into a single string.\n\n## Edge Cases\n- Handle an empty `strings` list, returning an empty string.\n- Handle the case where `strings` contains one or more empty strings, returning an empty string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the total number of characters in the input strings.\n- Space complexity: O(m) where m is the total number of characters in the concatenated string.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input or non-string elements in the `strings` list.\n\n### Reliability\n- Avoid index errors while accessing `strings` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Concatenating an empty list of strings should result in an empty string\nassert concatenate([]) == '', 'Failed to handle an empty list input.'\n\n### Concatenating the strings 'a', 'b', and 'c' should result in the string 'abc'\nassert concatenate(['a', 'b', 'c']) == 'abc', 'Failed to concatenate the strings correctly.'\n\n### Concatenating the strings 'hello', 'world', and '!' should result in the string 'hello world !'\nassert concatenate(['hello', 'world', '!']) == 'hello world !', 'Failed to concatenate the strings correctly.'\n\n## Edge Cases\n### Concatenating a list with one element, which is an empty string, should result in an empty string\nassert concatenate(['']) == '', 'Failed to handle a list with one empty string element.'\n\n### Concatenating a list with multiple empty strings should result in an empty string\nassert concatenate(['', '', '']) == '', 'Failed to handle a list with multiple empty string elements.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 strings with a total of 10^6 characters\n### The strings are 'a', 'b', 'c', ..., 'j' repeated 10^5 times\n### The concatenated string should be 'abcdefghij' repeated 10^5 times\nexpected_output = 'abcdefghij' * (10**5)\nassert concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'] * (10**5)) == expected_output, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return an empty string\nassert concatenate('invalid') == '', 'Failed to handle case where the input is not a list.'\n\n#### The input list contains non-string elements, so the function should return an empty string\nassert concatenate(['a', 1, 'b', 2, 'c']) == '', 'Failed to handle case where the input list contains non-string elements.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(concatenate))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/29",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n",
        "entry_point": "filter_by_prefix",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\ncheck(filter_by_prefix)",
        "plan": [
            "The plan for the function is as follows:\n\n1. Create an empty list `filtered_strings` to store the filtered strings.\n2. Loop through each string in the input list `strings`.\n3. Check if the current string starts with the given prefix using the `startswith()` method.\n4. If the string starts with the prefix, append it to the `filtered_strings` list.\n5. Return the `filtered_strings` list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and other common runtime errors.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of strings `strings` and a prefix string `prefix` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should filter the input list `strings` and return only the strings that start with the given `prefix`.\n\n## Edge Cases\n- Handle an empty `strings` list, returning an empty list.\n- Handle the case where no strings in `strings` start with the given `prefix`, returning an empty list.\n- Handle multiple strings with the same prefix.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n*m) where n is the length of the `strings` list and m is the average length of the strings.\n- Space complexity: O(k) where k is the number of strings that start with the given prefix.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `strings` input or a non-string `prefix`.\n- Handle empty strings in the `strings` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list is empty, so the function should return an empty list\nassert filter_by_prefix([], 'a') == [], 'Failed to handle an empty input list.'\n\n### The input list contains strings that start with the given prefix, so the function should return those strings in a list\nassert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array'], 'Failed to filter strings with the given prefix.'\n\n## Edge Cases\n### The input list contains strings that do not start with the given prefix, so the function should return an empty list\nassert filter_by_prefix(['bcd', 'cde', 'def', 'efg'], 'a') == [], 'Failed to handle case where no strings start with the given prefix.'\n\n### The input list contains strings that all have the same prefix, so the function should return the entire input list\nassert filter_by_prefix(['abc', 'abcd', 'abcde', 'abcdef'], 'abc') == ['abc', 'abcd', 'abcde', 'abcdef'], 'Failed to handle case where all strings have the same prefix.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 strings, all of which start with the given prefix\n### The function should return the entire input list\nassert filter_by_prefix(['a' + str(i) for i in range(10**6)], 'a') == ['a' + str(i) for i in range(10**6)], 'Failed to handle large input size.'\n\n### The input list contains 10^6 strings, none of which start with the given prefix\n### The function should return an empty list\nassert filter_by_prefix(['b' + str(i) for i in range(10**6)], 'a') == [], 'Failed to handle large input size where no strings start with the given prefix.'\n\n### The input list contains 10^6 strings, all of which are empty strings\n### The function should return an empty list\nassert filter_by_prefix([''] * 10**6, 'a') == [], 'Failed to handle case where all strings are empty strings.'\n\n## Specific Quality Requirements\n### Robustness\n#### The strings input is not a list, so the function should return an empty list\nassert filter_by_prefix('invalid', 'a') == [], 'Failed to handle case where the input strings is not a list.'\n\n#### The prefix input is not a string, so the function should return an empty list\nassert filter_by_prefix(['abc', 'def', 'ghi'], 123) == [], 'Failed to handle case where the input prefix is not a string.'\n\n#### The strings list contains an element that is not a string, so the function should return an empty list\nassert filter_by_prefix(['abc', 123, 'def'], 'a') == [], 'Failed to handle case where the input list contains elements that are not strings.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(filter_by_prefix))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/30",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [e for e in l if e > 0]\n",
        "entry_point": "get_positive",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\ncheck(get_positive)",
        "plan": [
            "# 1. Create an empty list to store the positive numbers.\n# 2. Loop through each element in the input list.\n# 3. Check if the current element is greater than zero.\n# 4. If it is, append it to the list of positive numbers.\n# 5. Return the list of positive numbers."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `l` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a list that contains only the positive numbers from the input list `l`.\n\n## Edge Cases\n- Handle an empty input list `l`, returning an empty list.\n- Handle the case where all elements in the input list `l` are negative, returning an empty list.\n- Handle the case where all elements in the input list `l` are positive, returning the same list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input list `l`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input.\n- Handle non-integer elements in the input list `l`.\n\n### Reliability\n- Avoid index errors while accessing elements in the input list `l`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list contains negative and positive numbers\n### The function should return a list that contains only the positive numbers\nassert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6], 'Failed to return only positive numbers.'\n\n### The input list contains negative, positive, and zero numbers\n### The function should return a list that contains only the positive numbers\nassert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1], 'Failed to return only positive numbers.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert get_positive([]) == [], 'Failed to handle an empty input list.'\n\n### The input list contains only negative numbers, so the function should return an empty list\nassert get_positive([-1, -2, -3]) == [], 'Failed to handle case where all elements are negative.'\n\n### The input list contains only positive numbers, so the function should return the same list\nassert get_positive([1, 2, 3]) == [1, 2, 3], 'Failed to handle case where all elements are positive.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements with increasing values from -10^6 to 10^6\n### The function should return a list that contains only the positive numbers\nassert get_positive(list(range(-10**6, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are 10^6\n### The function should return the same list since all elements are positive\nassert get_positive([10**6] * 10**6) == [10**6] * 10**6, 'Failed to handle case where all elements are positive.'\n\n### The input list contains 10^6 elements with alternating positive and negative numbers\n### The function should return a list that contains only the positive numbers\nassert get_positive([(-1)**i * i for i in range(1, 10**6 + 1)]) == list(range(2, 10**6 + 1, 2)), 'Failed to handle case where elements alternate between positive and negative.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input l is not a list, so the function should return an empty list\nassert get_positive('invalid') == [], 'Failed to handle case where the input l is not a list.'\n\n#### The input list contains elements that are not integers, so the function should return an empty list\nassert get_positive([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(get_positive))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/31",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "entry_point": "is_prime",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\ncheck(is_prime)",
        "plan": [
            "# 1. Check if the given number n is less than 2. If it is, return False.\n# 2. Loop through numbers from 2 to the square root of n (inclusive).\n# 3. Check if n is divisible by any of the numbers in the loop. If it is, return False.\n# 4. If the loop completes without finding any divisors, return True (indicating that n is prime)."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the given number `n` is prime, and False otherwise.\n\n## Edge Cases\n- Handle negative numbers, returning False.\n- Handle the case where n is 0 or 1, returning False.\n- Handle the case where n is a large prime number.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(sqrt(n)).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n`.\n\n### Reliability\n- Ensure the function provides correct results for both prime and non-prime numbers.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### 6 is not a prime number, so the function should return False\nassert is_prime(6) == False, 'Failed to identify a non-prime number.'\n\n### 101 is a prime number, so the function should return True\nassert is_prime(101) == True, 'Failed to identify a prime number.'\n\n### 11 is a prime number, so the function should return True\nassert is_prime(11) == True, 'Failed to identify a prime number.'\n\n### 13441 is a prime number, so the function should return True\nassert is_prime(13441) == True, 'Failed to identify a prime number.'\n\n### 61 is a prime number, so the function should return True\nassert is_prime(61) == True, 'Failed to identify a prime number.'\n\n### 4 is not a prime number, so the function should return False\nassert is_prime(4) == False, 'Failed to identify a non-prime number.'\n\n### 1 is not a prime number, so the function should return False\nassert is_prime(1) == False, 'Failed to identify a non-prime number.'\n\n## Edge Cases\n### -1 is not a prime number, so the function should return False\nassert is_prime(-1) == False, 'Failed to handle negative numbers.'\n\n### 0 is not a prime number, so the function should return False\nassert is_prime(0) == False, 'Failed to handle the case where n is 0.'\n\n### 2 is a prime number, so the function should return True\nassert is_prime(2) == True, 'Failed to handle the smallest prime number.'\n\n### 3 is a prime number, so the function should return True\nassert is_prime(3) == True, 'Failed to handle the smallest odd prime number.'\n\n### 97 is a prime number, so the function should return True\nassert is_prime(97) == True, 'Failed to handle a prime number with only 2 factors.'\n\n### 1000000007 is a prime number, so the function should return True\nassert is_prime(1000000007) == True, 'Failed to handle a large prime number.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input number is 10^9 + 7, which is a prime number\nassert is_prime(1000000007) == True, 'Failed to handle a large prime number.'\n\n### The input number is 10^9 + 8, which is not a prime number\nassert is_prime(1000000008) == False, 'Failed to handle a large non-prime number.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return False\nassert is_prime('invalid') == False, 'Failed to handle case where the input is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_prime))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/32",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "entry_point": "find_zero",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\ncheck(find_zero)",
        "plan": [
            "# 1. Import the math module for the power function.\n# 2. Implement the poly function to evaluate a polynomial at a given point x.\n# 3. The poly function takes a list of coefficients xs and a point x.\n# 4. Use a list comprehension to iterate over the coefficients and calculate the sum of coeff * x^i, where i is the index of the coefficient.\n# 5. Return the result of the sum.\n# 6. Implement the find_zero function to find a zero point of a polynomial.\n# 7. The find_zero function takes a list of coefficients xs.\n# 8. Check if the length of xs is even.\n# 9. If it is not, raise an exception or return an error message indicating that the list must have an even number of coefficients.\n# 10. Find the largest non-zero coefficient in xs.\n# 11. Iterate over the coefficients in xs and check if the coefficient is equal to the largest non-zero coefficient.\n# 12. If it is, calculate the corresponding value of x using the formula -coeff / (2 * coeff_prev).\n# 13. Return the value of x."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The `poly` function takes a list `xs` of coefficients and a float `x` as input.\n- The `find_zero` function takes a list `xs` of coefficients as input.\n- Both functions return a float.\n\n## Expected Behavior\n- The `poly` function should evaluate the polynomial with coefficients `xs` at the point `x` and return the result.\n- The `find_zero` function should find a zero point of the polynomial defined by `xs` and return that point.\n- If there are multiple zero points, the function should return only one of them.\n- The `find_zero` function should only accept a list `xs` with an even number of coefficients and the largest non-zero coefficient as it guarantees a solution.\n\n## Edge Cases\n- Handle an empty `xs` list, returning an error message or raising an exception.\n- Handle a non-list `xs` input, returning an error message or raising an exception.\n- Handle a non-float `x` input in the `poly` function, returning an error message or raising an exception.\n- Handle a non-integer or non-float coefficient in the `xs` list, returning an error message or raising an exception.\n- Handle a `xs` list with an odd number of coefficients in the `find_zero` function, returning an error message or raising an exception.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) for both functions, where n is the length of the `xs` list.\n- Space complexity: O(1) for both functions.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle invalid input gracefully, providing clear error messages or raising appropriate exceptions.\n- Ensure the absence of division by zero errors or other arithmetic operation errors.\n\n### Reliability\n- Avoid index errors while accessing elements in the `xs` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The polynomial is f(x) = 1 + 2x\n### The zero point of the polynomial is -0.5\nassert round(find_zero([1, 2]), 2) == -0.5, 'Failed to find the zero point of the polynomial.'\n\n### The polynomial is f(x) = (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n### The zero point of the polynomial is 1.0\nassert round(find_zero([-6, 11, -6, 1]), 2) == 1.0, 'Failed to find the zero point of the polynomial.'\n\n## Edge Cases\n### The input list is empty, so the function should return an error message or raise an exception\nassert find_zero([]) == None, 'Failed to handle an empty input list.'\n\n### The input list is not a list, so the function should return an error message or raise an exception\nassert find_zero('invalid') == None, 'Failed to handle a non-list input.'\n\n### The input list has an odd number of coefficients, so the function should return an error message or raise an exception\nassert find_zero([1, 2, 3]) == None, 'Failed to handle a list with an odd number of coefficients.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list has 10^6 coefficients, all of which are 1\n### The zero point of the polynomial is 0.0\nassert find_zero([1] * 10**6) == 0.0, 'Failed to handle large input size.'\n\n### The input list has 10^6 coefficients, all of which are 0 except for the last coefficient, which is 1\n### The zero point of the polynomial is 0.0\nassert find_zero([0] * (10**6 - 1) + [1]) == 0.0, 'Failed to handle case where all coefficients are 0 except for the last coefficient.'\n\n### The input list has 10^6 coefficients, all of which are 0 except for the first coefficient, which is 1\n### The zero point of the polynomial is None as there are no zero points\nassert find_zero([1] + [0] * (10**6 - 1)) == None, 'Failed to handle case where all coefficients are 0 except for the first coefficient.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input list is not a list of coefficients, so the function should return an error message or raise an exception\nassert poly('invalid', 2) == None, 'Failed to handle a non-list input for coefficients.'\n\n#### The input x is not a float, so the function should return an error message or raise an exception\nassert poly([1, 2], 'invalid') == None, 'Failed to handle a non-float input for x.'\n\n#### The input list contains coefficients that are not integers or floats, so the function should return an error message or raise an exception\nassert poly([1, 2, 'invalid'], 3) == None, 'Failed to handle a list with coefficients that are not integers or floats.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(poly) + inspect.getsource(find_zero))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/33",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "entry_point": "sort_third",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\ncheck(sort_third)",
        "plan": [
            "# 1. Create two empty lists: one to store the values that are not divisible by three, and one to store the values that are divisible by three.\n# 2. Loop through the input list, and for each element, check if its index is divisible by three.\n# 3. If the index is divisible by three, append the element to the list of values divisible by three.\n# 4. If the index is not divisible by three, append the element to the list of values not divisible by three.\n# 5. Sort the list of values divisible by three.\n# 6. Create a new list to store the final result.\n# 7. Loop through the original input list and for each element, check if its index is divisible by three.\n# 8. If the index is divisible by three, append the sorted value from the list of values divisible by three to the final result list.\n# 9. If the index is not divisible by three, append the value from the list of values not divisible by three to the final result list.\n# 10. Return the final result list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list `l` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a new list `l'` such that `l'` is identical to `l` at the indices that are not divisible by three, while its values at the indices that are divisible by three are equal to the values of the corresponding indices of `l`, but sorted.\n\n## Edge Cases\n- Handle an empty `l` list, returning an empty list.\n- Handle the case where all indices in `l` are divisible by three, returning `l` sorted.\n- Handle the case where no indices in `l` are divisible by three, returning `l` unchanged.\n- Handle non-integer elements in `l`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n) where n is the length of the input list `l`.\n- Space complexity: O(n) to store the sorted values.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input or a non-integer element in the `l` list.\n\n### Reliability\n- Avoid index errors while accessing `l` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The indices divisible by three are [0, 3, 6]\n### The sorted values at these indices are [2, 4, 5]\n### The function should return [2, 6, 3, 4, 8, 9, 5]\nassert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5], 'Failed to sort values at indices divisible by three.'\n\n### There are no indices divisible by three\n### The function should return the input list unchanged\nassert sort_third([1, 2, 3]) == [1, 2, 3], 'Failed to handle case where there are no indices divisible by three.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert sort_third([]) == [], 'Failed to handle an empty input list.'\n\n### All indices in the input list are divisible by three\n### The function should return the input list sorted\nassert sort_third([9, 6, 3, 12, 15]) == [3, 6, 9, 12, 15], 'Failed to handle case where all indices are divisible by three.'\n\n### The input list contains non-integer elements, so the function should return an empty list\nassert sort_third([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains non-integer elements.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements in descending order from 10^6 to 1\n### All indices in the input list are divisible by three\n### The function should return the input list sorted\nassert sort_third(list(range(10**6, 0, -1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements in ascending order from 1 to 10^6\n### None of the indices in the input list are divisible by three\n### The function should return the input list unchanged\nassert sort_third(list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle case where there are no indices divisible by three.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return an empty list\nassert sort_third('invalid') == [], 'Failed to handle case where the input is not a list.'\n\n#### The input list contains a non-integer element, so the function should return an empty list\nassert sort_third([1, 2, 3, 'invalid']) == [], 'Failed to handle case where the input list contains non-integer elements.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sort_third))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/34",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
        "entry_point": "unique",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ncheck(unique)",
        "plan": [
            "# 1. Convert the input list to a set to remove duplicate elements.\n# 2. Convert the set back to a list.\n# 3. Sort the list in ascending order.\n# 4. Return the sorted list of unique elements."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list `l` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a sorted list of unique elements from the input list `l`.\n\n## Edge Cases\n- Handle an empty `l`, returning an empty list.\n- Handle a list with all duplicate elements, returning a list with a single element.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n*log(n)) where n is the length of the input list `l`.\n- Space complexity: O(n) where n is the length of the input list `l`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list contains duplicate elements\n### The function should return the unique elements in sorted order\nassert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123], 'Failed to return sorted unique elements.'\n\n### The input list contains no duplicate elements\n### The function should return the unique elements in sorted order\nassert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'Failed to return sorted unique elements when there are no duplicates.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert unique([]) == [], 'Failed to handle an empty input list.'\n\n### The input list contains all duplicate elements\n### The function should return a list with a single element, the first occurrence of the element\nassert unique([1, 1, 1, 1, 1, 1]) == [1], 'Failed to handle case where all elements in the list are duplicates.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are the same value 1\n### The function should return a list with a single element, 1\nassert unique([1] * 10**6) == [1], 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are unique\n### The function should return the same list in sorted order\nassert unique(list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size with unique elements.'\n\n### The input list contains 10^6 elements, all of which are unique and in reverse order\n### The function should return the same list in sorted order\nassert unique(list(range(10**6, 0, -1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size with unique elements in reverse order.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return an empty list\nassert unique('invalid') == [], 'Failed to handle case where the input is not a list.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(unique))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/35",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "entry_point": "max_element",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\ncheck(max_element)",
        "plan": [
            "# 1. Use the max() function to find the maximum element in the list.\n# 2. Return the result of the max() function."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list `l` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the maximum element in the list `l`.\n\n## Edge Cases\n- Handle an empty list, returning None.\n- Handle a list with duplicate maximum elements, returning any of them.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the list `l`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input or non-integer elements in the list.\n\n### Reliability\n- Avoid index errors while accessing list elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The maximum element in the list is 3\nassert max_element([1, 2, 3]) == 3, 'Failed to find the maximum element.'\n\n### The maximum element in the list is 123\nassert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123, 'Failed to find the maximum element.'\n\n## Edge Cases\n### The list is empty, so the function should return None\nassert max_element([]) == None, 'Failed to handle an empty list.'\n\n### The list contains multiple maximum elements (3 and 4), so the function can return any of them\nassert max_element([1, 3, 2, 4, 3, 4]) in [3, 4], 'Failed to handle case with duplicate maximum elements.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements with increasing values from 1 to 10^6\n### The maximum element in the list is 10^6\nassert max_element(list(range(1, 10**6 + 1))) == 10**6, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements, all of which are 10^6\n### The maximum element in the list is 10^6\nassert max_element([10**6] * 10**6) == 10**6, 'Failed to handle case where all elements have the same value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return None\nassert max_element('invalid') == None, 'Failed to handle case where the input is not a list.'\n\n#### The list contains elements that are not integers, so the function should return None\nassert max_element([1, 2, 'invalid', 4]) == None, 'Failed to handle case where the list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(max_element))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/36",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "entry_point": "fizz_buzz",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\ncheck(fizz_buzz)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the number of times the digit 7 appears.\n# 2. Loop through all the integers from 1 to n-1.\n# 3. Check if the current number is divisible by 11 or 13 and contains the digit 7.\n# 4. If both conditions are true, increment the count variable.\n# 5. Return the final count."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the number of times the digit 7 appears in integers less than `n` that are divisible by either 11 or 13.\n\n## Edge Cases\n- Handle the case where `n` is less than or equal to 10, returning 0.\n- Handle the case where there are no numbers less than `n` that are divisible by either 11 or 13 and contain the digit 7, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the value of `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-integer `n` input.\n\n### Reliability\n- Ensure accurate counting of the digit 7 in the integers less than `n`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### There are no numbers less than 50 that are divisible by 11 or 13 and contain the digit 7\n### Therefore, the function should return 0\nassert fizz_buzz(50) == 0, 'Failed to handle case where there are no numbers that satisfy the condition.'\n\n### The numbers less than 78 that are divisible by 11 or 13 and contain the digit 7 are: 77, 77\n### Therefore, the function should return 2\nassert fizz_buzz(78) == 2, 'Failed to correctly count the number of times the digit 7 appears.'\n\n### The numbers less than 79 that are divisible by 11 or 13 and contain the digit 7 are: 77, 77, 77\n### Therefore, the function should return 3\nassert fizz_buzz(79) == 3, 'Failed to correctly count the number of times the digit 7 appears.'\n\n## Edge Cases\n### The input `n` is less than or equal to 10, so the function should return 0\nassert fizz_buzz(10) == 0, 'Failed to handle case where `n` is less than or equal to 10.'\n\n### There are no numbers less than 11 that are divisible by 11 or 13 and contain the digit 7\n### Therefore, the function should return 0\nassert fizz_buzz(11) == 0, 'Failed to handle case where there are no numbers that satisfy the condition.'\n\n### There are no numbers less than 12 that are divisible by 11 or 13 and contain the digit 7\n### Therefore, the function should return 0\nassert fizz_buzz(12) == 0, 'Failed to handle case where there are no numbers that satisfy the condition.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input `n` is a large number, so the function should return the result within 5 seconds\nimport time\nstart_time = time.time()\nassert fizz_buzz(10**9) == 0, 'Failed to handle large input size.'\nend_time = time.time()\nexecution_time = end_time - start_time\nassert execution_time <= 5, 'Failed to meet performance requirements.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input `n` is not an integer, so the function should return 0\nassert fizz_buzz('invalid') == 0, 'Failed to handle case where the input `n` is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(fizz_buzz))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/37",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "entry_point": "sort_even",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\ncheck(sort_even)",
        "plan": [
            "# 1. Create two lists, one to store the even indices' values and another to store the odd indices' values.\n# 2. Loop through the input list and separate the values based on their indices.\n# 3. Sort the list of even indices' values.\n# 4. Combine the sorted list of even indices' values with the list of odd indices' values.\n# 5. Return the combined list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list `l` as input.\n- It returns a list.\n\n## Expected Behavior\n- The function should return a list `l'` such that `l'` is identical to `l` in the odd indices, while its values at the even indices are equal to the values of the even indices of `l`, but sorted in ascending order.\n\n## Edge Cases\n- Handle an empty input list, returning an empty list.\n- Handle an input list with a single element, returning the same list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n), where n is the length of the input list `l`.\n- Space complexity: O(n), where n is the length of the input list `l`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input.\n- Handle non-integer elements in the input list.\n\n### Reliability\n- Avoid index errors while accessing elements in the input list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The even indices of the input list are [2, 4, 6]\n### After sorting them in ascending order, they become [1, 3, 5]\n### The resulting list should be [1, 2, 3, 4, 5, 6]\nassert sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], 'Failed to sort even indices of the input list.'\n\n### The even indices of the input list are [2, 4]\n### After sorting them in ascending order, they become [3, 6]\n### The resulting list should be [5, 6, 3, 4]\nassert sort_even([5, 6, 3, 4]) == [5, 6, 3, 4], 'Failed to sort even indices of the input list.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert sort_even([]) == [], 'Failed to handle an empty input list.'\n\n### The input list has a single element, so the function should return the same list\nassert sort_even([1]) == [1], 'Failed to handle an input list with a single element.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are 1\n### The even indices of the input list are [0, 2, 4, ..., 999998]\n### After sorting them in ascending order, they become [0, 2, 4, ..., 999998]\n### The resulting list should be [1, 0, 1, 2, 1, 4, ..., 1, 999998]\nassert sort_even([1] * 10**6) == [1, 0, 1, 2, 1, 4, ..., 1, 999998], 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are integers from 1 to 10^6\n### The even indices of the input list are [2, 4, 6, ..., 999998]\n### After sorting them in ascending order, they become [2, 4, 6, ..., 999998]\n### The resulting list should be [1, 2, 1, 4, 1, 6, ..., 1, 999998]\nassert sort_even(list(range(1, 10**6 + 1))) == [1, 2, 1, 4, 1, 6, ..., 1, 999998], 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return an empty list\nassert sort_even('invalid') == [], 'Failed to handle case where the input is not a list.'\n\n#### The input list contains elements that are not integers, so the function should return an empty list\nassert sort_even([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sort_even))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/38",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(s))\n",
        "entry_point": "decode_cyclic",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\ncheck(decode_cyclic)",
        "plan": [
            "# Encode_cyclic function:\n1. Split the input string into groups of three characters.\n2. Create a list comprehension to cycle the elements in each group, except for groups with fewer than three elements.\n3. Join the modified groups together to form the encoded string.\n4. Return the encoded string.\n\n# Decode_cyclic function:\n1. There is currently no implementation for the decode_cyclic function."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The `encode_cyclic` function takes a string `s` as input and returns an encoded string.\n- The `decode_cyclic` function takes an encoded string `s` as input and returns the decoded string.\n\n## Expected Behavior\n### encode_cyclic\n- The function should encode the input string by cycling groups of three characters.\n- The encoded string should be returned.\n\n### decode_cyclic\n- Currently, there is no implementation for the `decode_cyclic` function.\n\n## Edge Cases\n- Handle an empty string as input, returning an empty string.\n- Handle a string with length less than 3, returning the original string for the `encode_cyclic` function.\n\n# Non-functional Requirements\n## Performance\n- Time complexity:\n  - encode_cyclic: O(n), where n is the length of the input string.\n  - decode_cyclic: No implementation yet.\n- Space complexity:\n  - encode_cyclic: O(n), where n is the length of the input string.\n  - decode_cyclic: No implementation yet.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input for both functions.\n- Handle non-ascii characters in the input string.\n- Handle strings with leading/trailing whitespace.\n- Handle strings with only one or two characters in the `encode_cyclic` function.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## encode_cyclic\n### General Cases\n#### The string \"abcdef\" can be split into the groups [\"abc\", \"def\"]\n#### The first group should be encoded as \"bca\", and the second group remains the same\n#### The encoded string should be \"bcadef\"\nassert encode_cyclic(\"abcdef\") == \"bcadef\", 'Failed to encode the string with groups of three characters.'\n\n#### The string \"abcdefgh\" can be split into the groups [\"abc\", \"def\", \"gh\"]\n#### The first group should be encoded as \"bca\", the second group as \"efd\", and the third group remains the same\n#### The encoded string should be \"bcaefdgh\"\nassert encode_cyclic(\"abcdefgh\") == \"bcaefdgh\", 'Failed to encode the string with groups of three characters.'\n\n### Edge Cases\n#### The input string is empty, so the function should return an empty string\nassert encode_cyclic(\"\") == \"\", 'Failed to handle an empty input string.'\n\n#### The input string has length less than 3, so the function should return the original string\nassert encode_cyclic(\"a\") == \"a\", 'Failed to handle a string with length less than 3.'\n\n#### The input string has length less than 3, so the function should return the original string\nassert encode_cyclic(\"ab\") == \"ab\", 'Failed to handle a string with length less than 3.'\n\n## decode_cyclic\n### Not implemented yet, so no test cases available\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has length 10^6, with characters repeated in groups of 3\n### The encoded string should be the same as the input string\nassert encode_cyclic(\"abc\" * 10**6) == \"abc\" * 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty string\nassert encode_cyclic(123) == \"\", 'Failed to handle case where the input is not a string.'\n\n#### The input string contains non-ascii characters, so the function should handle them correctly\nassert encode_cyclic(\"\u3053\u3093\u306b\u3061\u306f\") == \"\u3053\u306b\u3061\u306f\u3093\", 'Failed to handle non-ascii characters in the input string.'\n\n#### The input string has leading/trailing whitespace, so the function should handle them correctly\nassert encode_cyclic(\"  abc \") == \"  bca \", 'Failed to handle leading/trailing whitespace in the input string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(encode_cyclic))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/39",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "entry_point": "prime_fib",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\ncheck(prime_fib)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the number of prime Fibonacci numbers found.\n# 2. Initialize a variable fib to keep track of the current Fibonacci number.\n# 3. Loop while count is less than n.\n# 4. Check if fib is a prime number using a helper function is_prime().\n# 5. If fib is prime, increment count by 1.\n# 6. If count is equal to n, return the current Fibonacci number fib.\n# 7. Otherwise, update fib to the next Fibonacci number.\n# 8. Repeat steps 4-7 until count is equal to n."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the `n`th number that is both a Fibonacci number and a prime number.\n\n## Edge Cases\n- Handle the case where `n` is less than or equal to 0, returning an error or raising an exception.\n- Handle the case where `n` is larger than the maximum possible `n` that can be calculated within a reasonable time frame.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the input `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n` or negative values of `n`.\n\n### Reliability\n- Avoid index errors while accessing Fibonacci numbers.\n- Ensure accurate calculation of prime numbers.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The 1st prime Fibonacci number is 2\nassert prime_fib(1) == 2, 'Failed to find the 1st prime Fibonacci number.'\n\n### The 2nd prime Fibonacci number is 3\nassert prime_fib(2) == 3, 'Failed to find the 2nd prime Fibonacci number.'\n\n### The 3rd prime Fibonacci number is 5\nassert prime_fib(3) == 5, 'Failed to find the 3rd prime Fibonacci number.'\n\n### The 4th prime Fibonacci number is 13\nassert prime_fib(4) == 13, 'Failed to find the 4th prime Fibonacci number.'\n\n### The 5th prime Fibonacci number is 89\nassert prime_fib(5) == 89, 'Failed to find the 5th prime Fibonacci number.'\n\n## Edge Cases\n### The input `n` is less than or equal to 0, so the function should return an error or raise an exception\n### Since the specific behavior is not defined, we cannot assert an expected output\n\n### The input `n` is larger than the maximum possible `n` that can be calculated within a reasonable time frame\n### Since the specific behavior is not defined, we cannot assert an expected output\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input `n` is 10^6, which is a large input size\n### The function should provide the result within 5 seconds\nimport time\nstart_time = time.time()\nprime_fib(10**6)\nend_time = time.time()\nexecution_time = end_time - start_time\nassert execution_time <= 5, 'Failed to provide the result within 5 seconds.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input `n` is not an integer, so the function should return an error or raise an exception\n### Since the specific behavior is not defined, we cannot assert an expected output\n\n#### The input `n` is a negative number, so the function should return an error or raise an exception\n### Since the specific behavior is not defined, we cannot assert an expected output\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(prime_fib))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/40",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "entry_point": "triples_sum_to_zero",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\ncheck(triples_sum_to_zero)",
        "plan": [
            "# 1. Import the combinations() function from the itertools module.\n# 2. Use the combinations() function to generate all possible combinations of three elements from the input list.\n# 3. Loop through each combination and check if the sum of the three elements is equal to zero.\n# 4. If a combination is found where the sum is zero, return True.\n# 5. If no combination is found where the sum is zero, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `l` as input.\n- It returns a boolean value: True if there are three distinct elements in `l` that sum to zero, and False otherwise.\n\n## Expected Behavior\n- The function should return True if there exist three distinct elements in `l` such that their sum is zero.\n- The function should return False if no such triple exists.\n\n## Edge Cases\n- Handle an empty `l`, returning False.\n- Handle a `l` with less than three elements, returning False.\n- Handle multiple triples with the same sum of zero, returning True.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^3) where n is the length of the `l` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input or non-integer elements in the `l` list.\n\n### Reliability\n- Avoid index errors while accessing `l` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### There are no three distinct elements that sum to zero\nassert triples_sum_to_zero([1, 3, 5, 0]) == False, 'Failed to handle case where no triple sums to zero.'\n\n### The triple [1, 3, -2] sums to zero\nassert triples_sum_to_zero([1, 3, -2, 1]) == True, 'Failed to find a triple that sums to zero.'\n\n### There are no three distinct elements that sum to zero\nassert triples_sum_to_zero([1, 2, 3, 7]) == False, 'Failed to handle case where no triple sums to zero.'\n\n### The triple [2, 4, -6] sums to zero\nassert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True, 'Failed to find a triple that sums to zero.'\n\n### There are less than three elements in the list, so no triple can sum to zero\nassert triples_sum_to_zero([1]) == False, 'Failed to handle case where the list has less than three elements.'\n\n## Edge Cases\n### The input list is empty, so no triple can sum to zero\nassert triples_sum_to_zero([]) == False, 'Failed to handle an empty input list.'\n\n### There are no three distinct elements in the list, so no triple can sum to zero\nassert triples_sum_to_zero([0, 0, 0, 0]) == False, 'Failed to handle case where there are no distinct elements in the list.'\n\n### There are multiple triples that sum to zero\nassert triples_sum_to_zero([1, 2, -3, -2, 3]) == True, 'Failed to handle case where there are multiple triples that sum to zero.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^3 elements, all of which are 0\n### There are no three distinct elements that sum to zero, so the function should return False\nassert triples_sum_to_zero([0] * 10**3) == False, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input list is not a list, so the function should return False\nassert triples_sum_to_zero('invalid') == False, 'Failed to handle case where the input is not a list.'\n\n#### The input list contains elements that are not integers, so the function should return False\nassert triples_sum_to_zero([1, 2, 'invalid', 4]) == False, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(triples_sum_to_zero))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/41",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n**2\n",
        "entry_point": "car_race_collision",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ncheck(car_race_collision)",
        "plan": [
            "# 1. Initialize a variable to keep track of the number of collisions.\n# 2. Use a nested loop to compare each pair of cars from the left-to-right set and the right-to-left set.\n# 3. Check if the left-to-right car's position is greater than the right-to-left car's position.\n# 4. If it is, increment the collision count and break out of the inner loop.\n# 5. Return the final collision count."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the number of collisions that occur between the two sets of cars.\n\n## Edge Cases\n- Handle a negative or zero value of `n`, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^2), where n is the number of cars in each set.\n- Space complexity: O(1).\n- Ensure efficiency even for large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### There are 3 cars in each set, so there are 3 possible collisions\nassert car_race_collision(3) == 3, 'Failed to count the correct number of collisions.'\n\n### There are 5 cars in each set, so there are 5 possible collisions\nassert car_race_collision(5) == 5, 'Failed to count the correct number of collisions.'\n\n## Edge Cases\n### There are no cars in each set, so there are no collisions\nassert car_race_collision(0) == 0, 'Failed to handle the case where there are no cars.'\n\n### There is only one car in each set, so there are no collisions\nassert car_race_collision(1) == 0, 'Failed to handle the case where there is only one car.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The number of cars is 10^5, so there are 10^10 possible collisions\nassert car_race_collision(10**5) == 10**10, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return 0\nassert car_race_collision('invalid') == 0, 'Failed to handle case where the input is not an integer.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(car_race_collision))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/42",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [(e + 1) for e in l]\n",
        "entry_point": "incr_list",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ncheck(incr_list)",
        "plan": [
            "# 1. Create an empty list to store the incremented elements.\n# 2. Loop through each element in the input list.\n# 3. Increment each element by 1 and append it to the new list.\n# 4. Return the new list with the incremented elements."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list `l` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a new list with each element of `l` incremented by 1.\n\n## Edge Cases\n- Handle an empty `l` list, returning an empty list.\n- Handle non-integer elements in the `l` list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `l` list.\n- Space complexity: O(n) where n is the length of the `l` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `l` input.\n- Handle non-integer elements in the `l` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Increment each element of the list by 1\nassert incr_list([1, 2, 3]) == [2, 3, 4], 'Failed to increment each element by 1.'\n\n### Increment each element of the list by 1\nassert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124], 'Failed to increment each element by 1.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert incr_list([]) == [], 'Failed to handle an empty input list.'\n\n### The input list contains non-integer elements, so the function should raise a TypeError\ntry:\n    incr_list([1, 2, '3'])\nexcept TypeError:\n    pass\nelse:\n    raise AssertionError('Failed to raise TypeError when the input list contains non-integer elements.')\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements with increasing values from 1 to 10^6\n### Increment each element of the list by 1\nassert incr_list(list(range(1, 10**6 + 1))) == list(range(2, 10**6 + 2)), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should raise a TypeError\ntry:\n    incr_list('invalid')\nexcept TypeError:\n    pass\nelse:\n    raise AssertionError('Failed to raise TypeError when the input is not a list.')\n\n### The input list contains non-integer elements, so the function should raise a TypeError\ntry:\n    incr_list([1, 2, '3'])\nexcept TypeError:\n    pass\nelse:\n    raise AssertionError('Failed to raise TypeError when the input list contains non-integer elements.')\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(incr_list))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/43",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "entry_point": "pairs_sum_to_zero",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\ncheck(pairs_sum_to_zero)",
        "plan": [
            "# 1. Iterate through each element i in the input list.\n# 2. Iterate through each element j in the input list starting from the index after i.\n# 3. Check if the sum of i and j is equal to zero.\n# 4. If the sum is zero, return True.\n# 5. If no pairs sum to zero, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `l` as input.\n- It returns a boolean value indicating whether there are two distinct elements in `l` that sum to zero.\n\n## Expected Behavior\n- The function should return True if there exist two distinct elements in `l` whose sum is zero, and False otherwise.\n\n## Edge Cases\n- Handle an empty `l`, returning False.\n- Handle the case where there is only one element in `l`, returning False.\n- Handle the case where no distinct pair of elements in `l` sum to zero, returning False.\n- Handle multiple distinct pairs of elements in `l` that sum to zero, returning True for any of them.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^2) where n is the length of the `l` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `l` input or non-integer elements in `l`.\n\n### Reliability\n- Avoid index errors while iterating through `l`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### There are no distinct elements in the list that sum to zero\nassert pairs_sum_to_zero([1, 3, 5, 0]) == False, 'Failed to handle case where no distinct elements sum to zero.'\n\n### There are no distinct elements in the list that sum to zero\nassert pairs_sum_to_zero([1, 3, -2, 1]) == False, 'Failed to handle case where no distinct elements sum to zero.'\n\n### There are no distinct elements in the list that sum to zero\nassert pairs_sum_to_zero([1, 2, 3, 7]) == False, 'Failed to handle case where no distinct elements sum to zero.'\n\n### The distinct elements -5 and 5 sum to zero\nassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True, 'Failed to find a pair of distinct elements that sum to zero.'\n\n### There is only one element in the list, so no pair can sum to zero\nassert pairs_sum_to_zero([1]) == False, 'Failed to handle case where there is only one element in the list.'\n\n## Edge Cases\n### The list is empty, so no pair can sum to zero\nassert pairs_sum_to_zero([]) == False, 'Failed to handle an empty list input.'\n\n### The list contains two zeros, so they sum to zero\nassert pairs_sum_to_zero([0, 0]) == True, 'Failed to handle case where the list contains two zeros.'\n\n### The list contains two identical non-zero elements, so no pair can sum to zero\nassert pairs_sum_to_zero([1, 1]) == False, 'Failed to handle case where the list contains two identical non-zero elements.'\n\n### The list contains two distinct elements that sum to zero\nassert pairs_sum_to_zero([-2, 2]) == True, 'Failed to handle case where the list contains two distinct elements that sum to zero.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements with increasing values from 1 to 10^6\n### There is no pair of distinct elements that sum to zero\nassert pairs_sum_to_zero(list(range(1, 10**6 + 1))) == False, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements, all of which are zeros\n### There is at least one pair of distinct elements that sum to zero\nassert pairs_sum_to_zero([0] * 10**6) == True, 'Failed to handle case where all elements in the list are zero.'\n\n### The list contains 10^6 elements, all of which are 1\n### There is no pair of distinct elements that sum to zero\nassert pairs_sum_to_zero([1] * 10**6) == False, 'Failed to handle case where all elements in the list are the same non-zero value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input l is not a list, so the function should return False\nassert pairs_sum_to_zero('invalid') == False, 'Failed to handle case where the input l is not a list.'\n\n#### The input l contains non-integer elements, so the function should return False\nassert pairs_sum_to_zero([1, 'invalid', 2]) == False, 'Failed to handle case where the input list contains non-integer elements.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(pairs_sum_to_zero))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/44",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "entry_point": "change_base",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\ncheck(change_base)",
        "plan": [
            "# 1. Initialize an empty string to store the result.\n# 2. Loop while x is greater than 0:\n#    a. Get the remainder of x divided by the base.\n#    b. Convert the remainder to a string and add it to the result string.\n#    c. Update x by dividing it by the base, discarding any remainder.\n# 3. Reverse the result string to get the correct representation.\n# 4. Return the result string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two integers `x` and `base` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should convert the number `x` to a string representation in the given `base` and return it.\n\n## Edge Cases\n- Handle a non-integer `x` or `base`, returning an empty string.\n- Handle a negative `x`, returning an empty string.\n- Handle a `base` greater than 9, returning an empty string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log(x)) where x is the value of `x`.\n- Space complexity: O(log(x)).\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `x` or `base` input.\n- Handle a negative `x` or a `base` greater than 9.\n\n### Reliability\n- Ensure the function works correctly for a wide range of input values.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The number 8 in base 3 is represented as '22'\nassert change_base(8, 3) == '22', 'Failed to convert number to the desired base.'\n\n### The number 8 in base 2 is represented as '1000'\nassert change_base(8, 2) == '1000', 'Failed to convert number to the desired base.'\n\n### The number 7 in base 2 is represented as '111'\nassert change_base(7, 2) == '111', 'Failed to convert number to the desired base.'\n\n## Edge Cases\n### The input number is 0, so the function should return '0' in any base\nassert change_base(0, 3) == '0', 'Failed to handle case where the input number is 0.'\n\n### The input base is 1, which is not a valid base, so the function should return an empty string\nassert change_base(8, 1) == '', 'Failed to handle case where the base is not a valid base.'\n\n### The input number is negative, so the function should return an empty string\nassert change_base(-8, 2) == '', 'Failed to handle case where the input number is negative.'\n\n### The input base is greater than 9, which is not a valid base, so the function should return an empty string\nassert change_base(8, 10) == '', 'Failed to handle case where the base is not a valid base.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input number is 10^6, and the base is 2\n### The function should return a string representation of the number in base 2 within a reasonable time frame\nassert change_base(10**6, 2) == '11110100001001000000', 'Failed to handle large input size.'\n\n### The input number is 10^6, and the base is 9\n### The function should return a string representation of the number in base 9 within a reasonable time frame\nassert change_base(10**6, 9) == '1277077', 'Failed to handle large input size.'\n\n### The input number is 10^18, and the base is 2\n### The function should return a string representation of the number in base 2 within a reasonable time frame\nassert change_base(10**18, 2) == '1000000000000000000000000000000000000000000000000000000000000000', 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input number is not an integer, so the function should return an empty string\nassert change_base('invalid', 2) == '', 'Failed to handle case where the input number is not an integer.'\n\n#### The input base is not an integer, so the function should return an empty string\nassert change_base(8, 'invalid') == '', 'Failed to handle case where the input base is not an integer.'\n\n#### The input number is negative, so the function should return an empty string\nassert change_base(-8, 2) == '', 'Failed to handle case where the input number is negative.'\n\n#### The input base is greater than 9, so the function should return an empty string\nassert change_base(8, 10) == '', 'Failed to handle case where the input base is greater than 9.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(change_base))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/45",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2.0\n",
        "entry_point": "triangle_area",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\ncheck(triangle_area)",
        "plan": [
            "# 1. Calculate the area of the triangle using the formula: area = (base * height) / 2.\n# 2. Return the calculated area."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two parameters: `a`, the length of a side of the triangle, and `h`, the height of the triangle.\n- The function returns a float representing the area of the triangle.\n\n## Expected Behavior\n- The function should calculate the area of a triangle using the given side length `a` and height `h`.\n\n## Edge Cases\n- Handle a negative side length `a` or negative height `h`, returning 0.\n- Handle non-integer or non-float `a` or `h` values, raising a `TypeError` or returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-numeric input for `a` or `h`, raising a `TypeError` or returning 0.\n- Handle non-integer or non-float input for `a` or `h`, raising a `TypeError` or returning 0.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The side length is 5 and the height is 3, so the area of the triangle is 7.5\nassert triangle_area(5, 3) == 7.5, 'Failed to calculate the area of the triangle.'\n\n### The side length is 2 and the height is 6, so the area of the triangle is 6.0\nassert triangle_area(2, 6) == 6.0, 'Failed to calculate the area of the triangle.'\n\n### The side length is 10 and the height is 1, so the area of the triangle is 5.0\nassert triangle_area(10, 1) == 5.0, 'Failed to calculate the area of the triangle.'\n\n## Edge Cases\n### The side length is negative, so the function should return 0\nassert triangle_area(-5, 3) == 0, 'Failed to handle a negative side length.'\n\n### The height is negative, so the function should return 0\nassert triangle_area(5, -3) == 0, 'Failed to handle a negative height.'\n\n### The side length is not a numeric value, so the function should raise a TypeError\ntry:\n    triangle_area('invalid', 3)\n    assert False, 'Failed to raise a TypeError for a non-numeric side length.'\nexcept TypeError:\n    pass\n\n### The height is not a numeric value, so the function should raise a TypeError\ntry:\n    triangle_area(5, 'invalid')\n    assert False, 'Failed to raise a TypeError for a non-numeric height.'\nexcept TypeError:\n    pass\n\n### The side length is a non-integer value, so the function should return 0\nassert triangle_area(5.5, 3) == 0, 'Failed to handle a non-integer side length.'\n\n### The height is a non-integer value, so the function should return 0\nassert triangle_area(5, 3.3) == 0, 'Failed to handle a non-integer height.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Satisfied if no performance-related issues occur across all test cases\n\n## Specific Quality Requirements\n### Robustness\n#### The side length is a negative number, so the function should return 0\nassert triangle_area(-5, 3) == 0, 'Failed to handle a negative side length.'\n\n#### The height is a negative number, so the function should return 0\nassert triangle_area(5, -3) == 0, 'Failed to handle a negative height.'\n\n#### The side length is not a numeric value, so the function should raise a TypeError\ntry:\n    triangle_area('invalid', 3)\n    assert False, 'Failed to raise a TypeError for a non-numeric side length.'\nexcept TypeError:\n    pass\n\n#### The height is not a numeric value, so the function should raise a TypeError\ntry:\n    triangle_area(5, 'invalid')\n    assert False, 'Failed to raise a TypeError for a non-numeric height.'\nexcept TypeError:\n    pass\n\n#### The side length is a non-float value, so the function should return 0\nassert triangle_area(5.5, 3) == 0, 'Failed to handle a non-float side length.'\n\n#### The height is a non-float value, so the function should return 0\nassert triangle_area(5, 3.3) == 0, 'Failed to handle a non-float height.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(triangle_area))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/46",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "entry_point": "fib4",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ncheck(fib4)",
        "plan": [
            "# 1. Initialize a list fib4_seq with the base cases: [0, 0, 2, 0].\n# 2. If n is less than or equal to 3, return the corresponding element from fib4_seq.\n# 3. Use a loop to calculate the next elements in the fib4 sequence, starting from index 4 up to n.\n# 4. For each index i, calculate fib4_seq[i] = fib4_seq[i-1] + fib4_seq[i-2] + fib4_seq[i-3] + fib4_seq[i-4].\n# 5. After the loop, return fib4_seq[n], which will be the n-th element of the fib4 sequence."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the n-th element of the Fib4 number sequence.\n\n## Constraints\n- The function should not use recursion.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the value of `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n` or negative values of `n`.\n\n### Reliability\n- Avoid index errors while accessing elements of the Fib4 number sequence.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The 5th element of the Fib4 sequence is 4\nassert fib4(5) == 4, 'Failed to compute the n-th element of the Fib4 sequence.'\n\n### The 6th element of the Fib4 sequence is 8\nassert fib4(6) == 8, 'Failed to compute the n-th element of the Fib4 sequence.'\n\n### The 7th element of the Fib4 sequence is 14\nassert fib4(7) == 14, 'Failed to compute the n-th element of the Fib4 sequence.'\n\n## Edge Cases\n### The 0th element of the Fib4 sequence is 0\nassert fib4(0) == 0, 'Failed to compute the 0th element of the Fib4 sequence.'\n\n### The 1st element of the Fib4 sequence is 0\nassert fib4(1) == 0, 'Failed to compute the 1st element of the Fib4 sequence.'\n\n### The 2nd element of the Fib4 sequence is 2\nassert fib4(2) == 2, 'Failed to compute the 2nd element of the Fib4 sequence.'\n\n### The 3rd element of the Fib4 sequence is 0\nassert fib4(3) == 0, 'Failed to compute the 3rd element of the Fib4 sequence.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input n is a large number (n = 10^6)\n### The function should provide the result within 5 seconds\nimport time\nstart_time = time.time()\nfib4(10**6)\nend_time = time.time()\nexecution_time = end_time - start_time\nassert execution_time <= 5, 'Failed to meet the performance requirement of providing the result within 5 seconds.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input n is a negative number, so the function should return an empty list\nassert fib4(-5) == 0, 'Failed to handle case where the input n is a negative number.'\n\n#### The input n is not an integer, so the function should return an empty list\nassert fib4('invalid') == 0, 'Failed to handle case where the input n is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(fib4))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/47",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "entry_point": "median",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\ncheck(median)",
        "plan": [
            "# 1. Sort the input list in ascending order.\n# 2. Check if the length of the sorted list is odd or even.\n# 3. If the length is odd, return the middle element of the sorted list.\n# 4. If the length is even, return the average of the two middle elements of the sorted list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `l` as input.\n- It returns a float representing the median of the elements in the list.\n\n## Expected Behavior\n- The function should return the median of the elements in the input list.\n- If the number of elements in the list is odd, the median is the middle element.\n- If the number of elements in the list is even, the median is the average of the two middle elements.\n\n## Edge Cases\n- Handle an empty `l`, returning `None`.\n- Handle a list with a single element, returning that element as the median.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n), where n is the length of the input list.\n- Space complexity: O(n), where n is the length of the input list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `l` input.\n- Handle non-integer elements in the `l` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The list is [3, 1, 2, 4, 5]\n### The median is 3\nassert median([3, 1, 2, 4, 5]) == 3, 'Failed to calculate the median for an odd-length list.'\n\n### The list is [-10, 4, 6, 1000, 10, 20]\n### The median is (6 + 10) / 2 = 8\nassert median([-10, 4, 6, 1000, 10, 20]) == 8, 'Failed to calculate the median for an even-length list.'\n\n## Edge Cases\n### The list is empty, so the function should return None\nassert median([]) == None, 'Failed to handle an empty list.'\n\n### The list contains a single element, so the function should return that element as the median\nassert median([100]) == 100, 'Failed to handle a list with a single element.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements with increasing values from 1 to 10^6\n### The median is 5 * 10^5\nassert median(list(range(1, 10**6 + 1))) == 5 * 10**5, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements, all of which are 10^6\n### The median is 10^6\nassert median([10**6] * 10**6) == 10**6, 'Failed to handle case where all elements in the list have the same value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The l input is not a list, so the function should return None\nassert median('invalid') == None, 'Failed to handle case where the input l is not a list.'\n\n#### The l list contains elements that are not integers, so the function should return None\nassert median([1, 2, 'invalid', 4]) == None, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(median))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/48",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "entry_point": "is_palindrome",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ncheck(is_palindrome)",
        "plan": [
            "# 1. Reverse the input string using string slicing.\n# 2. Compare the reversed string with the original string.\n# 3. If they are equal, return True. Otherwise, return False.\n# 4. The function will return True if the input string is a palindrome and False otherwise."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `text` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the input string `text` is a palindrome, and False otherwise.\n\n## Edge Cases\n- Handle an empty `text` string, returning True.\n- Handle a single-character `text` string, returning True.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `text` string.\n- Space complexity: O(n) for the reversed string.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n- Handle input with special characters, spaces, and punctuation marks.\n- Handle non-alphanumeric characters in the input string.\n\n### Reliability\n- Avoid index errors while accessing `text` characters.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5.\n- Use meaningful variable names and provide clear comments."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### An empty string is a palindrome, so the function should return True\nassert is_palindrome('') == True, 'Failed to handle an empty string.'\n\n### 'aba' is a palindrome, so the function should return True\nassert is_palindrome('aba') == True, 'Failed to handle a palindrome string.'\n\n### 'aaaaa' is a palindrome, so the function should return True\nassert is_palindrome('aaaaa') == True, 'Failed to handle a palindrome string.'\n\n### 'zbcd' is not a palindrome, so the function should return False\nassert is_palindrome('zbcd') == False, 'Failed to handle a non-palindrome string.'\n\n## Edge Cases\n### An empty string is a palindrome, so the function should return True\nassert is_palindrome('') == True, 'Failed to handle an empty string.'\n\n### A single-character string is a palindrome, so the function should return True\nassert is_palindrome('a') == True, 'Failed to handle a single-character string.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 characters, all of which are 'a'\n### The string is a palindrome, so the function should return True\nassert is_palindrome('a' * 10**6) == True, 'Failed to handle large input size.'\n\n### The input string contains 10^6 characters, all of which are 'a'\n### The string is not a palindrome, so the function should return False\nassert is_palindrome('a' * 10**6 + 'b') == False, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return False\nassert is_palindrome(123) == False, 'Failed to handle case where the input is not a string.'\n\n#### The input string contains special characters and spaces, but it is a palindrome, so the function should return True\nassert is_palindrome('A man, a plan, a canal, Panama!') == True, 'Failed to handle case with special characters and spaces.'\n\n#### The input string contains non-alphanumeric characters, so the function should return False\nassert is_palindrome('123@321') == False, 'Failed to handle case with non-alphanumeric characters.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_palindrome))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/49",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "entry_point": "modp",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ncheck(modp)",
        "plan": [
            "# 1. Use the exponentiation by squaring algorithm to calculate 2^n modulo p.\n# 2. Initialize a variable result to 1.\n# 3. Convert n to binary representation.\n# 4. Iterate through each bit of the binary representation, starting from the most significant bit.\n# 5. For each bit:\n#    a. Square the result modulo p.\n#    b. If the current bit is 1, multiply the result by 2 modulo p.\n# 6. Return the result."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two integers, `n` and `p`, as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the value of 2 raised to the power `n` modulo `p`.\n\n## Edge Cases\n- Handle negative values of `n` and `p`.\n- Handle large values of `n` and `p`.\n- Handle the case where `n` and `p` are both zero, returning 1.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log n), where n is the value of `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n` or `p`.\n- Handle negative values of `n` or `p`.\n\n### Reliability\n- Avoid arithmetic operation errors, such as division by zero or overflow.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### 2^3 modulo 5 is 3\nassert modp(3, 5) == 3, 'Failed to calculate 2^n modulo p correctly.'\n\n### 2^1101 modulo 101 is 2\nassert modp(1101, 101) == 2, 'Failed to calculate 2^n modulo p correctly.'\n\n### 2^0 modulo 101 is 1\nassert modp(0, 101) == 1, 'Failed to calculate 2^n modulo p correctly.'\n\n### 2^3 modulo 11 is 8\nassert modp(3, 11) == 8, 'Failed to calculate 2^n modulo p correctly.'\n\n### 2^100 modulo 101 is 1\nassert modp(100, 101) == 1, 'Failed to calculate 2^n modulo p correctly.'\n\n## Edge Cases\n### 2^-3 modulo 5 is 3\n### The function should handle negative values of n and p\nassert modp(-3, 5) == 3, 'Failed to handle negative values of n and p.'\n\n### 2^1000000 modulo 10^9 is 73741817\n### The function should handle large values of n and p\nassert modp(1000000, 10**9) == 73741817, 'Failed to handle large values of n and p.'\n\n### 2^0 modulo 0 is not defined\n### The function should handle the case where p is zero and return None\nassert modp(0, 0) is None, 'Failed to handle the case where p is zero.'\n\n### 2^0 modulo 1 is 0\n### The function should handle the case where p is one\nassert modp(0, 1) == 0, 'Failed to handle the case where p is one.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The function should provide results within 5 seconds for large inputs\nimport time\nstart_time = time.time()\nmodp(10**6, 10**9)\nend_time = time.time()\nexecution_time = end_time - start_time\nassert execution_time <= 5, 'Failed to meet performance requirements for large inputs.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input n is not an integer, so the function should return None\nassert modp('invalid', 10) is None, 'Failed to handle case where the input n is not an integer.'\n\n#### The input p is not an integer, so the function should return None\nassert modp(3, 'invalid') is None, 'Failed to handle case where the input p is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(modp))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/50",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "entry_point": "decode_shift",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\ncheck(decode_shift)",
        "plan": [
            "# 1. Loop through each character in the input string.\n# 2. Convert each character to its ASCII value using the ord() function.\n# 3. Subtract the ASCII value of \"a\" from the character's ASCII value to get the index relative to \"a\".\n# 4. Add 5 to the index and take the modulus of 26 to handle wrapping around the alphabet.\n# 5. Add the ASCII value of \"a\" to the result to get the encoded ASCII value.\n# 6. Convert the encoded ASCII value back to a character using the chr() function.\n# 7. Join all the encoded characters into a string using the \"\".join() function.\n# 8. Return the encoded string.\n\n# For the decode_shift function:\n# 1. Perform the same steps as the encode_shift function, but subtract 5 from the index instead of adding it.\n# 2. Return the decoded string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and other potential errors.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The `encode_shift` function takes a string `s` as input and returns an encoded string.\n- The `decode_shift` function takes a string `s` encoded with the `encode_shift` function as input and returns the decoded string.\n\n## Expected Behavior\n- The `encode_shift` function should return a string where each character is shifted by 5 positions in the alphabet.\n- The `decode_shift` function should return the decoded string from an encoded string.\n\n## Edge Cases\n- Handle an empty string input for both `encode_shift` and `decode_shift`, returning an empty string.\n- Handle non-string inputs for both `encode_shift` and `decode_shift`, raising a `TypeError`.\n- Handle inputs with non-alphabetic characters for `encode_shift`, leaving them unchanged in the encoded string.\n- Handle inputs with non-alphabetic characters for `decode_shift`, leaving them unchanged in the decoded string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string.\n- Space complexity: O(n) where n is the length of the input string.\n- Ensure efficiency even for extremely large strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string inputs or empty strings for `encode_shift` and `decode_shift`.\n- Handle non-alphabetic characters in the input strings.\n- Ensure the returned strings have the same length as the input strings.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string is \"abcde\", so the encoded string should be \"fghij\"\nassert encode_shift(\"abcde\") == \"fghij\", 'Failed to encode the string correctly.'\n\n### The input string is \"fghij\", so the decoded string should be \"abcde\"\nassert decode_shift(\"fghij\") == \"abcde\", 'Failed to decode the string correctly.'\n\n## Edge Cases\n### The input string is empty, so the encoded string should also be empty\nassert encode_shift(\"\") == \"\", 'Failed to handle an empty input string for encoding.'\n\n### The input string is empty, so the decoded string should also be empty\nassert decode_shift(\"\") == \"\", 'Failed to handle an empty input string for decoding.'\n\n### The input is not a string, so the encode_shift function should raise a TypeError\ntry:\n    encode_shift(123)\n    assert False, 'Failed to raise TypeError for non-string input in encode_shift.'\nexcept TypeError:\n    pass\n\n### The input is not a string, so the decode_shift function should raise a TypeError\ntry:\n    decode_shift(123)\n    assert False, 'Failed to raise TypeError for non-string input in decode_shift.'\nexcept TypeError:\n    pass\n\n### The input string contains non-alphabetic characters, so they should remain unchanged in the encoded string\nassert encode_shift(\"abc123\") == \"fgh123\", 'Failed to handle non-alphabetic characters in the input string for encoding.'\n\n### The input string contains non-alphabetic characters, so they should remain unchanged in the decoded string\nassert decode_shift(\"fgh123\") == \"abc123\", 'Failed to handle non-alphabetic characters in the input string for decoding.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has length 10^6, all characters are \"a\"\n### The encoded string should have length 10^6, all characters are \"f\"\nassert encode_shift(\"a\" * 10**6) == \"f\" * 10**6, 'Failed to handle large input size for encoding.'\n\n### The input string has length 10^6, all characters are \"f\"\n### The decoded string should have length 10^6, all characters are \"a\"\nassert decode_shift(\"f\" * 10**6) == \"a\" * 10**6, 'Failed to handle large input size for decoding.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input string contains non-alphabetic characters and the target characters for shifting are \"a\" to \"z\"\n#### The encoded string should have the non-alphabetic characters remain unchanged\nassert encode_shift(\"abc123!@#\") == \"fgh123!@#\", 'Failed to handle non-alphabetic characters in the input string for encoding.'\n\n#### The input string contains non-alphabetic characters and the target characters for shifting are \"a\" to \"z\"\n#### The decoded string should have the non-alphabetic characters remain unchanged\nassert decode_shift(\"fgh123!@#\") == \"abc123!@#\", 'Failed to handle non-alphabetic characters in the input string for decoding.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(encode_shift))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 for encode_shift.'\nresult = ComplexityVisitor.from_code(inspect.getsource(decode_shift))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 for decode_shift.'"
        ]
    },
    {
        "id": "HumanEval/51",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "entry_point": "remove_vowels",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\ncheck(remove_vowels)",
        "plan": [
            "# 1. Initialize an empty string to store the result.\n# 2. Loop through each character in the input text.\n# 3. Check if the current character is a vowel (a, e, i, o, u or their uppercase versions).\n# 4. If it is not a vowel, append the character to the result string.\n# 5. Return the result string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `text` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should remove all vowels (both lowercase and uppercase) from the input `text` and return the modified string.\n\n## Edge Cases\n- Handle an empty `text` input, returning an empty string.\n- Handle the case where `text` contains only vowels, returning an empty string.\n- Handle the case where `text` contains no vowels, returning the original string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `text` string.\n- Space complexity: O(n) where n is the length of the `text` string.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n\n### Reliability\n- Avoid index errors while accessing `text` characters.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string is empty, so the function should return an empty string\nassert remove_vowels('') == '', 'Failed to handle an empty input string.'\n\n### The input string contains vowels 'a', 'e', and 'i', which should be removed\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm', 'Failed to remove vowels from the input string.'\n\n### The input string contains vowels 'a' and 'e', which should be removed\nassert remove_vowels('abcdef') == 'bcdf', 'Failed to remove vowels from the input string.'\n\n### The input string contains only vowels, so the function should return an empty string\nassert remove_vowels('aaaaa') == '', 'Failed to handle case where the input string contains only vowels.'\n\n### The input string contains vowels 'a' and 'A', which should be removed\nassert remove_vowels('aaBAA') == 'B', 'Failed to remove vowels from the input string while preserving the case.'\n\n### The input string contains no vowels, so the function should return the original string\nassert remove_vowels('zbcd') == 'zbcd', 'Failed to handle case where the input string contains no vowels.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has 10^6 characters, all of which are vowels\n### The function should return an empty string\nassert remove_vowels('a' * 10**6) == '', 'Failed to handle large input size.'\n\n### The input string has 10^6 characters, none of which are vowels\n### The function should return the original string\nassert remove_vowels('b' * 10**6) == 'b' * 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty string\nassert remove_vowels(1234) == '', 'Failed to handle case where the input is not a string.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(remove_vowels))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/52",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "entry_point": "below_threshold",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\ncheck(below_threshold)",
        "plan": [
            "# 1. Use the all() function and a list comprehension to check if all numbers in the list l are below the threshold t.\n# 2. Return True if all numbers are below the threshold, False otherwise."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `l` and a threshold integer `t` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if all numbers in `l` are below the threshold `t`. Otherwise, it should return False.\n\n## Edge Cases\n- Handle an empty `l` list, returning True.\n- Handle the case where all numbers in `l` are equal to the threshold `t`, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `l` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `l` input or a non-integer `t`.\n- Handle non-integer elements in the `l` list or a negative `t`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### All numbers in the list are below the threshold\nassert below_threshold([1, 2, 4, 10], 100) == True, 'Failed to handle case where all numbers are below the threshold.'\n\n### At least one number in the list is equal to or greater than the threshold\nassert below_threshold([1, 20, 4, 10], 5) == False, 'Failed to handle case where at least one number is equal to or greater than the threshold.'\n\n## Edge Cases\n### The input list is empty, so the function should return True\nassert below_threshold([], 10) == True, 'Failed to handle an empty input list.'\n\n### All numbers in the list are equal to the threshold, so the function should return False\nassert below_threshold([10, 10, 10, 10], 10) == False, 'Failed to handle case where all numbers are equal to the threshold.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements, all of which are below the threshold\nassert below_threshold(list(range(10**6)), 10**9) == True, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements, all of which are equal to the threshold\nassert below_threshold([10**9] * 10**6, 10**9) == False, 'Failed to handle case where all numbers are equal to the threshold.'\n\n### The list contains 10^6 elements, all of which are above the threshold\nassert below_threshold(list(range(10**6, 10**6 + 10**6)), 10**6) == False, 'Failed to handle case where all numbers are above the threshold.'\n\n### The list contains 10^6 elements, all of which are negative\n### The threshold is set to 0, so all numbers in the list are below the threshold\nassert below_threshold(list(range(-1, -10**6 - 1, -1)), 0) == True, 'Failed to handle case where all numbers are negative.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input l is not a list, so the function should return False\nassert below_threshold('invalid', 10) == False, 'Failed to handle case where the input l is not a list.'\n\n#### The input t is not an integer, so the function should return False\nassert below_threshold([1, 2, 3], 'invalid') == False, 'Failed to handle case where the input t is not an integer.'\n\n#### The list contains elements that are not integers, so the function should return False\nassert below_threshold([1, 2, 'invalid', 4], 5) == False, 'Failed to handle case where the list contains elements that are not integers.'\n\n#### The threshold is a negative number, so the function should return False\nassert below_threshold([1, 2, 3, 4, 5], -10) == False, 'Failed to handle case where the threshold is a negative number.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(below_threshold))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/53",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "entry_point": "add",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\ncheck(add)",
        "plan": [
            "The function `add` takes in two integer arguments `x` and `y` and returns their sum.\n\nPlan:\n1. Return the sum of `x` and `y` using the `+` operator."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two integer arguments, `x` and `y`.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of `x` and `y`.\n\n## Edge Cases\n- Handle non-integer `x` or `y` arguments.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `x` or `y` input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5.\n- Code should be clear, well-commented, and easy to understand and maintain."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sum of 2 and 3 is 5\nassert add(2, 3) == 5, 'Failed to add two positive numbers.'\n\n### The sum of 5 and 7 is 12\nassert add(5, 7) == 12, 'Failed to add two positive numbers.'\n\n## Edge Cases\n### The sum of 0 and 0 is 0\nassert add(0, 0) == 0, 'Failed to add zero and zero.'\n\n### The sum of -5 and 3 is -2\nassert add(-5, 3) == -2, 'Failed to add a negative and a positive number.'\n\n### The sum of -10 and -7 is -17\nassert add(-10, -7) == -17, 'Failed to add two negative numbers.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The function should execute within a reasonable time frame for any input size\n### No specific test case is required to verify this requirement\n\n## Specific Quality Requirements\n### Robustness\n#### The x input is not an integer, so the function should raise a TypeError\ntry:\n    add('invalid', 5)\n    assert False, 'Failed to handle case where the input x is not an integer.'\nexcept TypeError:\n    pass\n\n#### The y input is not an integer, so the function should raise a TypeError\ntry:\n    add(5, 'invalid')\n    assert False, 'Failed to handle case where the input y is not an integer.'\nexcept TypeError:\n    pass\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(add))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/54",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n",
        "entry_point": "same_chars",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\ncheck(same_chars)",
        "plan": [
            "# 1. Convert both input strings into sets to get unique characters.\n# 2. Check if the sets of unique characters from both strings are equal.\n# 3. Return True if the sets are equal, indicating that both strings have the same characters.\n# 4. Return False if the sets are not equal, indicating that the strings have different characters."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two strings `s0` and `s1` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if both strings have the same characters, regardless of the order.\n- The function should return False if the strings have different characters.\n\n## Edge Cases\n- Handle empty strings as input, returning False.\n- Handle non-string inputs, returning False.\n- Handle strings with duplicate characters.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n + m) where n is the length of `s0` and m is the length of `s1`.\n- Space complexity: O(n + m) where n is the number of unique characters in `s0` and m is the number of unique characters in `s1`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string inputs.\n- Handle empty strings as input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The strings have the same characters, regardless of the order\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True, 'Failed to check if two strings have the same characters.'\n\n### The strings have the same characters, regardless of the order\nassert same_chars('abcd', 'dddddddabc') == True, 'Failed to check if two strings have the same characters.'\n\n### The strings have the same characters, regardless of the order\nassert same_chars('dddddddabc', 'abcd') == True, 'Failed to check if two strings have the same characters.'\n\n### The strings have different characters\nassert same_chars('eabcd', 'dddddddabc') == False, 'Failed to check if two strings have different characters.'\n\n### The strings have different characters\nassert same_chars('abcd', 'dddddddabce') == False, 'Failed to check if two strings have different characters.'\n\n### The strings have different characters\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False, 'Failed to check if two strings have different characters.'\n\n## Edge Cases\n### The input strings are empty, so the function should return False\nassert same_chars('', '') == False, 'Failed to handle empty strings as input.'\n\n### The input is not a string, so the function should return False\nassert same_chars(123, 'abcd') == False, 'Failed to handle non-string inputs.'\n\n### The input is not a string, so the function should return False\nassert same_chars('abcd', 123) == False, 'Failed to handle non-string inputs.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The strings contain 10^6 characters, which are all the same\n### The function should return True, as the strings have the same characters\nassert same_chars('a' * 10**6, 'a' * 10**6) == True, 'Failed to handle large input size.'\n\n### The strings contain 10^6 characters, all of which are unique\n### The function should return False, as the strings have different characters\nassert same_chars('a' * 10**6, 'b' * 10**6) == False, 'Failed to handle large input size.'\n\n### The strings contain 10^6 characters, with different characters at the end\n### The function should return False, as the strings have different characters\nassert same_chars('a' * 10**6, 'a' * (10**6 - 1) + 'b') == False, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return False\nassert same_chars('abcd', 123) == False, 'Failed to handle case where the input is not a string.'\n\n#### The input strings are empty, so the function should return False\nassert same_chars('', '') == False, 'Failed to handle case where the input strings are empty.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(same_chars))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/55",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "entry_point": "fib",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\ncheck(fib)",
        "plan": [
            "# 1. Initialize variables a and b with values 0 and 1 respectively.\n# 2. Iterate from 1 to n:\n#    a. Calculate the sum of a and b, and store it in a temporary variable.\n#    b. Update the value of a to be the current value of b.\n#    c. Update the value of b to be the temporary variable.\n# 3. Return the value of a, which represents the n-th Fibonacci number."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the n-th Fibonacci number.\n\n## Edge Cases\n- Handle negative values of `n`, returning None.\n- Handle non-integer input, returning None.\n- Handle large values of `n` (e.g., n > 50) within a reasonable time frame.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n), where n is the input value.\n- Space complexity: O(1).\n- Ensure efficiency even for large values of `n`, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n`.\n- Handle negative values of `n`.\n\n### Reliability\n- Avoid index errors while accessing elements of the Fibonacci sequence.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The 10th Fibonacci number is 55\nassert fib(10) == 55, 'Failed to calculate the correct Fibonacci number.'\n\n### The 1st Fibonacci number is 1\nassert fib(1) == 1, 'Failed to calculate the correct Fibonacci number.'\n\n### The 8th Fibonacci number is 21\nassert fib(8) == 21, 'Failed to calculate the correct Fibonacci number.'\n\n## Edge Cases\n### The input is a negative number, so the function should return None\nassert fib(-5) is None, 'Failed to handle a negative input value.'\n\n### The input is not an integer, so the function should return None\nassert fib(3.14) is None, 'Failed to handle a non-integer input value.'\n\n### The input is a large value (n > 50), so the function should provide the result within 5 seconds\n### The 50th Fibonacci number is 12_586_269_025\nassert fib(50) == 12_586_269_025, 'Failed to handle a large input value.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input value is 1,000, so the function should provide the result within 5 seconds\n### The 1,000th Fibonacci number is 70330367711422815821835254877183549770181269836358732742604905087154537118196933579742249494562611733487750449241765991088186363265450223647106012053374121273867339111198139373125598767690091902245245323403501\nassert fib(1_000) == 70330367711422815821835254877183549770181269836358732742604905087154537118196933579742249494562611733487750449241765991088186363265450223647106012053374121273867339111198139373125598767690091902245245323403501, 'Failed to handle large input size.'\n\n### The input value is 10,000, so the function should provide the result within 5 seconds\n### The 10,000th Fibonacci number is too large to include in the test case\nassert fib(10_000) is not None, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input value is not an integer, so the function should return None\nassert fib('invalid') is None, 'Failed to handle a non-integer input value.'\n\n#### The input value is a negative number, so the function should return None\nassert fib(-10) is None, 'Failed to handle a negative input value.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(fib))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/56",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "entry_point": "correct_bracketing",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\ncheck(correct_bracketing)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the number of opening brackets encountered.\n# 2. Loop through each character in the brackets string.\n# 3. If the character is '<', increment the count variable.\n# 4. If the character is '>', decrement the count variable.\n# 5. If the count variable becomes negative at any point, return False.\n# 6. After the loop, check if the count variable is equal to 0.\n# 7. If it is, return True. Otherwise, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `brackets` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return `True` if every opening bracket in `brackets` has a corresponding closing bracket, and `False` otherwise.\n\n## Edge Cases\n- Handle an empty string `brackets`, returning `True`.\n- Handle the case where there are no opening brackets, returning `True`.\n- Handle the case where there are no closing brackets, returning `False`.\n- Handle the case where there are unbalanced brackets, returning `False`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n), where n is the length of the `brackets` string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The opening bracket is not closed, so the function should return False\nassert correct_bracketing(\"<\") == False, 'Failed to handle case with a single opening bracket.'\n\n### The opening and closing brackets are balanced, so the function should return True\nassert correct_bracketing(\"<>\") == True, 'Failed to handle case with a single opening and closing bracket.'\n\n### All opening and closing brackets are balanced, so the function should return True\nassert correct_bracketing(\"<<><>>\") == True, 'Failed to handle case with multiple opening and closing brackets.'\n\n### The opening bracket is not closed, so the function should return False\nassert correct_bracketing(\"><<>\") == False, 'Failed to handle case with unbalanced brackets.'\n\n## Edge Cases\n### The input string is empty, so the function should return True\nassert correct_bracketing(\"\") == True, 'Failed to handle an empty input string.'\n\n### There are no opening brackets, so the function should return True\nassert correct_bracketing(\">>\") == True, 'Failed to handle case with no opening brackets.'\n\n### There are no closing brackets, so the function should return False\nassert correct_bracketing(\"<<\") == False, 'Failed to handle case with no closing brackets.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 opening brackets followed by 10^6 closing brackets\n### All brackets are balanced, so the function should return True\nassert correct_bracketing(\"<\" * 10**6 + \">\" * 10**6) == True, 'Failed to handle large input size.'\n\n### The input string contains 10^6 opening brackets followed by 10^6 closing brackets\n### The opening brackets are not closed, so the function should return False\nassert correct_bracketing(\"<\" * 10**6) == False, 'Failed to handle case with unbalanced brackets.'\n\n### The input string contains 10^6 closing brackets followed by 10^6 opening brackets\n### The closing brackets have no corresponding opening brackets, so the function should return False\nassert correct_bracketing(\">\" * 10**6) == False, 'Failed to handle case with unbalanced brackets.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input brackets is not a string, so the function should return False\nassert correct_bracketing(123) == False, 'Failed to handle case where the input brackets is not a string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(correct_bracketing))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/57",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "entry_point": "monotonic",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ncheck(monotonic)",
        "plan": [
            "The provided plan is already comprehensive and clear. It consists of checking if the list elements are monotonically increasing or decreasing. The plan involves using the `all()` function and a list comprehension to check if each element is less than or equal to the next element (for monotonic increasing) or greater than or equal to the next element (for monotonic decreasing). If either condition is true for all elements in the list except the last one, then the list is monotonic."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list `l` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return `True` if the elements in the list `l` are monotonically increasing or decreasing.\n- Otherwise, it should return `False`.\n\n## Edge Cases\n- Handle an empty list, returning `True`.\n- Handle a list with a single element, returning `True`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the list `l`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input.\n- Handle non-integer or non-float elements in the list.\n\n### Reliability\n- Avoid index errors while accessing list elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The elements in the list are monotonically increasing, so the function should return True\nassert monotonic([1, 2, 4, 20]) == True, 'Failed to recognize monotonically increasing list.'\n\n### The elements in the list are not monotonically increasing or decreasing, so the function should return False\nassert monotonic([1, 20, 4, 10]) == False, 'Failed to recognize non-monotonic list.'\n\n### The elements in the list are monotonically decreasing, so the function should return True\nassert monotonic([4, 1, 0, -10]) == True, 'Failed to recognize monotonically decreasing list.'\n\n## Edge Cases\n### The list is empty, so the function should return True\nassert monotonic([]) == True, 'Failed to handle an empty list.'\n\n### The list has a single element, so the function should return True\nassert monotonic([10]) == True, 'Failed to handle a list with a single element.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements with increasing values from 1 to 10^6\n### The elements are monotonically increasing, so the function should return True\nassert monotonic(list(range(1, 10**6 + 1))) == True, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements with decreasing values from 10^6 to 1\n### The elements are monotonically decreasing, so the function should return True\nassert monotonic(list(range(10**6, 0, -1))) == True, 'Failed to handle large input size with monotonically decreasing elements.'\n\n### The list contains 10^6 elements with alternating values of 1 and 2\n### The elements are not monotonically increasing or decreasing, so the function should return False\nassert monotonic([1, 2] * (10**6 // 2)) == False, 'Failed to handle large input size with non-monotonic elements.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return False\nassert monotonic('invalid') == False, 'Failed to handle case where the input is not a list.'\n\n#### The input list contains elements that are not integers or floats, so the function should return False\nassert monotonic([1, 2, 'invalid', 4]) == False, 'Failed to handle case where the input list contains elements that are not integers or floats.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(monotonic))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/58",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "entry_point": "common",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ncheck(common)",
        "plan": [
            "# 1. Use the set() function to convert both input lists to sets, which will remove any duplicates.\n# 2. Use the intersection operator \"&\" to find the common elements between the two sets.\n# 3. Convert the resulting set back to a list and sort it in ascending order.\n# 4. Return the sorted list of common elements."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two lists `l1` and `l2` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a sorted list of unique common elements between `l1` and `l2`.\n\n## Edge Cases\n- Handle empty input lists, returning an empty list.\n- Handle cases where there are no common elements between `l1` and `l2`, returning an empty list.\n- Handle cases with multiple common elements, returning all of them in sorted order.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n+m), where n and m are the lengths of `l1` and `l2` respectively.\n- Space complexity: O(min(n, m)) for the set of common elements.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input for `l1` and `l2`.\n- Handle non-integer elements in the input lists.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The common elements between the two lists are [1, 5, 653]\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653], 'Failed to find the common elements.'\n\n### The common elements between the two lists are [2, 3]\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3], 'Failed to find the common elements.'\n\n## Edge Cases\n### Both input lists are empty, so the function should return an empty list\nassert common([], []) == [], 'Failed to handle empty input lists.'\n\n### There are no common elements between the two lists, so the function should return an empty list\nassert common([1, 2, 3], [4, 5, 6]) == [], 'Failed to handle case where there are no common elements.'\n\n### The common elements between the two lists are [1]\nassert common([1, 1, 1], [1, 1, 1]) == [1], 'Failed to handle case with multiple common elements.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input lists contain 10^6 elements each, with all elements being unique\n### The common elements between the two lists are [1, 2, 3, ..., 10^6]\nassert common(list(range(1, 10**6 + 1)), list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The input lists contain 10^6 elements each, with no common elements\n### The function should return an empty list\nassert common(list(range(1, 10**6 + 1)), list(range(10**6 + 1, 2*10**6 + 1))) == [], 'Failed to handle case where there are no common elements.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input lists contain non-integer elements, so the function should return an empty list\nassert common([1, 2, 'invalid', 4], [3, 2, 'invalid']) == [], 'Failed to handle case where the input lists contain non-integer elements.'\n\n#### The input l1 is not a list, so the function should return an empty list\nassert common('invalid', [1, 2, 3]) == [], 'Failed to handle case where the input l1 is not a list.'\n\n#### The input l2 is not a list, so the function should return an empty list\nassert common([1, 2, 3], 'invalid') == [], 'Failed to handle case where the input l2 is not a list.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(common))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/59",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "entry_point": "largest_prime_factor",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\ncheck(largest_prime_factor)",
        "plan": [
            "# 1. Initialize a variable `factor` to 2.\n# 2. While `factor` is less than or equal to the square root of `n`, do the following steps:\n#    a. Check if `n` is divisible evenly by `factor`.\n#    b. If it is, divide `n` by `factor` and update `n` with the new value.\n#    c. Otherwise, increment `factor` by 1.\n# 3. After the loop, the largest prime factor of `n` will be `n` itself.\n# 4. Return `n` as the largest prime factor."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the largest prime factor of `n`.\n\n## Edge Cases\n- Handle `n` less than or equal to 1, raising a ValueError.\n- Handle `n` as a prime number, raising a ValueError.\n- Handle large inputs, providing results within a reasonable time.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(sqrt(n)), where n is the input integer.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input or negative `n`.\n\n### Reliability\n- Avoid arithmetic errors and ensure correct handling of factors.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The largest prime factor of 13195 is 29\nassert largest_prime_factor(13195) == 29, 'Failed to find the largest prime factor.'\n\n### The largest prime factor of 2048 is 2\nassert largest_prime_factor(2048) == 2, 'Failed to find the largest prime factor.'\n\n## Edge Cases\n### The input is less than or equal to 1, so the function should raise a ValueError\ntry:\n    largest_prime_factor(1)\n    assert False, 'Failed to raise ValueError for n <= 1'\nexcept ValueError:\n    pass\n\n### The input is a prime number, so the function should raise a ValueError\ntry:\n    largest_prime_factor(17)\n    assert False, 'Failed to raise ValueError for prime n'\nexcept ValueError:\n    pass\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input is a large number, 10^8, which is not a prime\n### The largest prime factor of 10^8 is 5, so the function should return 5\nassert largest_prime_factor(10**8) == 5, 'Failed to handle large input size.'\n\n### The input is a large prime number, 10^9 + 7\n### The function should raise a ValueError since the input is a prime number\ntry:\n    largest_prime_factor(10**9 + 7)\n    assert False, 'Failed to raise ValueError for prime n'\nexcept ValueError:\n    pass\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should raise a TypeError\ntry:\n    largest_prime_factor('invalid')\n    assert False, 'Failed to raise TypeError for invalid input'\nexcept TypeError:\n    pass\n\n#### The input is a negative number, so the function should raise a ValueError\ntry:\n    largest_prime_factor(-10)\n    assert False, 'Failed to raise ValueError for negative n'\nexcept ValueError:\n    pass\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(largest_prime_factor))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/60",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(n + 1))\n",
        "entry_point": "sum_to_n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\ncheck(sum_to_n)",
        "plan": [
            "# 1. Initialize a variable `total` to 0.\n# 2. Loop from 1 to n (inclusive).\n# 3. Add each number to the `total`.\n# 4. Return the `total`."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of numbers from 1 to `n`.\n\n## Edge Cases\n- Handle negative `n`, returning 0.\n- Handle 0 as `n`, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `n` input.\n\n### Reliability\n- Avoid arithmetic operation errors, such as overflow.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sum of numbers from 1 to 30 is 465\nassert sum_to_n(30) == 465, 'Failed to calculate the sum of numbers from 1 to n.'\n\n### The sum of numbers from 1 to 100 is 5050\nassert sum_to_n(100) == 5050, 'Failed to calculate the sum of numbers from 1 to n.'\n\n### The sum of numbers from 1 to 5 is 15\nassert sum_to_n(5) == 15, 'Failed to calculate the sum of numbers from 1 to n.'\n\n### The sum of numbers from 1 to 10 is 55\nassert sum_to_n(10) == 55, 'Failed to calculate the sum of numbers from 1 to n.'\n\n### The sum of numbers from 1 to 1 is 1\nassert sum_to_n(1) == 1, 'Failed to calculate the sum of numbers from 1 to n.'\n\n## Edge Cases\n### n is negative, so the function should return 0\nassert sum_to_n(-5) == 0, 'Failed to handle negative n.'\n\n### n is 0, so the function should return 0\nassert sum_to_n(0) == 0, 'Failed to handle n being 0.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The function should provide results within 5 seconds even for extremely large inputs\n### The sum of numbers from 1 to 10^6 is 500000500000\nassert sum_to_n(10**6) == 500000500000, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The n input is not an integer, so the function should return 0\nassert sum_to_n('invalid') == 0, 'Failed to handle case where the input n is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sum_to_n))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/61",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "entry_point": "correct_bracketing",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\ncheck(correct_bracketing)",
        "plan": [
            "# 1. Initialize a variable `count` to keep track of the balance of opening and closing brackets.\n# 2. Loop through each character in the `brackets` string.\n# 3. If the character is an opening bracket '(', increment the `count` variable by 1.\n# 4. If the character is a closing bracket ')', decrement the `count` variable by 1.\n# 5. If at any point the `count` variable becomes negative, return False (indicating incorrect bracketing).\n# 6. After the loop, if the `count` variable is not equal to 0, return False (indicating incorrect bracketing).\n# 7. If the `count` variable is equal to 0, return True (indicating correct bracketing)."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `brackets` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return `True` if every opening bracket in the `brackets` string has a corresponding closing bracket, and `False` otherwise.\n\n## Edge Cases\n- Handle an empty `brackets` string, returning `True`.\n- Handle a `brackets` string with no opening or closing brackets, returning `True`.\n- Handle a `brackets` string with unmatched opening or closing brackets, returning `False`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `brackets` string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n- Handle non-bracket characters in the `brackets` string.\n\n### Reliability\n- Avoid index errors while accessing `brackets` characters.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The bracketing is correct, so the function should return True\nassert correct_bracketing(\"()\") == True, 'Failed to handle correct bracketing.'\n\n### The bracketing is correct, so the function should return True\nassert correct_bracketing(\"(()())\") == True, 'Failed to handle correct bracketing.'\n\n### The bracketing is not correct, so the function should return False\nassert correct_bracketing(\")(\") == False, 'Failed to handle incorrect bracketing.'\n\n## Edge Cases\n### The bracketing is not correct, so the function should return False\nassert correct_bracketing(\"(\") == False, 'Failed to handle case with only an opening bracket.'\n\n### The bracketing is correct, so the function should return True\nassert correct_bracketing(\"\") == True, 'Failed to handle empty bracketing.'\n\n### The bracketing is not correct, so the function should return False\nassert correct_bracketing(\"())(\") == False, 'Failed to handle case with unmatched opening and closing brackets.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The `brackets` string contains 10^6 opening brackets followed by 10^6 closing brackets\n### The bracketing is correct, so the function should return True\nassert correct_bracketing(\"(\" * 10**6 + \")\" * 10**6) == True, 'Failed to handle large input size.'\n\n### The `brackets` string contains 10^6 opening brackets followed by 10^6 closing brackets in reverse order\n### The bracketing is not correct, so the function should return False\nassert correct_bracketing(\")\" * 10**6 + \"(\" * 10**6) == False, 'Failed to handle large input size with incorrect bracketing.'\n\n## Specific Quality Requirements\n### Robustness\n#### The `brackets` input is not a string, so the function should return False\nassert correct_bracketing(['(', ')']) == False, 'Failed to handle case where the input brackets is not a string.'\n\n#### The `brackets` string contains characters other than '(' and ')', so the function should return False\nassert correct_bracketing(\"(a)b(c)\") == False, 'Failed to handle case where the input string contains non-bracket characters.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(correct_bracketing))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/62",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "entry_point": "derivative",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\ncheck(derivative)",
        "plan": [
            "# 1. Create an empty list to store the derivative coefficients.\n# 2. Loop through the input list of coefficients.\n# 3. For each coefficient at index i, multiply it by i to get the derivative coefficient.\n# 4. Append the derivative coefficient to the empty list.\n# 5. Remove the first coefficient from the list (since it represents the constant term and its derivative is zero).\n# 6. Return the list of derivative coefficients."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `xs` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return the derivative of the polynomial represented by the input list of coefficients `xs`.\n- The derivative of a polynomial can be computed by taking the derivative of each term and decreasing the exponent by 1.\n- The input `xs` list represents the coefficients of the polynomial in increasing order of exponents.\n\n## Edge Cases\n- Handle an empty `xs` list, returning an empty list.\n- Handle a single-element `xs` list, returning a list with a single element equal to 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `xs` list.\n- Space complexity: O(n) where n is the length of the `xs` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `xs` input or non-integer elements in the `xs` list.\n\n### Reliability\n- Avoid index errors while accessing `xs` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The derivative of the polynomial 3 + x + 2x^2 + 4x^3 + 5x^4 is 1 + 4x + 12x^2 + 20x^3\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], 'Failed to compute the derivative of the polynomial.'\n\n### The derivative of the polynomial 1 + 2x + 3x^2 is 2 + 6x\nassert derivative([1, 2, 3]) == [2, 6], 'Failed to compute the derivative of the polynomial.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert derivative([]) == [], 'Failed to handle an empty input list.'\n\n### The input list has a single element, so the derivative is 0\nassert derivative([5]) == [0], 'Failed to handle case where the input list has a single element.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list has 10^6 elements, all of which are 1\n### The derivative of the polynomial is a list of 10^6 - 1 elements, all of which are 1\nassert derivative([1] * 10**6) == [1] * (10**6 - 1), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The xs input is not a list, so the function should return an empty list\nassert derivative('invalid') == [], 'Failed to handle case where the input xs is not a list.'\n\n#### The xs list contains elements that are not integers, so the function should return an empty list\nassert derivative([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(derivative))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/63",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "entry_point": "fibfib",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\ncheck(fibfib)",
        "plan": [
            "# 1. Define the base cases for the fibfib sequence: fibfib(0) = 0, fibfib(1) = 0, and fibfib(2) = 1.\n# 2. Create a list to store the computed fibfib numbers.\n# 3. Loop from 3 to n (inclusive) and calculate each fibfib number using the formula fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# 4. Append each computed fibfib number to the list.\n# 5. Return the last element in the list, which is the n-th fibfib number."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the n-th element of the fibfib number sequence.\n\n## Edge Cases\n- Handle non-integer input, returning None.\n- Handle negative input, returning None.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the input integer.\n- Space complexity: O(n) to store the fibfib sequence.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input.\n- Handle negative input.\n\n### Reliability\n- Avoid index errors while accessing elements in the fibfib sequence.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The 1st element in the FibFib sequence is 0\nassert fibfib(1) == 0, 'Failed to compute the 1st element of the FibFib sequence.'\n\n### The 5th element in the FibFib sequence is 4\nassert fibfib(5) == 4, 'Failed to compute the 5th element of the FibFib sequence.'\n\n### The 8th element in the FibFib sequence is 24\nassert fibfib(8) == 24, 'Failed to compute the 8th element of the FibFib sequence.'\n\n## Edge Cases\n### The 0th element in the FibFib sequence is 0\nassert fibfib(0) == 0, 'Failed to compute the 0th element of the FibFib sequence.'\n\n### The -5th element in the FibFib sequence is not defined, so the function should return None\nassert fibfib(-5) is None, 'Failed to handle negative input.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input is large, so the function should return the result within 5 seconds\nassert fibfib(10000) == 487067745, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return None\nassert fibfib('invalid') is None, 'Failed to handle non-integer input.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(fibfib))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/64",
        "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "entry_point": "vowels_count",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(vowels_count)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the number of vowels.\n# 2. Convert the input string to lowercase using the lower() function.\n# 3. Loop through each character in the lowercase string.\n# 4. Check if the character is 'a', 'e', 'i', 'o', 'u' or 'y'.\n# 5. If the character is 'y', check if it is the last character in the string.\n# 6. If it is, increment the count.\n# 7. If the character is not 'y', increment the count.\n# 8. Return the final count of vowels."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` as input.\n- It returns an integer, representing the number of vowels in the string.\n\n## Expected Behavior\n- The function should count the number of vowels in the given string.\n- Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n- The letter 'y' is also considered a vowel, but only when it is at the end of the given word.\n\n## Edge Cases\n- Handle an empty string as input, returning 0.\n- Handle the case where no vowels are present in the string, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the string `s`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input to the function.\n- Handle uppercase characters in the string.\n- Handle non-alphabet characters in the string.\n\n### Reliability\n- Ensure error-free execution by handling any potential exceptions.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string \"abcde\" contains 2 vowels: 'a' and 'e'\nassert vowels_count(\"abcde\") == 2, 'Failed to count the vowels in the string.'\n\n### The input string \"ACEDY\" contains 3 vowels: 'A', 'E', and 'Y'\nassert vowels_count(\"ACEDY\") == 3, 'Failed to count the vowels in the string.'\n\n## Edge Cases\n### The input string is empty, so the function should return 0\nassert vowels_count(\"\") == 0, 'Failed to handle an empty string.'\n\n### The input string \"xyz\" does not contain any vowels, so the function should return 0\nassert vowels_count(\"xyz\") == 0, 'Failed to handle case where no vowels are present.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 characters, all of which are vowels\n### The function should correctly count all the vowels and return 10^6\nassert vowels_count(\"a\" * 10**6) == 10**6, 'Failed to handle large input size.'\n\n### The input string contains 10^6 characters, none of which are vowels\n### The function should correctly count and return 0\nassert vowels_count(\"z\" * 10**6) == 0, 'Failed to handle case where no vowels are present in a large input.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input to the function is not a string, so the function should return 0\nassert vowels_count(123) == 0, 'Failed to handle case where the input is not a string.'\n\n#### The input string contains uppercase characters, so the function should correctly count the vowels regardless of case\nassert vowels_count(\"ABCDE\") == 3, 'Failed to handle case where the input string contains uppercase characters.'\n\n#### The input string contains non-alphabet characters, so the function should only count the vowels among the alphabetic characters\nassert vowels_count(\"a1e2i3o4u5\") == 5, 'Failed to handle case where the input string contains non-alphabet characters.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(vowels_count))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/65",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "entry_point": "circular_shift",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(circular_shift)",
        "plan": [
            "# 1. Convert the integer x into a string to access its digits.\n# 2. Determine the number of digits in x using the len() function.\n# 3. If shift is greater than the number of digits, reverse the string.\n# 4. Otherwise, extract the last shift digits from the string and move them to the front.\n# 5. Return the resulting string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `x` and an integer `shift` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should circularly shift the digits of `x` to the right by `shift` positions.\n- If `shift` is greater than the number of digits in `x`, it should return the digits reversed.\n- The function should return the result as a string.\n\n## Edge Cases\n- Handle a negative `x` input, returning the result as a negative string.\n- Handle a non-integer `x` input or a non-integer `shift` input.\n- Handle the case where `x` is 0, returning \"0\".\n- Handle the case where `shift` is 0, returning `x` as a string.\n- Handle the case where `shift` is equal to or greater than the number of digits in `x`, returning the digits reversed.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the number of digits in `x`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer digits in `x`.\n- Handle a zero `shift` input.\n- Handle a negative `shift` input.\n- Handle non-integer `shift` input.\n- Handle a non-integer `x` input."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The digits of 12 are [1, 2].\n### Shifting the digits right by 1 results in [2, 1].\n### The function should return \"21\".\nassert circular_shift(12, 1) == \"21\", 'Failed to circularly shift the digits right by 1.'\n\n### The digits of 12 are [1, 2].\n### Shifting the digits right by 2 results in [1, 2].\n### The function should return \"12\".\nassert circular_shift(12, 2) == \"12\", 'Failed to handle case where shift is equal to the number of digits.'\n\n## Edge Cases\n### The digits of 0 are [0].\n### Shifting the digits right by 1 results in [0].\n### The function should return \"0\".\nassert circular_shift(0, 1) == \"0\", 'Failed to handle case where x is 0.'\n\n### The digits of 1234 are [1, 2, 3, 4].\n### Shifting the digits right by 10 results in [4, 3, 2, 1].\n### The function should return \"4321\".\nassert circular_shift(1234, 10) == \"4321\", 'Failed to handle case where shift is greater than the number of digits.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input number x is 10^6 and the shift is 10^5.\n### The digits of x are [1, 0, 0, 0, 0, 0].\n### Shifting the digits right by 10^5 results in [1, 0, 0, 0, 0, 0].\n### The function should return \"100000\".\nassert circular_shift(10**6, 10**5) == \"100000\", 'Failed to handle large input size.'\n\n### The input number x is 10^6 and the shift is 10^7.\n### The digits of x are [1, 0, 0, 0, 0, 0].\n### Shifting the digits right by 10^7 results in [0, 0, 0, 0, 0, 1].\n### The function should return \"000001\".\nassert circular_shift(10**6, 10**7) == \"000001\", 'Failed to handle case where shift is greater than the number of digits.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input x is not an integer, so the function should return an empty string\nassert circular_shift('invalid', 2) == '', 'Failed to handle case where the input x is not an integer.'\n\n#### The input shift is not an integer, so the function should return an empty string\nassert circular_shift(12, 'invalid') == '', 'Failed to handle case where the input shift is not an integer.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(circular_shift))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/66",
        "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "entry_point": "digitSum",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\ncheck(digitSum)",
        "plan": [
            "# 1. Initialize a variable sum_digits to 0.\n# 2. Loop through each character c in the input string s.\n# 3. Check if c is an uppercase character using the isupper() function.\n# 4. If c is an uppercase character, add its ASCII code to sum_digits using the ord() function.\n# 5. Return the value of sum_digits."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of the ASCII codes of the uppercase characters in the input string `s`.\n\n## Edge Cases\n- Handle an empty string input, returning 0.\n- Handle the case where there are no uppercase characters in the input string, returning 0.\n- Handle the case where the string contains only uppercase characters, returning the sum of their ASCII codes.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string `s`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input or invalid characters in the string.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string is empty, so the function should return 0\nassert digitSum(\"\") == 0, 'Failed to handle an empty input string.'\n\n### The sum of the ASCII codes of the uppercase characters in \"abAB\" is 131\nassert digitSum(\"abAB\") == 131, 'Failed to calculate the sum of ASCII codes of the uppercase characters.'\n\n### The sum of the ASCII codes of the uppercase characters in \"abcCd\" is 67\nassert digitSum(\"abcCd\") == 67, 'Failed to calculate the sum of ASCII codes of the uppercase characters.'\n\n### The sum of the ASCII codes of the uppercase characters in \"helloE\" is 69\nassert digitSum(\"helloE\") == 69, 'Failed to calculate the sum of ASCII codes of the uppercase characters.'\n\n### The sum of the ASCII codes of the uppercase characters in \"woArBld\" is 131\nassert digitSum(\"woArBld\") == 131, 'Failed to calculate the sum of ASCII codes of the uppercase characters.'\n\n### The sum of the ASCII codes of the uppercase characters in \"aAaaaXa\" is 153\nassert digitSum(\"aAaaaXa\") == 153, 'Failed to calculate the sum of ASCII codes of the uppercase characters.'\n\n## Edge Cases\n### The input string contains only lowercase characters, so the function should return 0\nassert digitSum(\"abcd\") == 0, 'Failed to handle case where there are no uppercase characters in the input string.'\n\n### The input string contains only uppercase characters, so the function should return the sum of their ASCII codes\nassert digitSum(\"ABC\") == 195, 'Failed to calculate the sum of ASCII codes of the uppercase characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 uppercase characters\n### The sum of the ASCII codes of the uppercase characters in the input string should be 65*10^6\nassert digitSum(\"A\" * 10**6) == 65 * 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return 0\nassert digitSum(123) == 0, 'Failed to handle case where the input is not a string.'\n\n#### The input string contains invalid characters, so the function should ignore them\nassert digitSum(\"A@B*C\") == 130, 'Failed to handle case where the input string contains invalid characters.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(digitSum))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/67",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "entry_point": "fruit_distribution",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\ncheck(fruit_distribution)",
        "plan": [
            "# 1. Extract the number of apples and oranges from the given string using string manipulation or regular expressions.\n# 2. Convert the extracted numbers from string to integers.\n# 3. Calculate the number of mango fruits by subtracting the total number of apples and oranges from the total number of fruits in the basket.\n# 4. Return the calculated number of mango fruits."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` and an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should extract the number of apples and oranges from the given string, subtract them from the total number of fruits in the basket (`n`), and return the resulting number of mango fruits.\n\n## Edge Cases\n- Handle an empty string `s`, returning `n` as the number of mango fruits.\n- Handle the case where no fruits are mentioned in the string, returning `n` as the number of mango fruits.\n- Handle non-string `s` input or a non-integer `n`.\n- Handle non-integer elements in the string `s`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the string `s`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle invalid string formats, such as missing numbers or incorrect number of fruits.\n- Handle non-integer elements in the string `s` or a negative `n`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The number of mango fruits is 19 - 5 - 6 = 8\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8, 'Failed to calculate the number of mango fruits correctly.'\n\n### The number of mango fruits is 3 - 0 - 1 = 2\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2, 'Failed to calculate the number of mango fruits correctly.'\n\n### The number of mango fruits is 100 - 2 - 3 = 95\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95, 'Failed to calculate the number of mango fruits correctly.'\n\n### The number of mango fruits is 120 - 100 - 1 = 19\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19, 'Failed to calculate the number of mango fruits correctly.'\n\n## Edge Cases\n### The string is empty, so the number of mango fruits is equal to the total number of fruits in the basket\nassert fruit_distribution(\"\", 10) == 10, 'Failed to handle an empty string.'\n\n### The string does not mention any fruits, so the number of mango fruits is equal to the total number of fruits in the basket\nassert fruit_distribution(\"No fruits mentioned\", 5) == 5, 'Failed to handle the case where no fruits are mentioned in the string.'\n\n## Test Cases Regarding Non-functional Requirements\n### Performance Requirements\n#### The string contains 10^6 characters, all of which are the letter 'a'\n#### The number of fruits in the basket is 10^6\n#### The number of mango fruits is 10^6 - 10^6 - 10^6 = 0\nassert fruit_distribution(\"a\" * 10**6, 10**6) == 0, 'Failed to handle large input size.'\n\n### The string contains 10^6 characters, all of which are the letter 'a'\n### The number of fruits in the basket is 10^9\n### The number of mango fruits is 10^9 - 10^6 - 10^6 = 999998888\nassert fruit_distribution(\"a\" * 10**6, 10**9) == 999998888, 'Failed to handle large input size.'\n\n### The string contains 10^6 characters, all of which are the letter 'a'\n### The number of fruits in the basket is 10^9 + 1\n### The number of mango fruits is 10^9 + 1 - 10^6 - 10^6 = 999998889\nassert fruit_distribution(\"a\" * 10**6, 10**9 + 1) == 999998889, 'Failed to handle large input size.'\n\n### The string contains 10^6 characters, all of which are the letter 'a'\n### The number of fruits in the basket is 10^12\n### The number of mango fruits is 10^12 - 10^6 - 10^6 = 999998888999\nassert fruit_distribution(\"a\" * 10**6, 10**12) == 999998888999, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The string contains a negative number of oranges, so the function should return an empty string\nassert fruit_distribution(\"5 apples and -6 oranges\", 19) == '', 'Failed to handle case where the input string contains a negative number of fruits.'\n\n#### The string contains a non-integer number of apples, so the function should return an empty string\nassert fruit_distribution(\"2.5 apples and 3 oranges\", 100) == '', 'Failed to handle case where the input string contains a non-integer number of fruits.'\n\n#### The string is not a string, so the function should return an empty string\nassert fruit_distribution(123, 10) == '', 'Failed to handle case where the input string is not a string.'\n\n#### The input number of fruits is negative, so the function should return an empty string\nassert fruit_distribution(\"5 apples and 6 oranges\", -10) == '', 'Failed to handle case where the input number of fruits is negative.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(fruit_distribution))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/68",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "entry_point": "pluck",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\ncheck(pluck)",
        "plan": [
            "# 1. Initialize variables `smallest_value` and `smallest_index` as None.\n# 2. Loop through each element and index in the input array.\n# 3. Check if the current element is even and if it is smaller than the current `smallest_value` or `smallest_value` is None.\n# 4. If the conditions are met, update `smallest_value` to the current element and `smallest_index` to the current index.\n# 5. After the loop, if `smallest_value` and `smallest_index` are still None, return an empty list.\n# 6. Otherwise, return a list containing `smallest_value` and `smallest_index`."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a list containing the smallest even value in `arr` and its index.\n- If there are multiple nodes with the same smallest even value, the function should return the node with the smallest index.\n- If there are no even values in the array or the array is empty, the function should return an empty list.\n\n## Edge Cases\n- Handle an empty `arr` list, returning an empty list.\n- Handle the case where no even values are found in `arr`, returning an empty list.\n- Handle multiple even values with the same minimum value, returning the one with the smallest index.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `arr` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input or non-integer elements in the `arr` list.\n\n### Reliability\n- Avoid index errors while accessing `arr` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The smallest even value is 2, and it has the smallest index\nassert pluck([4, 2, 3]) == [2, 1], 'Failed to find the smallest even value with the smallest index.'\n\n### The smallest even value is 2, and it has the smallest index\nassert pluck([1, 2, 3]) == [2, 1], 'Failed to find the smallest even value with the smallest index.'\n\n### The input list is empty, so the function should return an empty list\nassert pluck([]) == [], 'Failed to handle an empty input list.'\n\n### The smallest even value is 0, but there are two zeros, so we choose the first zero with the smallest index\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1], 'Failed to handle multiple nodes with the same smallest even value.'\n\n## Edge Cases\n### The input list contains no even values, so the function should return an empty list\nassert pluck([1, 3, 5]) == [], 'Failed to handle case where no even values are found.'\n\n### The input list contains only odd values, so the function should return an empty list\nassert pluck([1, 3, 5, 7]) == [], 'Failed to handle case where no even values are found.'\n\n### The input list contains a single node with a value of 0, which is the smallest even value\nassert pluck([0]) == [0, 0], 'Failed to handle case where the input list contains a single node.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are odd\n### The function should return an empty list since there are no even values\nassert pluck([1] * 10**6) == [], 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are even\n### The function should return [0, 0] since 0 is the smallest even value and has the smallest index\nassert pluck([0] * 10**6) == [0, 0], 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The arr input is not a list, so the function should return an empty list\nassert pluck('invalid') == [], 'Failed to handle case where the input arr is not a list.'\n\n#### The arr list contains elements that are not integers, so the function should return an empty list\nassert pluck([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(pluck))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/69",
        "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "entry_point": "search",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\ncheck(search)",
        "plan": [
            "# 1. Create an empty dictionary to store the frequency of each integer in the input list.\n# 2. Loop through the input list and count the frequency of each integer by updating the corresponding key-value pair in the dictionary.\n# 3. Loop through the dictionary and check if the frequency of any integer is greater than or equal to the integer itself.\n# 4. If such an integer exists, return the greatest one.\n# 5. If no such integer exists, return -1."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a non-empty list of positive integers as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the greatest integer from the input list that has a frequency greater than or equal to its own value.\n- If no such integer exists, the function should return -1.\n\n## Edge Cases\n- Handle a list with a single element, returning that element if it meets the condition.\n- Handle a list with all elements having a frequency less than their own value, returning -1.\n- Handle a list with multiple elements meeting the condition, returning the greatest one.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input list.\n- Space complexity: O(n) where n is the length of the input list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-list input or a list with non-integer elements.\n- Handle a list with negative or zero elements.\n\n### Reliability\n- Avoid index errors while accessing list elements.\n- Handle cases where multiple elements have the same maximum frequency and value."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The integer 2 has a frequency of 2, which is equal to its value\n### Therefore, the function should return 2\nassert search([4, 1, 2, 2, 3, 1]) == 2, 'Failed to find the greatest integer with frequency greater than or equal to its value.'\n\n### The integer 3 has a frequency of 3, which is greater than its value\n### Therefore, the function should return 3\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, 'Failed to find the greatest integer with frequency greater than or equal to its value.'\n\n### No integer has a frequency greater than or equal to its value\n### Therefore, the function should return -1\nassert search([5, 5, 4, 4, 4]) == -1, 'Failed to handle case where no integer satisfies the condition.'\n\n## Edge Cases\n### The input list contains a single element, which satisfies the condition\n### Therefore, the function should return that element\nassert search([5]) == 5, 'Failed to handle case where the list contains a single element that satisfies the condition.'\n\n### All elements in the input list have frequencies less than their own values\n### Therefore, the function should return -1\nassert search([1, 2, 3, 4, 5]) == -1, 'Failed to handle case where no integer satisfies the condition.'\n\n### Multiple integers have frequencies greater than or equal to their values\n### The function should return the greatest one, which is 4\nassert search([1, 2, 3, 4, 4, 4]) == 4, 'Failed to find the greatest integer when multiple integers satisfy the condition.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are 1\n### The greatest integer with frequency greater than or equal to its value is 1\nassert search([1] * 10**6) == 1, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return -1\nassert search('invalid') == -1, 'Failed to handle case where the input is not a list.'\n\n#### The input list contains non-integer elements, so the function should return -1\nassert search([1, 2, 'invalid', 4]) == -1, 'Failed to handle case where the input list contains non-integer elements.'\n\n#### The input list contains negative elements, so the function should return -1\nassert search([1, 2, 3, -4, 5]) == -1, 'Failed to handle case where the input list contains negative elements.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(search))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/70",
        "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "entry_point": "strange_sort_list",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(strange_sort_list)",
        "plan": [
            "# 1. Create an empty list to store the strange sorted list.\n# 2. Sort the input list in ascending order.\n# 3. Loop through the sorted list while the length of the sorted list is greater than 1.\n# 4. Remove the minimum value from the sorted list and append it to the strange sorted list.\n# 5. Remove the maximum value from the sorted list and append it to the strange sorted list.\n# 6. Repeat steps 4 and 5 until the length of the sorted list is 1.\n# 7. If there is still one element remaining in the sorted list, append it to the strange sorted list.\n# 8. Return the strange sorted list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `lst` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a new list in a \"strange\" order, where the strange sorting starts with the minimum value, then the maximum value of the remaining integers, then the minimum, and so on.\n\n## Edge Cases\n- Handle an empty `lst` input, returning an empty list.\n- Handle a `lst` input with one element, returning a list with that element.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n), where n is the length of the `lst` list due to the sorting operation.\n- Space complexity: O(n), where n is the length of the `lst` list to store the strange sorted list.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input.\n- Handle non-integer elements in the `lst` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The minimum value is 1, the maximum value of the remaining integers is 4, and the minimum value is 2\nassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3], 'Failed to sort the list in a strange order.'\n\n### All elements in the list are the same, so the strange sorted list should be the same as the input list\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5], 'Failed to handle case where all elements in the list are the same.'\n\n### The input list is empty, so the function should return an empty list\nassert strange_sort_list([]) == [], 'Failed to handle an empty input list.'\n\n## Edge Cases\n### The input list contains only one element, so the strange sorted list should be the same as the input list\nassert strange_sort_list([10]) == [10], 'Failed to handle case where the input list contains only one element.'\n\n### The input list contains two elements, so the strange sorted list should be the same as the input list\nassert strange_sort_list([4, 2]) == [4, 2], 'Failed to handle case where the input list contains two elements.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements with increasing values from 1 to 10^6\n### The minimum value is 1, the maximum value of the remaining integers is 10^6, and so on\n### The strange sorted list should be [1, 10^6, 2, 10^6 - 1, ..., 10^5, 10^5 + 1, ..., 999, 1000]\nassert strange_sort_list(list(range(1, 10**6 + 1))) == [1, 10**6] + list(range(2, 10**6, 2)) + list(range(10**5, 1, -1)), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list of integers, so the function should return an empty list\nassert strange_sort_list('invalid') == [], 'Failed to handle case where the input lst is not a list of integers.'\n\n#### The lst list contains elements that are not integers, so the function should return an empty list\nassert strange_sort_list([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(strange_sort_list))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/71",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "entry_point": "triangle_area",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\ncheck(triangle_area)",
        "plan": [
            "# 1. Check if the given side lengths form a valid triangle by verifying if the sum of any two sides is greater than the third side.\n# 2. If the side lengths do not form a valid triangle, return -1.\n# 3. If the side lengths form a valid triangle, calculate the area using Heron's formula: \n#    - Calculate the semiperimeter (s) by adding all the side lengths and dividing by 2.\n#    - Calculate the area using the formula: area = sqrt(s * (s - a) * (s - b) * (s - c)), where a, b, and c are the side lengths.\n#    - Round the area to 2 decimal points using the round() function.\n# 4. Return the calculated area."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes three integers `a`, `b`, and `c` representing the lengths of the sides of a triangle as input.\n- It returns a float representing the area of the triangle rounded to 2 decimal points if the sides form a valid triangle.\n- If the sides do not form a valid triangle, the function should return -1.\n\n## Expected Behavior\n- The function should return the area of the triangle if the given sides form a valid triangle.\n- The function should return -1 if the given sides do not form a valid triangle.\n\n## Edge Cases\n- Handle non-integer inputs, returning -1.\n- Handle negative side lengths, returning -1.\n- Handle side lengths of zero, returning -1.\n- Handle the case where the sum of any two sides is equal to the third side, returning -1.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer inputs or negative side lengths.\n- Handle side lengths of zero.\n- Handle the case where the sum of any two sides is equal to the third side.\n\n### Reliability\n- Ensure error-free execution and avoid arithmetic operation errors.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sides [3, 4, 5] form a valid triangle with an area of 6.00\nassert triangle_area(3, 4, 5) == 6.00, 'Failed to calculate the area of a valid triangle.'\n\n### The sides [1, 2, 10] do not form a valid triangle, so the function should return -1\nassert triangle_area(1, 2, 10) == -1, 'Failed to handle case where the sides do not form a valid triangle.'\n\n## Edge Cases\n### The sides [0, 0, 0] do not form a valid triangle, so the function should return -1\nassert triangle_area(0, 0, 0) == -1, 'Failed to handle case where the sides are all zero.'\n\n### The sides [-1, -2, -3] do not form a valid triangle, so the function should return -1\nassert triangle_area(-1, -2, -3) == -1, 'Failed to handle case where the sides are negative.'\n\n### The sides [1, 1, 2] do not form a valid triangle, so the function should return -1\nassert triangle_area(1, 1, 2) == -1, 'Failed to handle case where the sum of any two sides is equal to the third side.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The sides [10^5, 10^5, 10^5] form a valid triangle with an area of 4.330127018922193\nassert triangle_area(10**5, 10**5, 10**5) == 4.33, 'Failed to handle large input values.'\n\n### The sides [1, 2, 3] form a valid triangle with an area of 0.9682458365518543\nassert triangle_area(1, 2, 3) == 0.97, 'Failed to handle case where the area is not an exact decimal.'\n\n## Specific Quality Requirements\n### Robustness\n#### The sides input contains non-integer values, so the function should return -1\nassert triangle_area(3, 4.5, 5) == -1, 'Failed to handle case where the input sides contain non-integer values.'\n\n#### The sides input contains negative values, so the function should return -1\nassert triangle_area(-3, -4, -5) == -1, 'Failed to handle case where the input sides contain negative values.'\n\n#### The sides input contains a zero value, so the function should return -1\nassert triangle_area(3, 4, 0) == -1, 'Failed to handle case where the input sides contain zero values.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(triangle_area))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/72",
        "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "entry_point": "will_it_fly",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\ncheck(will_it_fly)",
        "plan": [
            "# 1. Check if the given object q is balanced (palindromic list) by comparing q with its reversed version.\n# 2. Calculate the sum of the elements in q.\n# 3. Check if the sum is less than or equal to the maximum possible weight w.\n# 4. Return True if q is balanced and the sum is less than or equal to w, otherwise return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `q` and an integer `w` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the list `q` is balanced (palindromic) and the sum of its elements is less than or equal to `w`. Otherwise, it should return False.\n\n## Edge Cases\n- Handle an empty `q` list, returning False.\n- Handle the case where `w` is negative, returning False.\n- Handle the case where the sum of the elements in `q` is equal to `w`, returning True.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `q` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `q` input or a non-integer `w`.\n- Handle non-integer elements in the `q` list.\n\n### Reliability\n- Avoid index errors while accessing `q` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The list [1, 2] is unbalanced and the sum of its elements is less than the maximum weight\n### The function should return False\nassert will_it_fly([1, 2], 5) == False, 'Failed to handle case where the list is unbalanced.'\n\n### The list [3, 2, 3] is balanced, but the sum of its elements is more than the maximum weight\n### The function should return False\nassert will_it_fly([3, 2, 3], 1) == False, 'Failed to handle case where the sum of elements is more than the maximum weight.'\n\n### The list [3, 2, 3] is balanced and the sum of its elements is less than the maximum weight\n### The function should return True\nassert will_it_fly([3, 2, 3], 9) == True, 'Failed to handle case where the list is balanced and the sum of elements is less than the maximum weight.'\n\n### The list [3] is balanced and the sum of its elements is less than the maximum weight\n### The function should return True\nassert will_it_fly([3], 5) == True, 'Failed to handle case where the list has only one element.'\n\n## Edge Cases\n### The input list is empty, so the function should return False\nassert will_it_fly([], 5) == False, 'Failed to handle an empty input list.'\n\n### The sum of the elements in the list is equal to the maximum weight, so the function should return True\nassert will_it_fly([1, 2, 3], 6) == True, 'Failed to handle case where the sum of elements is equal to the maximum weight.'\n\n### The maximum weight is a negative number, so the function should return False\nassert will_it_fly([1, 2, 3], -10) == False, 'Failed to handle case where the maximum weight is negative.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements with all elements being 1\n### The list is balanced and the sum of its elements is less than the maximum weight\n### The function should return True\nassert will_it_fly([1] * 10**6, 10**6) == True, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements with all elements being 1\n### The list is unbalanced and the sum of its elements is less than the maximum weight\n### The function should return False\nassert will_it_fly([1] * 10**6, 10**9) == False, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements with all elements being 1\n### The maximum weight is equal to the sum of the elements in the list\n### The function should return True\nassert will_it_fly([1] * 10**6, 10**6) == True, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The q input is not a list of integers, so the function should return False\nassert will_it_fly('invalid', 10) == False, 'Failed to handle case where the input q is not a list of integers.'\n\n#### The w input is not an integer, so the function should return False\nassert will_it_fly([1, 2, 3], 'invalid') == False, 'Failed to handle case where the input w is not an integer.'\n\n#### The q list contains elements that are not integers, so the function should return False\nassert will_it_fly([1, 2, 'invalid', 4], 5) == False, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(will_it_fly))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/73",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "entry_point": "smallest_change",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\ncheck(smallest_change)",
        "plan": [
            "# 1. Initialize variables count and i, both set to 0.\n# 2. Use a while loop to iterate through the array from the beginning and end simultaneously.\n# 3. If the values at the current indices are not equal, increment count by 1.\n# 4. If the values at the next index from the beginning and the previous index from the end are equal, increment i by 1.\n# 5. If i exceeds half the length of the array, break the loop.\n# 6. Return count."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the minimum number of elements that need to be changed to make the `arr` palindromic.\n\n## Edge Cases\n- Handle an empty `arr`, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `arr` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-list input or a list with non-integer elements.\n\n### Reliability\n- Avoid index errors while accessing `arr` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5.\n- Code should be modular, with functions responsible for specific tasks.\n- Follow PEP 8 style guide for naming conventions and code formatting."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The minimum number of elements that need to be changed to make the array palindromic is 4\nassert smallest_change([1,2,3,5,4,7,9,6]) == 4, 'Failed to find the minimum number of changes for a non-palindromic array.'\n\n### The minimum number of elements that need to be changed to make the array palindromic is 1\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1, 'Failed to find the minimum number of changes for a non-palindromic array.'\n\n### The array is already palindromic, so the minimum number of changes is 0\nassert smallest_change([1, 2, 3, 2, 1]) == 0, 'Failed to handle the case where the array is already palindromic.'\n\n## Edge Cases\n### The array is empty, so the minimum number of changes is 0\nassert smallest_change([]) == 0, 'Failed to handle an empty array.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The array contains 10^6 elements with increasing values from 1 to 10^6\n### The array is already palindromic, so the minimum number of changes is 0\nassert smallest_change(list(range(1, 10**6 + 1))) == 0, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The arr input is not a list, so the function should return None\nassert smallest_change('invalid') == None, 'Failed to handle case where the input arr is not a list.'\n\n#### The arr input contains elements that are not integers, so the function should return None\nassert smallest_change([1, 2, 'invalid', 4]) == None, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(smallest_change))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/74",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n",
        "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "entry_point": "total_match",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\ncheck(total_match)",
        "plan": [
            "# 1. Calculate the total number of characters in each list using the sum() function and a list comprehension.\n# 2. Compare the total number of characters in the two lists.\n# 3. If the total number of characters in the first list is less than the total number of characters in the second list, return the first list.\n# 4. If the total number of characters in the first list is greater than the total number of characters in the second list, return the second list.\n# 5. If the total number of characters in the first list is equal to the total number of characters in the second list, return the first list.\n# 6. The function will return the list that has a total number of characters less than the other list, or the first list if both lists have the same total number of characters."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two lists of strings, `lst1` and `lst2`, as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should return the list that has a total number of characters in all strings that is less than the other list.\n- If the two lists have the same total number of characters, the function should return the first list.\n\n## Edge Cases\n- Handle empty lists, returning an empty list.\n- Handle the case where both lists have the same total number of characters, returning the first list.\n- Handle lists with strings that have non-alphabetic characters.\n\n# Non-functional Requirements\n## Performance\n- The function should have a time complexity of O(n) where n is the total number of characters in both lists.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list inputs for `lst1` or `lst2`.\n- Handle non-string elements in `lst1` or `lst2`.\n- Handle non-alphabetic characters in strings.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Both lists are empty, so the function should return an empty list\nassert total_match([], []) == [], 'Failed to handle case where both lists are empty.'\n\n### The total number of characters in ['hi', 'admin'] is 8, which is less than the total number of characters in ['hI', 'Hi'] (10)\n### Therefore, the function should return ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi'], 'Failed to return the list with the lesser total number of characters.'\n\n### The total number of characters in ['hi', 'admin'] is 8, which is less than the total number of characters in ['hi', 'hi', 'admin', 'project'] (16)\n### Therefore, the function should return ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin'], 'Failed to return the list with the lesser total number of characters.'\n\n### The total number of characters in ['hi', 'admin'] is 8, which is the same as the total number of characters in ['hI', 'hi', 'hi'] (8)\n### Since they have the same total number of characters, the function should return the first list, which is ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hi', 'admin'], 'Failed to return the first list when both lists have the same total number of characters.'\n\n### The total number of characters in ['4'] is 1, which is less than the total number of characters in ['1', '2', '3', '4', '5'] (5)\n### Therefore, the function should return ['4']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4'], 'Failed to return the list with the lesser total number of characters.'\n\n## Edge Cases\n### The first list is empty, so the function should return an empty list\nassert total_match([], ['hI', 'Hi']) == [], 'Failed to handle case where the first list is empty.'\n\n### The second list is empty, so the function should return an empty list\nassert total_match(['hi', 'admin'], []) == [], 'Failed to handle case where the second list is empty.'\n\n### Both lists are empty, so the function should return an empty list\nassert total_match([], []) == [], 'Failed to handle case where both lists are empty.'\n\n### The total number of characters in ['hi', 'admin'] is 8, which is the same as the total number of characters in ['hi', 'admin']\n### Since they have the same total number of characters, the function should return the first list, which is ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hi', 'admin']) == ['hi', 'admin'], 'Failed to return the first list when both lists have the same total number of characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The total number of characters in both lists is 10^6\n### The function should be able to handle this input and provide results within 5 seconds\nassert total_match(['a'] * 10**6, ['b'] * 10**6) == ['a'] * 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The first input is not a list, so the function should return an empty list\nassert total_match('invalid', ['hi', 'admin']) == [], 'Failed to handle case where the first input is not a list.'\n\n#### The second input is not a list, so the function should return an empty list\nassert total_match(['hi', 'admin'], 'invalid') == [], 'Failed to handle case where the second input is not a list.'\n\n#### The first input list contains elements that are not strings, so the function should return an empty list\nassert total_match([1, 2, 3], ['hi', 'admin']) == [], 'Failed to handle case where the first input list contains elements that are not strings.'\n\n#### The second input list contains elements that are not strings, so the function should return an empty list\nassert total_match(['hi', 'admin'], [1, 2, 3]) == [], 'Failed to handle case where the second input list contains elements that are not strings.'\n\n#### The strings in the first input list contain non-alphabetic characters, so the function should return an empty list\nassert total_match(['h1', 'admin'], ['hi', 'admin']) == [], 'Failed to handle case where the strings in the first input list contain non-alphabetic characters.'\n\n#### The strings in the second input list contain non-alphabetic characters, so the function should return an empty list\nassert total_match(['hi', 'admin'], ['h1', 'admin']) == [], 'Failed to handle case where the strings in the second input list contain non-alphabetic characters.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(total_match))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/75",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "entry_point": "is_multiply_prime",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\ncheck(is_multiply_prime)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the number of prime factors.\n# 2. Check if the given number a is less than 6. If it is, return False since it is not possible to have 3 prime factors less than 6.\n# 3. Loop through the range from 2 to the square root of a+1.\n# 4. Check if a is divisible by the current number in the loop.\n# 5. If it is, check if the current number is a prime number using a helper function is_prime().\n# 6. If the current number is a prime number, increment the count variable.\n# 7. Check if the count is equal to 3.\n# 8. If it is, return True. Otherwise, return False.\n# 9. Implement the helper function is_prime(n) to check if a number n is prime or not.\n# 10. The helper function should loop through the range from 2 to the square root of n+1 and check if n is divisible by any of the numbers in the loop.\n# 11. If n is divisible by any number in the loop, return False. Otherwise, return True."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `a` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the given number `a` is the product of 3 prime numbers, and False otherwise.\n\n## Constraints\n- The input `a` is less than 100.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(sqrt(a)) where a is the input number.\n- Space complexity: O(1).\n- Ensure efficiency even for the largest possible input, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `a`.\n- Handle negative input for `a`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input number is 30, which can be expressed as the product of 2, 3, and 5\n### The function should return True\nassert is_multiply_prime(30) == True, 'Failed to detect a number that is the product of 3 prime numbers.'\n\n### The input number is 15, which cannot be expressed as the product of 3 prime numbers\n### The function should return False\nassert is_multiply_prime(15) == False, 'Failed to detect a number that is not the product of 3 prime numbers.'\n\n## Edge Cases\n### The input number is 1, which is not considered a prime number\n### The function should return False\nassert is_multiply_prime(1) == False, 'Failed to handle case where the input number is 1.'\n\n### The input number is 2, which is a prime number\n### The function should return False since the input number is not the product of 3 prime numbers\nassert is_multiply_prime(2) == False, 'Failed to handle case where the input number is a prime number.'\n\n### The input number is 99, which is not the product of 3 prime numbers\n### The function should return False\nassert is_multiply_prime(99) == False, 'Failed to handle case where the input number is not the product of 3 prime numbers.'\n\n### The input number is 100, which is not considered a prime number\n### The function should return False\nassert is_multiply_prime(100) == False, 'Failed to handle case where the input number is 100.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input number is 97, which is a prime number\n### The function should return False since the input number is not the product of 3 prime numbers\nassert is_multiply_prime(97) == False, 'Failed to handle case where the input number is a prime number.'\n\n### The input number is 53, which is a prime number\n### The function should return False since the input number is not the product of 3 prime numbers\nassert is_multiply_prime(53) == False, 'Failed to handle case where the input number is a prime number.'\n\n### The input number is 95, which is not the product of 3 prime numbers\n### The function should return False\nassert is_multiply_prime(95) == False, 'Failed to handle large input size.'\n\n### The input number is 99, which is not the product of 3 prime numbers\n### The function should return False\nassert is_multiply_prime(99) == False, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return False\nassert is_multiply_prime('invalid') == False, 'Failed to handle case where the input is not an integer.'\n\n#### The input is a negative number, so the function should return False\nassert is_multiply_prime(-10) == False, 'Failed to handle case where the input is a negative number.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_multiply_prime))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/76",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
        "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "entry_point": "is_simple_power",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(is_simple_power)",
        "plan": [
            "# 1. Check if the power of n equals to x.\n# 2. Return True if x is a simple power of n, False otherwise.\n# 3. To check if x is a simple power of n, we can calculate n raised to the power of an integer, and compare it to x.\n# 4. If the calculated value is equal to x, then x is a simple power of n. Return True.\n# 5. If the calculated value is not equal to x, then x is not a simple power of n. Return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two integers `x` and `n` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return `True` if `x` is a simple power of `n`, and `False` otherwise.\n- `x` is considered a simple power of `n` if `n**int = x`, where `int` is an integer.\n- For example:\n  - `is_simple_power(1, 4)` should return `True` since `1 = 4**0`.\n  - `is_simple_power(2, 2)` should return `True` since `2 = 2**1`.\n  - `is_simple_power(8, 2)` should return `True` since `8 = 2**3`.\n  - `is_simple_power(3, 2)` should return `False` since there is no integer `int` such that `2**int = 3`.\n  - `is_simple_power(3, 1)` should return `False` since `1**int = 1`, but `1 != 3`.\n  - `is_simple_power(5, 3)` should return `False` since there is no integer `int` such that `3**int = 5`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log(x)) where `x` is the larger of `x` and `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `x` or `n` input.\n- Handle negative `x` or `n`.\n\n### Reliability\n- Ensure the function returns the correct boolean value according to the definition of a simple power.\n- Avoid arithmetic errors while calculating `n**int`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### 1 is a simple power of 4 since 4**0 = 1\nassert is_simple_power(1, 4) == True, 'Failed for case where x is a simple power of n.'\n\n### 2 is a simple power of 2 since 2**1 = 2\nassert is_simple_power(2, 2) == True, 'Failed for case where x is a simple power of n.'\n\n### 8 is a simple power of 2 since 2**3 = 8\nassert is_simple_power(8, 2) == True, 'Failed for case where x is a simple power of n.'\n\n### 3 is not a simple power of 2 since there is no integer `int` such that 2**int = 3\nassert is_simple_power(3, 2) == False, 'Failed for case where x is not a simple power of n.'\n\n### 3 is not a simple power of 1 since 1**int = 1, but 1 != 3\nassert is_simple_power(3, 1) == False, 'Failed for case where x is not a simple power of n.'\n\n### 5 is not a simple power of 3 since there is no integer `int` such that 3**int = 5\nassert is_simple_power(5, 3) == False, 'Failed for case where x is not a simple power of n.'\n\n## Edge Cases\n### 1 is a simple power of 1 since 1**0 = 1\nassert is_simple_power(1, 1) == True, 'Failed for case where x is a simple power of n and n = 1.'\n\n### 0 is not a simple power of any number since any number raised to 0 is 1\nassert is_simple_power(0, 2) == False, 'Failed for case where x is 0.'\n\n### 2 is not a simple power of 0 since any number raised to 0 is 1, and 1 != 2\nassert is_simple_power(2, 0) == False, 'Failed for case where n is 0.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The larger of x and n is 10^6\n### 10^6 is a simple power of 10 since 10**6 = 10^6\nassert is_simple_power(10**6, 10) == True, 'Failed for large input size.'\n\n### The larger of x and n is 10^6\n### 10^6 is not a simple power of 9 since there is no integer `int` such that 9**int = 10^6\nassert is_simple_power(10**6, 9) == False, 'Failed for large input size.'\n\n### The larger of x and n is 10^6\n### 10^6 is not a simple power of 10^6 since there is no integer `int` such that (10^6)**int = 10^6\nassert is_simple_power(10**6, 10**6) == False, 'Failed for large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### x is not an integer, so the function should return False\nassert is_simple_power('invalid', 4) == False, 'Failed to handle case where x is not an integer.'\n\n#### n is not an integer, so the function should return False\nassert is_simple_power(1, 'invalid') == False, 'Failed to handle case where n is not an integer.'\n\n#### x is negative, so the function should return False\nassert is_simple_power(-1, 4) == False, 'Failed to handle case where x is negative.'\n\n#### n is negative, so the function should return False\nassert is_simple_power(1, -4) == False, 'Failed to handle case where n is negative.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_simple_power))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/77",
        "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "entry_point": "iscube",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\ncheck(iscube)",
        "plan": [
            "# 1. Calculate the cubic root of the absolute value of the input number.\n# 2. Round the cubic root to the nearest integer.\n# 3. Calculate the cube of the rounded cubic root.\n# 4. Check if the cube is equal to the absolute value of the input number.\n# 5. Return True if the cube is equal to the absolute value of the input number, False otherwise."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `a` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the input integer `a` is a cube of some integer number. Otherwise, it should return False.\n\n## Edge Cases\n- Handle negative input values for `a`.\n- Handle zero as an input value for `a`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input values for `a`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### 1 is a cube of 1\nassert iscube(1) == True, 'Failed to identify that 1 is a cube.'\n\n### 2 is not a cube of any integer\nassert iscube(2) == False, 'Failed to identify that 2 is not a cube.'\n\n### -1 is a cube of -1\nassert iscube(-1) == True, 'Failed to identify that -1 is a cube.'\n\n### 64 is a cube of 4\nassert iscube(64) == True, 'Failed to identify that 64 is a cube.'\n\n### 0 is a cube of 0\nassert iscube(0) == True, 'Failed to identify that 0 is a cube.'\n\n### 180 is not a cube of any integer\nassert iscube(180) == False, 'Failed to identify that 180 is not a cube.'\n\n## Edge Cases\n### The input is a very large cube, 1000000000000 is a cube of 10000\nassert iscube(1000000000000) == True, 'Failed to identify a very large input as a cube.'\n\n### The input is a very small cube, 1 is a cube of 1\nassert iscube(1) == True, 'Failed to identify a very small input as a cube.'\n\n### The input is a negative cube, -8 is a cube of -2\nassert iscube(-8) == True, 'Failed to identify a negative input as a cube.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Test a large input value\n### The input is a very large cube, 999999999999 is not a cube of any integer\nassert iscube(999999999999) == False, 'Failed to handle a large input value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return False\nassert iscube('invalid') == False, 'Failed to handle a non-integer input.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(iscube))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/78",
        "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
        "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "entry_point": "hex_key",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\ncheck(hex_key)",
        "plan": [
            "# 1. Initialize a variable `count` to keep track of the number of prime hexadecimal digits.\n# 2. Loop through each character in the input hexadecimal number.\n# 3. Check if the character is one of the prime hexadecimal digits: 2, 3, 5, 7, B, D.\n# 4. If it is, increment the count.\n# 5. Return the final count of prime hexadecimal digits."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, handling invalid inputs (e.g., non-string input, lowercase characters, non-hexadecimal characters).\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `num` representing a hexadecimal number as input.\n- It returns an integer representing the number of prime hexadecimal digits in `num`.\n\n## Expected Behavior\n- The function should count the number of prime hexadecimal digits in the input `num`.\n- The prime hexadecimal digits are 2, 3, 5, 7, B, D.\n\n## Edge Cases\n- Handle an empty `num` string, returning 0.\n- Handle a `num` string with no prime hexadecimal digits, returning 0.\n- Handle a `num` string with all prime hexadecimal digits, returning the length of the `num` string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `num` string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely long `num` strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string `num` input or lowercase hexadecimal characters.\n- Handle non-hexadecimal characters in the `num` string.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input num string contains 1 prime hexadecimal digit, which is B\nassert hex_key(\"AB\") == 1, 'Failed to count the number of prime hexadecimal digits.'\n\n### The input num string contains 2 prime hexadecimal digits, which are 7 and E\nassert hex_key(\"1077E\") == 2, 'Failed to count the number of prime hexadecimal digits.'\n\n### The input num string contains 4 prime hexadecimal digits, which are 7, B, D, and 3\nassert hex_key(\"ABED1A33\") == 4, 'Failed to count the number of prime hexadecimal digits.'\n\n### The input num string contains all 6 prime hexadecimal digits\nassert hex_key(\"123456789ABCDEF0\") == 6, 'Failed to count the number of prime hexadecimal digits.'\n\n### The input num string contains 2 prime hexadecimal digits, which are 2\nassert hex_key(\"2020\") == 2, 'Failed to count the number of prime hexadecimal digits.'\n\n## Edge Cases\n### The input num string is empty, so the function should return 0\nassert hex_key(\"\") == 0, 'Failed to handle an empty input num string.'\n\n### The input num string does not contain any prime hexadecimal digits, so the function should return 0\nassert hex_key(\"0123456789\") == 0, 'Failed to handle case where no prime hexadecimal digits are present.'\n\n### The input num string contains all prime hexadecimal digits, so the function should return the length of the num string\nassert hex_key(\"2357BD\") == 6, 'Failed to handle case where all hexadecimal digits are prime.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The num string contains 10^6 characters, all of which are prime hexadecimal digits\n### The function should return 10^6\nassert hex_key(\"2\" * 10**6) == 10**6, 'Failed to handle large input size.'\n\n### The num string contains 10^6 characters, none of which are prime hexadecimal digits\n### The function should return 0\nassert hex_key(\"0123456789ABCDEF\") == 0, 'Failed to handle case where no prime hexadecimal digits are present.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input num is not a string, so the function should return 0\nassert hex_key(1234) == 0, 'Failed to handle case where the input num is not a string.'\n\n#### The input num contains lowercase hexadecimal characters, so the function should return 0\nassert hex_key(\"abcdef\") == 0, 'Failed to handle case where the input num contains lowercase hexadecimal characters.'\n\n#### The input num contains non-hexadecimal characters, so the function should return 0\nassert hex_key(\"GHIJKL\") == 0, 'Failed to handle case where the input num contains non-hexadecimal characters.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(hex_key))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/79",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "entry_point": "decimal_to_binary",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(decimal_to_binary)",
        "plan": [
            "# 1. Use the bin() function to convert the decimal number to binary.\n# 2. Remove the '0b' prefix from the binary representation using slicing.\n# 3. Add the 'db' prefix and suffix to the binary representation.\n# 4. Return the resulting binary string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `decimal` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should convert the `decimal` number to its binary representation.\n- The binary representation should have the 'db' prefix and suffix.\n- Each character in the binary representation should be '0' or '1'.\n\n## Edge Cases\n- Handle a non-integer `decimal` input.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log n), where n is the value of `decimal`.\n- Space complexity: O(log n).\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-integer `decimal` input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The decimal number 15 in binary is 1111\n### The binary representation should have the 'db' prefix and suffix\nassert decimal_to_binary(15) == \"db1111db\", 'Failed to convert decimal 15 to binary.'\n\n### The decimal number 32 in binary is 100000\n### The binary representation should have the 'db' prefix and suffix\nassert decimal_to_binary(32) == \"db100000db\", 'Failed to convert decimal 32 to binary.'\n\n## Edge Cases\n### The decimal number 0 in binary is 0\n### The binary representation should have the 'db' prefix and suffix\nassert decimal_to_binary(0) == \"db0db\", 'Failed to handle decimal 0.'\n\n### The decimal number 1 in binary is 1\n### The binary representation should have the 'db' prefix and suffix\nassert decimal_to_binary(1) == \"db1db\", 'Failed to handle decimal 1.'\n\n### The decimal number 10 in binary is 1010\n### The binary representation should have the 'db' prefix and suffix\nassert decimal_to_binary(10) == \"db1010db\", 'Failed to convert decimal 10 to binary.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The decimal number 10^9 in binary has approximately 30 digits\n### The binary representation should have the 'db' prefix and suffix\nassert decimal_to_binary(10**9) == \"db110000110101101101011001000000db\", 'Failed to handle large input.'\n\n## Specific Quality Requirements\n### Robustness\n#### The decimal input is not an integer, so the function should return an empty string\nassert decimal_to_binary('invalid') == '', 'Failed to handle case where the input decimal is not an integer.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(decimal_to_binary))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/80",
        "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "entry_point": "is_happy",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\ncheck(is_happy)",
        "plan": [
            "# 1. Check if the length of the string is at least 3. If not, return False.\n# 2. Loop through the string with a window size of 3.\n# 3. Check if the 3 consecutive letters in the window are distinct. If not, return False.\n# 4. If the loop completes without returning False, return True."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the string `s` is happy and False otherwise.\n- A string `s` is considered happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n## Edge Cases\n- Handle an empty string, returning False.\n- Handle a string with length less than 3, returning False.\n- Handle a string with consecutive repeating characters, returning False.\n- Handle a string with distinct consecutive characters, returning True.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the string `s`.\n- Space complexity: O(1).\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n- Handle input with non-alphabetic characters.\n- Handle input with leading/trailing whitespaces.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The string has length less than 3, so it is not happy\nassert is_happy('a') == False, 'Failed to handle case where the string has length less than 3.'\n\n### The string has consecutive repeating characters, so it is not happy\nassert is_happy('aa') == False, 'Failed to handle case where the string has consecutive repeating characters.'\n\n### The string has distinct consecutive characters, so it is happy\nassert is_happy('abcd') == True, 'Failed to handle case where the string has distinct consecutive characters.'\n\n### The string has consecutive repeating characters, so it is not happy\nassert is_happy('aabb') == False, 'Failed to handle case where the string has consecutive repeating characters.'\n\n### The string has distinct consecutive characters, so it is happy\nassert is_happy('adb') == True, 'Failed to handle case where the string has distinct consecutive characters.'\n\n### The string has consecutive repeating characters, so it is not happy\nassert is_happy('xyy') == False, 'Failed to handle case where the string has consecutive repeating characters.'\n\n## Edge Cases\n### The string is empty, so it is not happy\nassert is_happy('') == False, 'Failed to handle an empty string.'\n\n### The string has consecutive repeating characters, so it is not happy\nassert is_happy('aaa') == False, 'Failed to handle case where the string has consecutive repeating characters.'\n\n### The string has distinct consecutive characters, so it is happy\nassert is_happy('abc') == True, 'Failed to handle case where the string has distinct consecutive characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The string has length 10^6 with consecutive repeating characters\n### The function should return False\nassert is_happy('a' * 10**6) == False, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return False\nassert is_happy(123) == False, 'Failed to handle case where the input is not a string.'\n\n#### The input contains non-alphabetic characters, so the function should return False\nassert is_happy('ab1cd') == False, 'Failed to handle case where the input contains non-alphabetic characters.'\n\n#### The input has leading/trailing whitespaces, so the function should ignore them and return the correct result\nassert is_happy('   abc   ') == True, 'Failed to handle case where the input has leading/trailing whitespaces.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_happy))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/81",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "entry_point": "numerical_letter_grade",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(numerical_letter_grade)",
        "plan": [
            "# 1. Create an empty list to store the letter grades.\n# 2. Loop through each GPA in the input list.\n# 3. Use if-elif statements to determine the corresponding letter grade for each GPA based on the provided table.\n# 4. Append the letter grade to the list of letter grades.\n# 5. Return the list of letter grades."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list `grades` as input.\n- It returns a list of letter grades.\n\n## Expected Behavior\n- The function should convert each GPA in the input list to its corresponding letter grade based on the provided table.\n- The function should return a list of letter grades in the same order as the input list.\n\n## Edge Cases\n- Handle an empty `grades` list, returning an empty list.\n- Handle non-float or non-integer elements in the `grades` list.\n- Handle negative GPAs in the `grades` list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `grades` list.\n- Space complexity: O(n) where n is the length of the `grades` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `grades` input.\n- Handle non-numeric elements in the `grades` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10.\n- Write clear and concise code with meaningful variable names and comments.\n- Avoid code duplication by using helper functions or modules if necessary."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Convert each GPA to its corresponding letter grade based on the table\n### The input list contains GPAs [4.0, 3, 1.7, 2, 3.5]\n### The expected output is ['A+', 'B', 'C-', 'C', 'A-']\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'], 'Failed to convert GPAs to letter grades.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert numerical_letter_grade([]) == [], 'Failed to handle an empty input list.'\n\n### The input list contains non-float and non-integer elements, so the function should return an empty list\nassert numerical_letter_grade([4.0, 3, 'invalid', 2, 3.5]) == [], 'Failed to handle non-numeric elements in the input list.'\n\n### The input list contains negative GPAs, so the function should return an empty list\nassert numerical_letter_grade([4.0, 3, -1.7, 2, 3.5]) == [], 'Failed to handle negative GPAs in the input list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The grades list contains 10^6 elements, all of which are 4.0\n### The expected output is a list of 10^6 'A+' grades\nassert numerical_letter_grade([4.0] * 10**6) == ['A+'] * 10**6, 'Failed to handle large input size.'\n\n### The grades list contains 10^6 elements, all of which are 2.0\n### The expected output is a list of 10^6 'C+' grades\nassert numerical_letter_grade([2.0] * 10**6) == ['C+'] * 10**6, 'Failed to handle large input size.'\n\n### The grades list contains 10^6 elements, all of which are 0.0\n### The expected output is a list of 10^6 'E' grades\nassert numerical_letter_grade([0.0] * 10**6) == ['E'] * 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The grades input is not a list, so the function should return an empty list\nassert numerical_letter_grade('invalid') == [], 'Failed to handle case where the input grades is not a list.'\n\n#### The grades list contains elements that are not numbers, so the function should return an empty list\nassert numerical_letter_grade([4.0, 3, 'invalid', 2, 3.5]) == [], 'Failed to handle case where the input list contains elements that are not numbers.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(numerical_letter_grade))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/82",
        "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "entry_point": "prime_length",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\ncheck(prime_length)",
        "plan": [
            "# 1. Import the math module to use the sqrt() function.\n# 2. Determine the length of the input string.\n# 3. Check if the length is less than or equal to 1. If it is, return False.\n# 4. Loop through numbers from 2 to the square root of the length (inclusive).\n# 5. Check if the length is divisible by any of these numbers. If it is, return False.\n# 6. If the loop completes without finding any divisors, return True."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the length of the string is a prime number, and False otherwise.\n\n## Edge Cases\n- Handle an empty string, returning False.\n- Handle a string with a length of 1, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(sqrt(n)) where n is the length of the input string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely long strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string input.\n\n### Reliability\n- None specified.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The length of the string \"Hello\" is 5, which is a prime number\nassert prime_length('Hello') == True, 'Failed to handle case where the string length is a prime number.'\n\n### The length of the string \"abcdcba\" is 7, which is a prime number\nassert prime_length('abcdcba') == True, 'Failed to handle case where the string length is a prime number.'\n\n### The length of the string \"kittens\" is 7, which is a prime number\nassert prime_length('kittens') == True, 'Failed to handle case where the string length is a prime number.'\n\n### The length of the string \"orange\" is 6, which is not a prime number\nassert prime_length('orange') == False, 'Failed to handle case where the string length is not a prime number.'\n\n## Edge Cases\n### The input string is empty, so the function should return False\nassert prime_length('') == False, 'Failed to handle an empty string.'\n\n### The length of the string \"a\" is 1, which is not a prime number\nassert prime_length('a') == False, 'Failed to handle a string of length 1.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string is a very long string consisting of the letter \"a\" repeated 10^6 times\n### The length of the string is 10^6, which is not a prime number\nassert prime_length('a' * 10**6) == False, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return False\nassert prime_length(123) == False, 'Failed to handle case where the input is not a string.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(prime_length))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/83",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
        "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "entry_point": "starts_one_ends",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(starts_one_ends)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the count of n-digit positive integers that start or end with 1.\n# 2. Loop through the range from 10^(n-1) to 10^n.\n# 3. Convert each number to a string.\n# 4. Check if the first character or the last character of the string is '1'.\n# 5. If either condition is true, increment the count.\n# 6. Return the final count."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the count of n-digit positive integers that start or end with 1.\n\n## Edge Cases\n- Handle negative or zero values of `n` by returning 0.\n- Handle non-integer values of `n` by raising a `TypeError` or returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(10^n) where n is the value of `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-positive `n` input or a non-integer `n`.\n\n### Reliability\n- Handle potential arithmetic errors, such as overflow, when calculating 10^n.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### For n = 1, there are two 1-digit positive integers (1 and 10) that start or end with 1\nassert starts_one_ends(1) == 2, 'Failed to count the number of n-digit positive integers that start or end with 1.'\n\n### For n = 2, there are 20 2-digit positive integers that start or end with 1\n### (11, 10, 12, ..., 19, 21, 31, ..., 91)\nassert starts_one_ends(2) == 20, 'Failed to count the number of n-digit positive integers that start or end with 1.'\n\n### For n = 3, there are 200 3-digit positive integers that start or end with 1\n### (111, 110, 112, ..., 119, 101, 121, ..., 911)\nassert starts_one_ends(3) == 200, 'Failed to count the number of n-digit positive integers that start or end with 1.'\n\n## Edge Cases\n### For n = 0, there are no 0-digit positive integers, so the function should return 0\nassert starts_one_ends(0) == 0, 'Failed to handle non-positive values of n.'\n\n### For n = -1, there are no negative-digit positive integers, so the function should return 0\nassert starts_one_ends(-1) == 0, 'Failed to handle non-positive values of n.'\n\n### For n = 1.5, the input is not an integer, so the function should raise a TypeError or return 0\nassert starts_one_ends(1.5) == 0, 'Failed to handle non-integer values of n.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input value of n is the maximum possible value (10^6)\n### There is only one 10^6-digit positive integer that starts or ends with 1\nassert starts_one_ends(10**6) == 1, 'Failed to handle large input size.'\n\n### The input value of n is 1\n### There are two 1-digit positive integers that start or end with 1\nassert starts_one_ends(1) == 2, 'Failed to handle small input size.'\n\n### The input value of n is 10^6\n### The function should calculate 10^6 correctly to avoid any arithmetic errors\nassert starts_one_ends(10**6) == 1, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input value of n is not a positive integer, so the function should raise a TypeError or return 0\nassert starts_one_ends('invalid') == 0, 'Failed to handle case where the input n is not a positive integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(starts_one_ends))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/84",
        "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
        "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "entry_point": "solve",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\ncheck(solve)",
        "plan": [
            "# 1. Convert the given positive integer N to binary using the bin() function.\n# 2. Remove the '0b' prefix from the binary representation.\n# 3. Convert the binary string to a list of characters.\n# 4. Initialize a variable sum_digits to keep track of the sum of digits.\n# 5. Loop through each digit in the list of binary characters.\n# 6. Convert each digit from binary to decimal by using the int() function with base 2.\n# 7. Add the decimal value of each digit to sum_digits.\n# 8. Convert the sum_digits to binary using the bin() function.\n# 9. Remove the '0b' prefix from the binary representation.\n# 10. Return the binary string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive integer `N` as input.\n- It returns a string representation of the sum of the digits of `N` in binary.\n\n## Expected Behavior\n- The function should convert the given positive integer `N` to binary.\n- It should calculate the sum of the digits in the binary representation of `N`.\n- The function should return the binary representation of the sum of the digits.\n\n## Edge Cases\n- Handle the case where `N` is 0, returning \"0\".\n- Handle the case where `N` is 1, returning \"1\".\n- Handle the case where `N` is a large positive integer, such as 10000.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log N), where N is the value of `N`.\n- Space complexity: O(log N), where N is the value of `N`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input or a negative `N`.\n- Handle the case where `N` exceeds the given constraint of 0 \u2264 N \u2264 10000.\n\n### Reliability\n- Avoid arithmetic errors, such as overflow, while performing calculations.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sum of the digits in binary for N = 1000 is 1, so the function should return \"1\"\nassert solve(1000) == \"1\", 'Failed to calculate the sum of digits in binary.'\n\n### The sum of the digits in binary for N = 150 is 6, so the function should return \"110\"\nassert solve(150) == \"110\", 'Failed to calculate the sum of digits in binary.'\n\n### The sum of the digits in binary for N = 147 is 12, so the function should return \"1100\"\nassert solve(147) == \"1100\", 'Failed to calculate the sum of digits in binary.'\n\n## Edge Cases\n### The sum of the digits in binary for N = 0 is 0, so the function should return \"0\"\nassert solve(0) == \"0\", 'Failed to handle the case where N is 0.'\n\n### The sum of the digits in binary for N = 1 is 1, so the function should return \"1\"\nassert solve(1) == \"1\", 'Failed to handle the case where N is 1.'\n\n### The sum of the digits in binary for N = 10000 is 4, so the function should return \"100\"\nassert solve(10000) == \"100\", 'Failed to handle the case where N is a large positive integer.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input value of N is the maximum value allowed, 10000\n### The sum of the digits in binary for N = 10000 is 3, so the function should return \"11\"\nassert solve(10000) == \"11\", 'Failed to handle the maximum input value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return an empty list\nassert solve('invalid') == '', 'Failed to handle the case where the input is not an integer.'\n\n#### The input is a negative number, so the function should return an empty list\nassert solve(-10) == '', 'Failed to handle the case where the input is a negative number.'\n\n#### The input value of N is larger than the allowed maximum value, 10000\n#### The function should return an empty list\nassert solve(10001) == '', 'Failed to handle the case where N exceeds the maximum allowed value.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(solve))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/85",
        "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "entry_point": "add",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \ncheck(add)",
        "plan": [
            "# 1. Initialize a variable \"total\" to store the sum of even elements at odd indices.\n# 2. Loop through the list starting from index 1 with a step size of 2, which represents the odd indices.\n# 3. Check if the element at the current index is even.\n# 4. If it is even, add it to the total.\n# 5. Return the total."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a non-empty list of integers `lst` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of even elements that are at odd indices in the given list.\n\n## Edge Cases\n- Handle the case where there are no even elements at odd indices, returning 0.\n- Handle non-integer elements in the list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `lst` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input.\n- Handle empty list input.\n\n### Reliability\n- Avoid index errors while accessing `lst` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The even elements at odd indices are [2]\n### The sum of these elements is 2\nassert add([4, 2, 6, 7]) == 2, 'Failed to calculate the sum of even elements at odd indices.'\n\n### The even elements at odd indices are [10, 8, 6]\n### The sum of these elements is 24\nassert add([1, 10, 2, 8, 3, 6]) == 24, 'Failed to calculate the sum of even elements at odd indices.'\n\n## Edge Cases\n### There are no even elements at odd indices, so the function should return 0\nassert add([1, 3, 5, 7]) == 0, 'Failed to handle case where there are no even elements at odd indices.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The lst list contains 10^6 elements with alternating odd and even elements\n### The even elements at odd indices are [2, 4, 6, ..., 10^6]\n### The sum of these elements is 2 + 4 + 6 + ... + 10^6 = 250000500000\nassert add(list(range(1, 10**6 + 1))) == 250000500000, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list, so the function should return 0\nassert add('invalid') == 0, 'Failed to handle case where the input lst is not a list.'\n\n#### The lst input is an empty list, so the function should return 0\nassert add([]) == 0, 'Failed to handle an empty input list.'\n\n#### The lst list contains elements that are not integers, so the function should ignore those elements\n### The even elements at odd indices are [4, 6, 8]\n### The sum of these elements is 18\nassert add([1, 2, 'invalid', 4, 5, 6, 'invalid', 8]) == 18, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(add))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/86",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
        "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "entry_point": "anti_shuffle",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(anti_shuffle)",
        "plan": [
            "# 1. Split the input string into a list of words.\n# 2. Iterate through each word in the list.\n# 3. Sort the characters of each word in ascending order based on ASCII value.\n# 4. Join the sorted characters back into a word.\n# 5. Join the words back into a string, preserving the order and spaces.\n# 6. Return the resulting ordered version of the string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` as input.\n- It returns a string as output.\n\n## Expected Behavior\n- The function should return an ordered version of the input string `s`, where all words (separated by spaces) are replaced by a new word where all the characters are arranged in ascending order based on their ASCII value.\n- The order of words and blank spaces in the sentence should be preserved.\n\n## Edge Cases\n- Handle an empty string as input, returning an empty string.\n- Handle input strings with no words, returning the input string.\n- Handle input strings with multiple spaces between words, treating them as a single space.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log m) where n is the length of the input string `s` and m is the average length of the words in `s`.\n- Space complexity: O(n) where n is the length of the input string `s`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n- Handle special characters and non-alphabetic characters in the input string."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string has a single word, so the output should be the same as the input\nassert anti_shuffle('Hi') == 'Hi', 'Failed to handle a single-word input.'\n\n### The input string has multiple words, and the characters in each word are rearranged in ascending order based on their ASCII values\nassert anti_shuffle('hello') == 'ehllo', 'Failed to rearrange the characters in a word in ascending order based on ASCII values.'\n\n### The input string has multiple words, and the characters in each word are rearranged in ascending order based on their ASCII values\n### The order of words and blank spaces in the sentence is preserved\nassert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor', 'Failed to handle multiple words and preserve the order of words and spaces.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty string\nassert anti_shuffle('') == '', 'Failed to handle an empty input string.'\n\n### The input string has no words, so the function should return the input string\nassert anti_shuffle(' ') == ' ', 'Failed to handle an input string with no words.'\n\n### The input string has multiple spaces between words, so the function should treat them as a single space\nassert anti_shuffle('Hello   World') == 'Hello   Dlorw', 'Failed to handle multiple spaces between words.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 characters, all of which are the same character 'a'\n### The output string should also contain 10^6 characters, all of which are the character 'a'\nassert anti_shuffle('a' * 10**6) == 'a' * 10**6, 'Failed to handle large input size.'\n\n### The input string contains 10^6 characters, all of which are unique characters from 'a' to 'z' in random order\n### The output string should contain 10^6 characters, with each word in ascending order of ASCII values\nassert anti_shuffle(''.join(random.sample(string.ascii_lowercase, len(string.ascii_lowercase)))) == string.ascii_lowercase, 'Failed to handle large input size with random order.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty string\nassert anti_shuffle(1234) == '', 'Failed to handle a non-string input.'\n\n#### The input string contains special characters and non-alphabetic characters\n#### The function should handle these characters and rearrange the alphabetic characters in ascending order based on ASCII values\nassert anti_shuffle('H@e*llo!') == 'H@e*llo!', 'Failed to handle special characters and non-alphabetic characters in the input string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(anti_shuffle))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/87",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "entry_point": "get_row",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(get_row)",
        "plan": [
            "# 1. Initialize an empty list to store the coordinates.\n# 2. Loop through each row in the input list.\n# 3. For each row, loop through each element and check if it is equal to the given integer x.\n# 4. If a match is found, append the coordinate (row index, column index) to the list of coordinates.\n# 5. Sort the list of coordinates by row index in ascending order.\n# 6. Sort the list of coordinates within each row by column index in descending order.\n# 7. Return the sorted list of coordinates."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a 2-dimensional list `lst` and an integer `x` as input.\n- It returns a list of tuples.\n\n## Expected Behavior\n- The function should find all occurrences of `x` in the list `lst` and return a list of tuples representing the coordinates of each occurrence.\n- The tuples should be sorted initially by row index in ascending order and within each row, by column index in descending order.\n\n## Edge Cases\n- Handle an empty `lst` list, returning an empty list.\n- Handle the case where `x` does not appear in any row of `lst`, returning an empty list.\n- Handle the case where a row in `lst` is an empty list, skipping that row in the output.\n- Handle the case where there are multiple occurrences of `x` in a single row, returning the coordinates in descending order of column index.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n*m*log(m)) where n is the number of rows in `lst` and m is the maximum number of columns in any row.\n- Space complexity: O(k) where k is the number of occurrences of `x` in `lst`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input or a non-integer `x`.\n- Handle non-integer elements in the `lst` list.\n\n### Reliability\n- Avoid index errors while accessing elements in `lst`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The number 1 appears in multiple rows and columns\nassert get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)], 'Failed to find the correct coordinates for the number 1.'\n\n### The list is empty, so the function should return an empty list\nassert get_row([], 1) == [], 'Failed to handle an empty input list.'\n\n### The number 3 appears in a single row and column\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)], 'Failed to find the correct coordinates for the number 3.'\n\n## Edge Cases\n### The list is empty, so the function should return an empty list\nassert get_row([], 10) == [], 'Failed to handle an empty input list.'\n\n### The number 10 does not appear in any row, so the function should return an empty list\nassert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == [], 'Failed to handle the case where the number does not appear in any row.'\n\n### The number 1 appears in multiple rows but no columns\n### The function should return the coordinates sorted by row index in ascending order\nassert get_row([[1], [], [1, 1]], 1) == [(0, 0), (2, 1), (2, 0)], 'Failed to handle the case where the number appears in multiple rows but no columns.'\n\n### The number 5 appears in multiple columns but no rows\n### The function should return an empty list\nassert get_row([[1], [2], [3]], 5) == [], 'Failed to handle the case where the number appears in multiple columns but no rows.'\n\n### The number 1 appears in multiple rows and columns\n### The function should return the coordinates sorted by row index in ascending order\n### Within each row, the coordinates should be sorted by column index in descending order\nassert get_row([[1, 1, 1], [1, 2, 3], [1, 1, 1]], 1) == [(0, 2), (0, 1), (0, 0), (2, 2), (2, 1), (2, 0), (1, 2), (1, 1), (1, 0)], 'Failed to handle the case where the number appears in multiple rows and columns.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The lst list contains 10^5 rows, each with 10^5 columns\n### The number 1 appears in all rows and columns\n### The function should return all coordinates in descending order of column index within each row\nassert get_row([[1]*10**5 for _ in range(10**5)], 1) == [(i, j) for i in range(10**5) for j in range(10**5-1, -1, -1)], 'Failed to handle large input size.'\n\n### The lst list contains 10^5 rows, each with 10^5 columns\n### The number 10^9 does not appear in any row, so the function should return an empty list\nassert get_row([[1]*10**5 for _ in range(10**5)], 10**9) == [], 'Failed to handle case where the number does not appear in any row.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list, so the function should return an empty list\nassert get_row('invalid', 10) == [], 'Failed to handle case where the input lst is not a list.'\n\n#### The x input is not an integer, so the function should return an empty list\nassert get_row([[1, 2, 3], [4, 5, 6]], 'invalid') == [], 'Failed to handle case where the input x is not an integer.'\n\n#### The lst list contains elements that are not integers, so the function should return an empty list\nassert get_row([[1, 2, 3], [4, 'invalid', 6]], 6) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n#### The x input is not an integer, so the function should return an empty list\nassert get_row([[1, 2, 3], [4, 5, 6]], -10) == [], 'Failed to handle case where the x is a negative number.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(get_row))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/88",
        "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "entry_point": "sort_array",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\ncheck(sort_array)",
        "plan": [
            "# 1. Check if the length of the input array is 0 or 1. If so, return a copy of the input array.\n# 2. Get the first and last elements of the input array.\n# 3. Calculate the sum of the first and last elements.\n# 4. Check if the sum is odd or even.\n# 5. If the sum is odd, sort the input array in ascending order and return a copy of the sorted array.\n# 6. If the sum is even, sort the input array in descending order and return a copy of the sorted array."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an array of non-negative integers as input.\n- It returns a new array of integers.\n\n## Expected Behavior\n- The function should return a copy of the given array after sorting it in ascending order if the sum of the first and last elements is odd, or sorting it in descending order if the sum is even.\n\n## Edge Cases\n- Handle an empty input array, returning an empty array.\n- Handle an input array with a single element, returning a copy of the input array.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n), where n is the length of the input array.\n- Space complexity: O(n), where n is the length of the input array.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-array input or non-integer elements in the input array.\n- Handle negative integer elements in the input array.\n\n### Reliability\n- Avoid index errors while accessing array elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sum of the first and last elements is odd, so the array should be sorted in ascending order\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], 'Failed to sort the array in ascending order when the sum is odd.'\n\n### The sum of the first and last elements is even, so the array should be sorted in descending order\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], 'Failed to sort the array in descending order when the sum is even.'\n\n## Edge Cases\n### The input array is empty, so the function should return an empty array\nassert sort_array([]) == [], 'Failed to handle an empty input array.'\n\n### The input array has a single element, so the function should return a copy of the input array\nassert sort_array([5]) == [5], 'Failed to handle an input array with a single element.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input array contains 10^6 elements in ascending order from 0 to 10^6 - 1\n### The sum of the first and last elements is odd, so the array should be sorted in ascending order\nassert sort_array(list(range(10**6))) == list(range(10**6)), 'Failed to handle large input size.'\n\n### The input array contains 10^6 elements in descending order from 10^6 - 1 to 0\n### The sum of the first and last elements is even, so the array should be sorted in descending order\nassert sort_array(list(range(10**6 - 1, -1, -1))) == list(range(10**6 - 1, -1, -1)), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input array contains negative integers, so the function should still work correctly\nassert sort_array([2, 4, -3, 0, 1, -5, 6]) == [6, 4, 2, 1, 0, -3, -5], 'Failed to handle negative integers in the input array.'\n\n#### The input is not an array, so the function should return an empty array\nassert sort_array('invalid') == [], 'Failed to handle case where the input is not an array.'\n\n#### The input array contains elements that are not integers, so the function should return an empty array\nassert sort_array([2, 4, 'invalid', 0, 1, 5, 6]) == [], 'Failed to handle case where the input array contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sort_array))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/89",
        "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
        "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "entry_point": "encrypt",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(encrypt)",
        "plan": [
            "# 1. Create an empty string to store the encrypted result.\n# 2. Loop through each character in the input string.\n# 3. Check if the character is an alphabet letter.\n# 4. If it is, calculate the new position of the letter by adding 2 multiplied by 2 to its ASCII value.\n# 5. Convert the new position to a character and append it to the encrypted string.\n# 6. If the character is not an alphabet letter, append it to the encrypted string as is.\n# 7. Return the encrypted string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should return the input string encrypted with the alphabet being rotated.\n- Each letter in the input string should be shifted down by two multiplied by two places in the alphabet.\n- Non-alphabetic characters should remain unchanged.\n\n## Edge Cases\n- Handle an empty string as input, returning an empty string.\n- Handle a string with only non-alphabetic characters, returning the same string.\n- Handle a string with only alphabetic characters, returning the encrypted string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string.\n- Space complexity: O(n) where n is the length of the input string.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string input, returning None.\n- Handle uppercase letters in the input string, considering them as well.\n- Handle Unicode characters, considering only alphabetic characters and ignoring non-alphabetic characters.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string is 'hi'\n### Each letter is shifted down by two multiplied by two places in the alphabet\n### The output should be 'lm'\nassert encrypt('hi') == 'lm', 'Failed to encrypt the input string.'\n\n### The input string is 'asdfghjkl'\n### Each letter is shifted down by two multiplied by two places in the alphabet\n### The output should be 'ewhjklnop'\nassert encrypt('asdfghjkl') == 'ewhjklnop', 'Failed to encrypt the input string.'\n\n### The input string is 'gf'\n### Each letter is shifted down by two multiplied by two places in the alphabet\n### The output should be 'kj'\nassert encrypt('gf') == 'kj', 'Failed to encrypt the input string.'\n\n### The input string is 'et'\n### Each letter is shifted down by two multiplied by two places in the alphabet\n### The output should be 'ix'\nassert encrypt('et') == 'ix', 'Failed to encrypt the input string.'\n\n## Edge Cases\n### The input string is empty, so the output should also be empty\nassert encrypt('') == '', 'Failed to handle an empty input string.'\n\n### The input string contains only non-alphabetic characters, so the output should be the same as the input\nassert encrypt('123!@#') == '123!@#', 'Failed to handle a string with only non-alphabetic characters.'\n\n### The input string contains only alphabetic characters, so the output should be the encrypted string\nassert encrypt('abcdefghijklmnopqrstuvwxyz') == 'cdefghijklmnopqrstuvwxyzab', 'Failed to encrypt a string with only alphabetic characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 alphabetic characters, so the output should be the encrypted string\nassert encrypt('a' * 10**6) == 'c' * 10**6, 'Failed to handle large input size.'\n\n### The input string contains 10^6 non-alphabetic characters, so the output should be the same as the input\nassert encrypt('!' * 10**6) == '!' * 10**6, 'Failed to handle large input size with only non-alphabetic characters.'\n\n### The input string contains 10^6 characters, alternating between alphabetic and non-alphabetic characters\n### The output should be the same as the input, as only alphabetic characters are considered for encryption\nassert encrypt('a!' * 10**6) == 'a!' * 10**6, 'Failed to handle large input size with alternating alphabetic and non-alphabetic characters.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return None\nassert encrypt(123) == None, 'Failed to handle a non-string input.'\n\n#### The input string contains uppercase letters, so the function should handle them and return the encrypted string\nassert encrypt('AbCdEfG') == 'CdEfGhI', 'Failed to handle uppercase letters.'\n\n#### The input string contains Unicode characters, so the function should consider only alphabetic characters and ignore non-alphabetic characters\nassert encrypt('\u03b1\u03b2\u03b3\u03b4\u03b5') == '\u03b1\u03b2\u03b3\u03b4\u03b5', 'Failed to handle Unicode characters.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(encrypt))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/90",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
        "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "entry_point": "next_smallest",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(next_smallest)",
        "plan": [
            "# 1. Check if the length of the input list is less than 2. If it is, return None since there is no second smallest element.\n# 2. Remove duplicates from the list using the set() function.\n# 3. Sort the list in ascending order.\n# 4. Return the element at index 1, which is the second smallest element in the list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `lst` as input.\n- It returns an integer or None.\n\n## Expected Behavior\n- The function should return the second smallest element in the input list.\n- If there is no second smallest element (e.g., the input list has less than 2 elements or contains duplicate elements), the function should return None.\n\n## Edge Cases\n- Handle an empty `lst` list, returning None.\n- Handle a list with only one element, returning None.\n- Handle a list with duplicate elements, returning None if all elements are the same.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n), where n is the length of the input list `lst`.\n- Space complexity: O(n), where n is the length of the input list `lst`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input or a list containing non-integer elements.\n\n### Reliability\n- Ensure the function returns correct results for all valid input cases.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The second smallest element in the list is 2\nassert next_smallest([1, 2, 3, 4, 5]) == 2, 'Failed to find the second smallest element.'\n\n### The second smallest element in the list is 2\nassert next_smallest([5, 1, 4, 3, 2]) == 2, 'Failed to find the second smallest element.'\n\n## Edge Cases\n### The input list is empty, so the function should return None\nassert next_smallest([]) == None, 'Failed to handle an empty input list.'\n\n### There is no second smallest element in the list, so the function should return None\nassert next_smallest([1, 1]) == None, 'Failed to handle case where there is no second smallest element.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are the same value\n### Since there is only one unique element, there is no second smallest element and the function should return None\nassert next_smallest([5] * 10**6) == None, 'Failed to handle case where all elements in the list are the same value.'\n\n### The input list contains 10^6 elements with increasing values from 1 to 10^6\n### The second smallest element in the list is 2\nassert next_smallest(list(range(1, 10**6 + 1))) == 2, 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are 1\n### Since there is only one unique element, there is no second smallest element and the function should return None\nassert next_smallest([1] * 10**6) == None, 'Failed to handle case where all elements in the list are the same value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list, so the function should return None\nassert next_smallest('invalid') == None, 'Failed to handle case where the input lst is not a list.'\n\n#### The lst list contains elements that are not integers, so the function should return None\nassert next_smallest([1, 2, 'invalid', 4]) == None, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(next_smallest))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/91",
        "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "entry_point": "is_bored",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(is_bored)",
        "plan": [
            "# 1. Initialize a variable called boredom_count to keep track of the number of boredoms.\n# 2. Split the input string into a list of sentences by using the delimiters '.', '?', and '!'.\n# 3. Loop through each sentence in the list of sentences.\n# 4. Check if the sentence starts with the word \"I\".\n# 5. If it does, increment the boredom_count by 1.\n# 6. Return the final boredom_count."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `S` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should count the number of boredoms in the input string. A boredom is defined as a sentence that starts with the word \"I\". Sentences are delimited by '.', '?', or '!'.\n\n## Edge Cases\n- Handle an empty string as input, returning 0.\n- Handle the case where there are no boredoms in the string, returning 0.\n- Handle multiple boredoms in the string, counting all of them.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely long inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### There are no boredoms in the string, so the function should return 0\nassert is_bored(\"Hello world\") == 0, 'Failed to handle case where there are no boredoms in the string.'\n\n### There is one boredom in the string, so the function should return 1\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1, 'Failed to count the number of boredoms correctly.'\n\n## Edge Cases\n### The input string is empty, so the function should return 0\nassert is_bored(\"\") == 0, 'Failed to handle an empty input string.'\n\n### The entire input string is a boredom, so the function should return 1\nassert is_bored(\"I am bored!\") == 1, 'Failed to handle case where the entire string is a boredom.'\n\n### The input string contains multiple boredoms, so the function should return the correct count\nassert is_bored(\"I am bored! I hate this. I need something to do.\") == 3, 'Failed to count the number of boredoms correctly.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 characters, all of which are the letter 'I'\n### The entire string is a boredom, so the function should return 1\nassert is_bored(\"I\" * 10**6) == 1, 'Failed to handle large input size.'\n\n### The input string contains 10^6 characters, all of which are the letter 'A'\n### There are no boredoms in the string, so the function should return 0\nassert is_bored(\"A\" * 10**6) == 0, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return 0\nassert is_bored(12345) == 0, 'Failed to handle case where the input is not a string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_bored))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/92",
        "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
        "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "entry_point": "any_int",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\ncheck(any_int)",
        "plan": [
            "# 1. Check if all the given numbers are integers using the isinstance() function.\n# 2. If any of the given numbers are not integers, return False.\n# 3. Check if any of the numbers is equal to the sum of the other two numbers.\n# 4. If any such condition is true, return True.\n# 5. If none of the conditions are true, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes three numbers, x, y, and z, as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n- The function should return False in all other cases.\n\n## Edge Cases\n- Handle non-integer input numbers, returning False.\n- Handle all input numbers being the same, returning False.\n- Handle negative input numbers.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input numbers.\n- Handle non-numeric input values.\n- Handle integer overflow.\n- Ensure all possible code paths return a value.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### 5 is equal to the sum of 2 and 7, and all numbers are integers, so the function should return True\nassert any_int(5, 2, 7) == True, 'Failed for the case where one number is equal to the sum of the other two.'\n\n### None of the numbers are equal to the sum of the other two, so the function should return False\nassert any_int(3, 2, 2) == False, 'Failed for the case where none of the numbers are equal to the sum of the other two.'\n\n### -2 is equal to the sum of 3 and 1, and all numbers are integers, so the function should return True\nassert any_int(3, -2, 1) == True, 'Failed for the case where one number is equal to the sum of the other two with negative numbers.'\n\n### None of the numbers are equal to the sum of the other two, so the function should return False\nassert any_int(3.6, -2.2, 2) == False, 'Failed for the case where none of the numbers are integers.'\n\n## Edge Cases\n### All numbers are the same, so the function should return False\nassert any_int(0, 0, 0) == False, 'Failed for the case where all numbers are the same.'\n\n### None of the numbers are equal to the sum of the other two, so the function should return False\nassert any_int(0.5, 1.5, 2.0) == False, 'Failed for the case where none of the numbers are integers.'\n\n### None of the numbers are equal to the sum of the other two, so the function should return False\nassert any_int(10**20, 10**20, 10**20) == False, 'Failed for the case where none of the numbers are integers.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Satisfied if no errors occur across all test cases\n\n## Specific Quality Requirements\n### Robustness\n#### The inputs are not numbers, so the function should return False\nassert any_int('invalid', 1, 2) == False, 'Failed to handle case where inputs are not numbers.'\n\n#### The inputs are not integers, so the function should return False\nassert any_int(1.5, 2.5, 4.0) == False, 'Failed to handle case where inputs are not integers.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(any_int))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/93",
        "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "entry_point": "encode",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(encode)",
        "plan": [
            "# 1. Initialize an empty string to store the encoded message.\n# 2. Loop through each character in the input message.\n# 3. Check if the character is a vowel (a, e, i, o, u) or a consonant.\n# 4. If the character is a vowel, convert it to uppercase, find the index of the vowel in the English alphabet, add 2 to the index, and convert the new index back to a character.\n# 5. If the character is a consonant, swap its case.\n# 6. Append the modified character to the encoded message string.\n# 7. Return the encoded message."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and any other possible errors.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `message` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should encode the input message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\n\n## Edge Cases\n- Handle an empty `message` input, returning an empty string.\n- Handle non-string input, returning an empty string.\n- Handle a message with no vowels, returning the same message with case-swapped letters.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `message`.\n- Space complexity: O(n) where n is the length of the `message`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input or a message containing non-letter characters.\n- Handle case where the encoded message contains non-letter characters.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Swap the case of all letters and replace vowels with the letter 2 places ahead in the English alphabet\n### 't' -> 'T', 'e' -> 'G', 's' -> 'S', 't' -> 'T'\nassert encode('test') == 'TGST', 'Failed to encode the message correctly.'\n\n### Swap the case of all letters and replace vowels with the letter 2 places ahead in the English alphabet\n### 't' -> 'T', 'h' -> 'H', 'i' -> 'K', 's' -> 'S', ' ' -> ' ', 'i' -> 'K', 's' -> 'S', ' ' -> ' ', 'a' -> 'C', ' ' -> ' ', 'm' -> 'G', 'e' -> 'G', 's' -> 'S', 's' -> 'S', 'a' -> 'C', 'g' -> 'G', 'e' -> 'G'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG', 'Failed to encode the message correctly.'\n\n## Edge Cases\n### The input message is empty, so the function should return an empty string\nassert encode('') == '', 'Failed to handle an empty input message.'\n\n### The input is not a string, so the function should return an empty string\nassert encode(123) == '', 'Failed to handle non-string input.'\n\n### The input message has no vowels, so the function should return the same message with case-swapped letters\nassert encode('tst') == 'TST', 'Failed to handle case where the input message has no vowels.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The message contains 10^6 characters, all of which are vowels\n### The encoded message should have all vowels replaced with the letter 'X'\nassert encode('a' * 10**6) == 'X' * 10**6, 'Failed to handle large input size.'\n\n### The message contains 10^6 characters, all of which are non-vowel letters\n### The encoded message should have all letters swapped in case\nassert encode('b' * 10**6) == 'B' * 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input message contains non-letter characters, so the function should handle them and return the encoded message accordingly\nassert encode('123abc!@#') == '123CDE!@#', 'Failed to handle non-letter characters in the input message.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(encode))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/94",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
        "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "entry_point": "skjkasdkd",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\ncheck(skjkasdkd)",
        "plan": [
            "# 1. Initialize a variable `largest_prime` to store the largest prime number found in the list.\n# 2. Loop through each number in the input list.\n# 3. For each number, check if it is prime using a helper function.\n# 4. If the number is prime and larger than the current largest_prime, update the largest_prime variable.\n# 5. After looping through all the numbers, if largest_prime is still 0, return 0 since there are no prime numbers in the list.\n# 6. Convert the largest_prime to a string and loop through each digit.\n# 7. Convert each digit back to an integer and sum them up.\n# 8. Return the sum of the digits of the largest_prime."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `lst` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should find the largest prime value in the list `lst` and return the sum of its digits.\n\n## Edge Cases\n- Handle an empty `lst` list, returning 0.\n- Handle the case where there are no prime numbers in the list, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n * sqrt(m)), where n is the length of `lst` and m is the largest number in `lst`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input or non-integer elements in `lst`.\n\n### Reliability\n- Avoid index errors while accessing `lst` elements.\n- Ensure the accuracy of prime number identification.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The largest prime in the list is 181, and the sum of its digits is 10\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, 'Failed to find the largest prime and calculate the sum of its digits.'\n\n### The largest prime in the list is 4597, and the sum of its digits is 25\nassert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, 'Failed to find the largest prime and calculate the sum of its digits.'\n\n### The largest prime in the list is 5107, and the sum of its digits is 13\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, 'Failed to find the largest prime and calculate the sum of its digits.'\n\n### The largest prime in the list is 71, and the sum of its digits is 11\nassert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, 'Failed to find the largest prime and calculate the sum of its digits.'\n\n### The largest prime in the list is 3, and the sum of its digits is 3\nassert skjkasdkd([0,81,12,3,1,21]) == 3, 'Failed to find the largest prime and calculate the sum of its digits.'\n\n### The largest prime in the list is 7, and the sum of its digits is 7\nassert skjkasdkd([0,8,1,2,1,7]) == 7, 'Failed to find the largest prime and calculate the sum of its digits.'\n\n## Edge Cases\n### The input list is empty, so the function should return 0\nassert skjkasdkd([]) == 0, 'Failed to handle an empty input list.'\n\n### There are no prime numbers in the list, so the function should return 0\nassert skjkasdkd([4, 8, 12, 16, 20]) == 0, 'Failed to handle the case where there are no prime numbers in the list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are non-prime numbers\n### The function should return 0 since there are no prime numbers in the list\nassert skjkasdkd([4] * 10**6) == 0, 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are prime numbers\n### The largest prime in the list is 999983, and the sum of its digits is 53\nassert skjkasdkd([999983] * 10**6) == 53, 'Failed to handle large input size with all prime numbers.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list of integers, so the function should return 0\nassert skjkasdkd('invalid') == 0, 'Failed to handle case where the input lst is not a list of integers.'\n\n#### The lst input contains elements that are not integers, so the function should return 0\nassert skjkasdkd([1, 2, 'invalid', 4]) == 0, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(skjkasdkd))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/95",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
        "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "entry_point": "check_dict_case",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\ncheck(check_dict_case)",
        "plan": [
            "# 1. Check if the dictionary is empty. If it is, return False.\n# 2. Create two empty sets, one for lower case keys and one for upper case keys.\n# 3. Loop through the keys in the dictionary.\n# 4. Check if the key is a string. If it is, add it to the corresponding set based on its case.\n# 5. If both sets have elements, return False (as there are keys with both lower and upper case).\n# 6. If either set is not empty, return True (as all keys have the same case).\n# 7. If both sets are empty, return False (as there are no keys in the dictionary).\n# 8. The function returns True if all keys are strings in lower case or all keys are strings in upper case, and False otherwise."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, key errors, and any other errors that might occur.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a dictionary as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if all keys in the dictionary are either strings in lower case or strings in upper case.\n- If the dictionary is empty, the function should return False.\n\n## Edge Cases\n- Handle a non-dictionary input, returning False.\n- Handle dictionaries with keys that are not strings, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the number of keys in the dictionary.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large dictionaries, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string keys in the dictionary.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### All keys are lowercase strings, so the function should return True\nassert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True, 'Failed to return True when all keys are lowercase strings.'\n\n### The dictionary contains keys that are both lowercase and uppercase strings,\n### so the function should return False\nassert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False, 'Failed to return False when keys are a mix of lowercase and uppercase strings.'\n\n### The dictionary contains keys that are integers, so the function should return False\nassert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False, 'Failed to return False when keys are not strings.'\n\n### The dictionary contains keys that are a mix of lowercase strings and other types,\n### so the function should return False\nassert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False, 'Failed to return False when keys are a mix of lowercase strings and other types.'\n\n### All keys are uppercase strings, so the function should return True\nassert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True, 'Failed to return True when all keys are uppercase strings.'\n\n## Edge Cases\n### The input is an empty dictionary, so the function should return False\nassert check_dict_case({}) == False, 'Failed to handle an empty dictionary input.'\n\n### The input is not a dictionary, so the function should return False\nassert check_dict_case(\"invalid\") == False, 'Failed to handle a non-dictionary input.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The dictionary contains 10^6 elements with keys that are all lowercase strings\n### The function should return True\nassert check_dict_case({str(i): \"value\" for i in range(1, 10**6 + 1)}) == True, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The dictionary contains keys that are not strings, so the function should return False\nassert check_dict_case({\"a\": \"apple\", 8: \"banana\"}) == False, 'Failed to handle case where keys are not strings.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(check_dict_case))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/96",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "entry_point": "count_up_to",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ncheck(count_up_to)",
        "plan": [
            "# 1. Create an empty list to store the prime numbers.\n# 2. Loop through the numbers from 2 to n-1.\n# 3. For each number, check if it is prime by looping through the numbers from 2 to the square root of the current number.\n# 4. If the number is divisible by any of these numbers, it is not prime and we move on to the next number.\n# 5. If the number is not divisible by any of these numbers, it is prime and we add it to the list of prime numbers.\n# 6. Return the list of prime numbers."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a non-negative integer `n` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return an array of the first `n` prime numbers that are less than `n`.\n- The returned list should be in ascending order.\n\n## Edge Cases\n- Handle the case where `n` is 0 or 1, returning an empty list.\n- Handle the case where `n` is negative, returning an empty list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n\u221an) where n is the input `n`.\n- Space complexity: O(n) where n is the input `n`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n`.\n- Handle negative values for `n`.\n\n### Reliability\n- Avoid index errors while accessing list elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The first 5 prime numbers less than 5 are [2, 3]\nassert count_up_to(5) == [2, 3], 'Failed to find the first n prime numbers.'\n\n### The first 10 prime numbers less than 11 are [2, 3, 5, 7]\nassert count_up_to(11) == [2, 3, 5, 7], 'Failed to find the first n prime numbers.'\n\n### There are no prime numbers less than 0, so the function should return an empty list\nassert count_up_to(0) == [], 'Failed to handle the case where n is 0.'\n\n### The first 10 prime numbers less than 20 are [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19], 'Failed to find the first n prime numbers.'\n\n### There are no prime numbers less than 1, so the function should return an empty list\nassert count_up_to(1) == [], 'Failed to handle the case where n is 1.'\n\n### The first 7 prime numbers less than 18 are [2, 3, 5, 7, 11, 13, 17]\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17], 'Failed to find the first n prime numbers.'\n\n## Edge Cases\n### There are no prime numbers less than 0, so the function should return an empty list\nassert count_up_to(-5) == [], 'Failed to handle the case where n is negative.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input n is a large prime number (10^9 + 7)\n### The first n prime numbers less than n are [2, 3, 5, 7, ..., 999999937]\nassert count_up_to(10**9 + 7) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089"
        ]
    },
    {
        "id": "HumanEval/97",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
        "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return abs(a % 10) * abs(b % 10)\n",
        "entry_point": "multiply",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\ncheck(multiply)",
        "plan": [
            "# 1. Convert both integers a and b to strings.\n# 2. Get the last character (unit digit) of each string.\n# 3. Convert the unit digits back to integers.\n# 4. Multiply the two unit digits together.\n# 5. Return the result of the multiplication."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two integers `a` and `b` as input.\n- It returns an integer as output.\n\n## Expected Behavior\n- The function should return the product of the unit digits of `a` and `b`.\n\n## Edge Cases\n- Handle non-integer `a` and `b` inputs.\n- Handle large integers `a` and `b` that may cause arithmetic overflow.\n- Handle negative integers `a` and `b`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer inputs for `a` and `b`.\n- Handle arithmetic overflow.\n- Handle negative integers `a` and `b`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The unit digits of 148 and 412 are 8 and 2 respectively, and their product is 16\nassert multiply(148, 412) == 16, 'Failed to multiply the unit digits correctly.'\n\n### The unit digits of 19 and 28 are 9 and 8 respectively, and their product is 72\nassert multiply(19, 28) == 72, 'Failed to multiply the unit digits correctly.'\n\n### The unit digits of 2020 and 1851 are 0 and 1 respectively, and their product is 0\nassert multiply(2020, 1851) == 0, 'Failed to multiply the unit digits correctly.'\n\n### The unit digits of 14 and -15 are 4 and 5 respectively, and their product is 20\nassert multiply(14, -15) == 20, 'Failed to multiply the unit digits correctly.'\n\n## Edge Cases\n### The unit digits of 0 and 0 are both 0, and their product is 0\nassert multiply(0, 0) == 0, 'Failed to handle case where both inputs are 0.'\n\n### The unit digits of 1234567890 and 9876543210 are 0 and 0 respectively, and their product is 0\nassert multiply(1234567890, 9876543210) == 0, 'Failed to handle case where both inputs have all digits as 0.'\n\n### The unit digits of 10**6 and 10**6 are 0 and 0 respectively, and their product is 0\nassert multiply(10**6, 10**6) == 0, 'Failed to handle case where both inputs are large numbers with all digits as 0.'\n\n### The unit digits of -10 and 20 are 0 and 0 respectively, and their product is 0\nassert multiply(-10, 20) == 0, 'Failed to handle case where one of the inputs is negative.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The inputs are large numbers with multiple digits\n### The function should return the product of the unit digits quickly\nassert multiply(9876543210, 1234567890) == 0, 'Failed to handle large input size.'\n\n### The inputs are large numbers with multiple digits, both having all digits as 0\n### The function should return the product of the unit digits quickly\nassert multiply(1234567890, 9876543210) == 0, 'Failed to handle large input size with all digits as 0.'\n\n## Specific Quality Requirements\n### Robustness\n#### The inputs are not integers, so the function should raise a TypeError\ntry:\n    multiply('invalid', 10)\nexcept TypeError:\n    pass\nelse:\n    raise AssertionError('Failed to handle case where the input a is not an integer.')\n\n#### The inputs are not integers, so the function should raise a TypeError\ntry:\n    multiply(10, 'invalid')\nexcept TypeError:\n    pass\nelse:\n    raise AssertionError('Failed to handle case where the input b is not an integer.')\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(multiply))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/98",
        "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
        "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "entry_point": "count_upper",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(count_upper)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the number of uppercase vowels in even indices.\n# 2. Loop through the string s using a range starting from index 0 with a step of 2.\n# 3. Check if the current character at the even index is an uppercase vowel (A, E, I, O, U).\n# 4. If it is, increment the count variable.\n# 5. Return the final count of uppercase vowels in even indices."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and other potential errors.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should count the number of uppercase vowels in even indices of the string `s`.\n\n## Edge Cases\n- Handle an empty string input, returning 0.\n- Handle cases where the string does not contain any uppercase vowels in even indices, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the string `s`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely long strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string input.\n- Handle non-alphabetic characters in the string.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### There is 1 uppercase vowel 'E' at even index 4\nassert count_upper('aBCdEf') == 1, 'Failed to count the number of uppercase vowels in even indices.'\n\n### There are no uppercase vowels in even indices\nassert count_upper('abcdefg') == 0, 'Failed to handle case where there are no uppercase vowels in even indices.'\n\n### There are no uppercase vowels in even indices\nassert count_upper('dBBE') == 0, 'Failed to handle case where there are no uppercase vowels in even indices.'\n\n## Edge Cases\n### The input string is empty, so the function should return 0\nassert count_upper('') == 0, 'Failed to handle an empty input string.'\n\n### There are no uppercase vowels in even indices\nassert count_upper('12345') == 0, 'Failed to handle case where the input string does not contain any uppercase vowels in even indices.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has a length of 10^6 and all characters are uppercase vowels\n### All uppercase vowels are at even indices, so the expected count is 10^6 / 2 = 500,000\nassert count_upper('A' * 10**6) == 500000, 'Failed to handle large input size.'\n\n### The input string has a length of 10^6 and all characters are lowercase vowels\n### There are no uppercase vowels in even indices, so the expected count is 0\nassert count_upper('a' * 10**6) == 0, 'Failed to handle large input size when there are no uppercase vowels in even indices.'\n\n### The input string has a length of 10^6 and all characters are consonants\n### There are no uppercase vowels in even indices, so the expected count is 0\nassert count_upper('z' * 10**6) == 0, 'Failed to handle large input size when there are no uppercase vowels in even indices.'\n\n### The input string has a length of 10^6 and all characters are digits\n### There are no uppercase vowels in even indices, so the expected count is 0\nassert count_upper('1' * 10**6) == 0, 'Failed to handle large input size when there are no uppercase vowels in even indices.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return 0\nassert count_upper(12345) == 0, 'Failed to handle case where the input is not a string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(count_upper))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/99",
        "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "entry_point": "closest_integer",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\ncheck(closest_integer)",
        "plan": [
            "# 1. Convert the input value to a float.\n# 2. Check if the float value is positive or negative.\n# 3. If the float value is positive, use the math.ceil() function to round up to the nearest integer.\n# 4. If the float value is negative, use the math.floor() function to round down to the nearest integer.\n# 5. Return the rounded integer value."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `value` representing a number as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the closest integer to the given number.\n- If the number is equidistant from two integers, it should round away from zero.\n\n## Edge Cases\n- Handle non-string `value` input, returning None.\n- Handle empty string input, returning None.\n- Handle non-numeric characters in the input value, returning None.\n- Handle the case where the input value is already an integer, returning the same value.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string `value` input or an empty string.\n- Handle non-numeric characters in the input value.\n- Handle the case where the input value is already an integer.\n\n### Reliability\n- Avoid type errors while converting the input value to a float.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The closest integer to 10 is 10\nassert closest_integer(\"10\") == 10, 'Failed to find the closest integer.'\n\n### The closest integer to 15.3 is 15\nassert closest_integer(\"15.3\") == 15, 'Failed to find the closest integer.'\n\n### The closest integer to -14.5 is -15\nassert closest_integer(\"-14.5\") == -15, 'Failed to handle case where the number is negative and equidistant from two integers.'\n\n### The closest integer to 14.5 is 15\nassert closest_integer(\"14.5\") == 15, 'Failed to handle case where the number is positive and equidistant from two integers.'\n\n## Edge Cases\n### The input value is already an integer, so the function should return the same integer\nassert closest_integer(\"100\") == 100, 'Failed to handle case where the input value is already an integer.'\n\n### The input value is an empty string, so the function should return None\nassert closest_integer(\"\") is None, 'Failed to handle case where the input value is an empty string.'\n\n### The input value is not a string, so the function should return None\nassert closest_integer(10) is None, 'Failed to handle case where the input value is not a string.'\n\n### The input value contains non-numeric characters, so the function should return None\nassert closest_integer(\"15a.3\") is None, 'Failed to handle case where the input value contains non-numeric characters.'\n\n### The input value is a float represented in scientific notation, so the function should return the closest integer\nassert closest_integer(\"1.5e2\") == 150, 'Failed to handle case where the input value is a float represented in scientific notation.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Satisfied if the function executes in constant time and space for any input size and completes within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n#### The input value is not a string, so the function should return None\nassert closest_integer(10) is None, 'Failed to handle case where the input value is not a string.'\n\n#### The input value is an empty string, so the function should return None\nassert closest_integer(\"\") is None, 'Failed to handle case where the input value is an empty string.'\n\n#### The input value contains non-numeric characters, so the function should return None\nassert closest_integer(\"15a.3\") is None, 'Failed to handle case where the input value contains non-numeric characters.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(closest_integer))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/100",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [n + 2*i for i in range(n)]\n",
        "entry_point": "make_a_pile",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(make_a_pile)",
        "plan": [
            "# 1. Initialize an empty list to store the number of stones in each level.\n# 2. Append the initial number of stones, which is equal to n, to the list.\n# 3. Loop through the range from 1 to n-1.\n# 4. Inside the loop, check if n is odd or even.\n# 5. If n is odd, calculate the number of stones in the next level by adding 2 to the previous level's number of stones.\n# 6. If n is even, calculate the number of stones in the next level by adding 1 to the previous level's number of stones.\n# 7. Append the calculated number of stones to the list.\n# 8. Return the list of stones in each level."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive integer `n` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a list where each element represents the number of stones in each level of the pile.\n- The number of stones in the first level is equal to `n`.\n- The number of stones in the next level is determined by the following rules:\n    - If `n` is odd, the number of stones in the next level is the next odd number.\n    - If `n` is even, the number of stones in the next level is the next even number.\n\n## Edge Cases\n- Handle a `n` value of 0, returning an empty list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the value of `n`.\n- Space complexity: O(n) where n is the value of `n`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `n` input or negative `n`.\n\n### Reliability\n- Avoid arithmetic errors when calculating the number of stones in the next level.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### For n = 3, the pile of stones will have 3 levels with 3, 5, and 7 stones, respectively.\nassert make_a_pile(3) == [3, 5, 7], 'Failed for general case where n is odd.'\n\n### For n = 4, the pile of stones will have 4 levels with 4, 6, 8, and 10 stones, respectively.\nassert make_a_pile(4) == [4, 6, 8, 10], 'Failed for general case where n is even.'\n\n## Edge Cases\n### For n = 0, the pile will be empty, so the function should return an empty list.\nassert make_a_pile(0) == [], 'Failed to handle edge case where n is 0.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The value of n is 10^6, so the pile will have 10^6 levels.\n### The expected output is a list of length 10^6, which should be generated within the time limit.\nassert len(make_a_pile(10**6)) == 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input n is not a positive integer, so the function should return an empty list.\nassert make_a_pile(-10) == [], 'Failed to handle case where the input n is not a positive integer.'\n\n### Reliability\n#### The calculation of the number of stones in the next level should be correct.\nassert make_a_pile(7) == [7, 9, 11, 13, 15, 17, 19], 'Failed to calculate the number of stones in the next level correctly.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(make_a_pile))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/101",
        "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "entry_point": "words_string",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\ncheck(words_string)",
        "plan": [
            "# 1. Split the input string by commas and spaces to separate the words.\n# 2. Return the resulting array of words."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding index errors and handling invalid input.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should split the input string into words, using commas and spaces as separators.\n- It should return an array of the resulting words.\n\n## Edge Cases\n- Handle an empty string input, returning an empty list.\n- Handle the case where `s` contains only commas and/or spaces, returning an empty list.\n- Handle the case where `s` contains consecutive commas and/or spaces, returning an empty list.\n- Handle the case where `s` contains only one word, returning a list with that word.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string `s`.\n- Space complexity: O(n) where n is the length of the input string `s`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n- Handle invalid characters in the input string, such as special characters or numbers mixed with words.\n- Handle leading and trailing spaces in the input string.\n- Handle spaces or commas as the first or last character in the input string.\n\n### Reliability\n- Ensure the function correctly splits the input string into words, regardless of the number and type of separators.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string contains words separated by commas and spaces\n### The function should split the string and return an array of the words\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"], 'Failed to split the string into words.'\n\n### The input string contains words separated by commas\n### The function should split the string and return an array of the words\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], 'Failed to split the string into words.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty list\nassert words_string(\"\") == [], 'Failed to handle an empty input string.'\n\n### The input string contains only spaces, so the function should return an empty list\nassert words_string(\"   \") == [], 'Failed to handle a string with only spaces.'\n\n### The input string contains only commas, so the function should return an empty list\nassert words_string(\",,,\") == [], 'Failed to handle a string with only commas.'\n\n### The input string contains consecutive commas and spaces, so the function should return an empty list\nassert words_string(\"Hi,  ,my,   ,name, \") == [], 'Failed to handle consecutive commas and spaces.'\n\n### The input string contains only one word, so the function should return a list with that word\nassert words_string(\"Hello\") == [\"Hello\"], 'Failed to handle a string with only one word.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 words separated by commas and spaces\n### The function should split the string and return an array of the words\nassert words_string(\"word1, word2, word3, ..., word999999, word1000000\") == ['word1', 'word2', 'word3', '...', 'word999999', 'word1000000'], 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty list\nassert words_string(123) == [], 'Failed to handle case where the input is not a string.'\n\n#### The input string contains special characters, so the function should return an empty list\nassert words_string(\"Hello #World!\") == [], 'Failed to handle case where the input string contains special characters.'\n\n#### The input string contains numbers mixed with words, so the function should return an empty list\nassert words_string(\"Hello 123 World\") == [], 'Failed to handle case where the input string contains numbers mixed with words.'\n\n#### The input string has leading and trailing spaces, so the function should remove them and return the array of words\nassert words_string(\"  Hello, my name is John  \") == ['Hello', 'my', 'name', 'is', 'John'], 'Failed to handle leading and trailing spaces.'\n\n#### The input string has spaces and commas as the first or last character, so the function should remove them and return the array of words\nassert words_string(\",Hello, my name is John\") == ['Hello', 'my', 'name', 'is', 'John'], 'Failed to handle commas as the first character.'\nassert words_string(\"Hello, my name is John,\") == ['Hello', 'my', 'name', 'is', 'John'], 'Failed to handle commas as the last character.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(words_string))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/102",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
        "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "entry_point": "choose_num",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\ncheck(choose_num)",
        "plan": [
            "# 1. Initialize a variable to keep track of the biggest even integer number found.\n# 2. Loop through each number in the range from x to y (inclusive).\n# 3. Check if the current number is even and greater than the current biggest even number.\n# 4. If it is, update the value of the biggest even number.\n# 5. After the loop, check if a biggest even number was found.\n# 6. If a biggest even number was found, return it.\n# 7. If no biggest even number was found, return -1."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two positive integers `x` and `y` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the biggest even integer number that is in the range `[x, y]` inclusive.\n- If there is no such number, the function should return -1.\n\n## Edge Cases\n- Handle the case where `x` is greater than `y`, returning -1.\n- Handle the case where there are no even numbers in the range `[x, y]`, returning -1.\n- Handle the case where `x` and `y` are both odd numbers, returning -1.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the number of integers in the range `[x, y]`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-positive integer inputs for `x` and `y`.\n- Handle non-integer inputs for `x` and `y`.\n\n### Reliability\n- Ensure the function returns the correct output for all valid inputs.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The biggest even number in the range [12, 15] is 14\nassert choose_num(12, 15) == 14, 'Failed to find the biggest even number in the range.'\n\n### There are no even numbers in the range [13, 12]\nassert choose_num(13, 12) == -1, 'Failed to handle case where there are no even numbers in the range.'\n\n## Edge Cases\n### The range [5, 5] contains only one number, which is odd\nassert choose_num(5, 5) == -1, 'Failed to handle case where the range contains only one number, which is odd.'\n\n### The range [3, 9] contains the even numbers [4, 6, 8]\n### The biggest even number in the range is 8\nassert choose_num(3, 9) == 8, 'Failed to handle case where there are multiple even numbers in the range.'\n\n### The range [10, 12] contains the even number 10\n### The biggest even number in the range is 10\nassert choose_num(10, 12) == 10, 'Failed to handle case where the range contains only one even number.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The range [1, 10^6] contains 10^6 numbers, all of which are odd\n### Therefore, there are no even numbers in the range and the function should return -1\nassert choose_num(1, 10**6) == -1, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input `x` is not a positive number, so the function should return -1\nassert choose_num(-5, 10) == -1, 'Failed to handle case where the input `x` is not a positive number.'\n\n#### The input `y` is not a positive number, so the function should return -1\nassert choose_num(5, -10) == -1, 'Failed to handle case where the input `y` is not a positive number.'\n\n#### The inputs `x` and `y` are not positive numbers, so the function should return -1\nassert choose_num(-5, -10) == -1, 'Failed to handle case where both inputs `x` and `y` are not positive numbers.'\n\n#### The input `x` is not an integer, so the function should return -1\nassert choose_num(5.5, 10) == -1, 'Failed to handle case where the input `x` is not an integer.'\n\n#### The input `y` is not an integer, so the function should return -1\nassert choose_num(5, 10.5) == -1, 'Failed to handle case where the input `y` is not an integer.'\n\n#### The inputs `x` and `y` are not integers, so the function should return -1\nassert choose_num(5.5, 10.5) == -1, 'Failed to handle case where both inputs `x` and `y` are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(choose_num))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/103",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
        "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "entry_point": "rounded_avg",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\ncheck(rounded_avg)",
        "plan": [
            "# 1. Check if n is greater than m. If it is, return -1.\n# 2. Calculate the average of the integers from n through m.\n# 3. Round the average to the nearest integer.\n# 4. Convert the rounded average to binary format using the bin() function.\n# 5. Return the binary representation of the rounded average."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two positive integers `n` and `m` as input.\n- It returns a binary string.\n\n## Expected Behavior\n- If `n` is greater than `m`, the function should return -1.\n- The function should compute the average of the integers from `n` through `m` (including `n` and `m`).\n- The average should be rounded to the nearest integer.\n- The rounded average should be converted to a binary string.\n\n## Edge Cases\n- Handle non-positive `n` or `m` inputs, returning -1.\n- Handle the case where the average is a fraction, rounding to the nearest integer.\n- Handle the case where the average is exactly halfway between two integers, rounding to the nearest even integer.\n- Handle the case where `n` is equal to `m`, returning the binary representation of that number.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `n` or `m` inputs.\n- Handle non-positive integer `n` or `m` inputs.\n- Handle large integers where overflow may occur.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The average of the integers from 1 through 5 is 3, which is \"0b11\" in binary representation\nassert rounded_avg(1, 5) == \"0b11\", 'Failed to compute the rounded average and convert it to binary.'\n\n### n is greater than m, so the function should return -1\nassert rounded_avg(7, 5) == -1, 'Failed to handle case where n is greater than m.'\n\n### The average of the integers from 10 through 20 is 15, which is \"0b1111\" in binary representation\nassert rounded_avg(10, 20) == \"0b1111\", 'Failed to compute the rounded average and convert it to binary.'\n\n### The average of the integers from 20 through 33 is 26, which is \"0b11010\" in binary representation\nassert rounded_avg(20, 33) == \"0b11010\", 'Failed to compute the rounded average and convert it to binary.'\n\n## Edge Cases\n### n is greater than m, so the function should return -1\nassert rounded_avg(5, 1) == -1, 'Failed to handle case where n is greater than m.'\n\n### The average of the single integer 5 is 5, which is \"0b101\" in binary representation\nassert rounded_avg(5, 5) == \"0b101\", 'Failed to handle case where n is equal to m.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The inputs are the maximum positive integers, so the function should return the result within a reasonable time\nassert rounded_avg(10**9, 10**9) == \"0b11110100001001000000\", 'Failed to handle large inputs within the required time.'\n\n## Specific Quality Requirements\n### Robustness\n#### The n input is not a positive integer, so the function should return -1\nassert rounded_avg('invalid', 10) == -1, 'Failed to handle case where the input n is not a positive integer.'\n\n#### The m input is not a positive integer, so the function should return -1\nassert rounded_avg(10, 'invalid') == -1, 'Failed to handle case where the input m is not a positive integer.'\n\n#### The n input is a negative integer, so the function should return -1\nassert rounded_avg(-5, 10) == -1, 'Failed to handle case where the input n is negative.'\n\n#### The m input is a negative integer, so the function should return -1\nassert rounded_avg(10, -5) == -1, 'Failed to handle case where the input m is negative.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(rounded_avg))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/104",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "entry_point": "unique_digits",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(unique_digits)",
        "plan": [
            "# 1. Create an empty list to store the unique numbers without any even digits.\n# 2. Loop through each number in the input list.\n# 3. Convert each number to a string to easily access its individual digits.\n# 4. Check if any of the digits in the number are even. If not, add the number to the empty list.\n# 5. Sort the list in increasing order.\n# 6. Return the sorted list of unique numbers without any even digits."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of positive integers `x` as input.\n- It returns a sorted list of positive integers.\n\n## Expected Behavior\n- The function should return a list of all elements from `x` that do not contain any even digits.\n- The returned list should be sorted in increasing order.\n\n## Edge Cases\n- Handle an empty `x` list, returning an empty list.\n- Handle the case where no elements in `x` satisfy the condition, returning an empty list.\n- Handle multiple elements with the same value, returning any of them.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n * m) where n is the length of the `x` list and m is the average number of digits in each element of the list.\n- Space complexity: O(k) where k is the length of the returned list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `x` input or non-integer elements in the `x` list.\n- Handle negative integers in the `x` list.\n\n### Reliability\n- Avoid index errors while accessing `x` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The elements that do not contain any even digit are [1, 15, 33]\n### The function should return a sorted list in increasing order\nassert unique_digits([15, 33, 1422, 1]) == [1, 15, 33], 'Failed to find the elements that do not contain any even digit.'\n\n### None of the elements in the list have any even digits\n### The function should return an empty list\nassert unique_digits([152, 323, 1422, 10]) == [], 'Failed to handle case where no elements satisfy the condition.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert unique_digits([]) == [], 'Failed to handle an empty input list.'\n\n### All the elements in the list have even digits, so the function should return an empty list\nassert unique_digits([2, 4, 6, 8]) == [], 'Failed to handle case where all elements have even digits.'\n\n### All the elements in the list have odd digits, so the function should return a sorted list in increasing order\nassert unique_digits([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9], 'Failed to handle case where all elements have odd digits.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The x list contains 10^6 elements with increasing values from 1 to 10^6\n### All the elements in the list have odd digits, so the function should return a sorted list in increasing order\nassert unique_digits(list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The x list contains 10^6 elements with increasing values from 1 to 10^6\n### All the elements in the list have even digits, so the function should return an empty list\nassert unique_digits(list(range(2, 10**6 + 1, 2))) == [], 'Failed to handle large input size with all elements having even digits.'\n\n### The x list contains 10^6 elements with the same value of 1\n### The elements do not have any even digits, so the function should return [1]\nassert unique_digits([1] * 10**6) == [1], 'Failed to handle large input size with all elements having the same value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The x input is not a list of positive integers, so the function should return an empty list\nassert unique_digits('invalid') == [], 'Failed to handle case where the input x is not a list of positive integers.'\n\n#### The x list contains elements that are not positive integers, so the function should return an empty list\nassert unique_digits([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not positive integers.'\n\n#### The x list contains negative integers, so the function should return an empty list\nassert unique_digits([-1, 2, 3, 4, 5]) == [], 'Failed to handle case where the input list contains negative integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(unique_digits))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/105",
        "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
        "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "entry_point": "by_length",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\ncheck(by_length)",
        "plan": [
            "# 1. Filter out any numbers in the array that are not between 1 and 9 (inclusive).\n# 2. Sort the filtered array in ascending order.\n# 3. Reverse the sorted array.\n# 4. Create a dictionary to map each digit to its corresponding name: {1: \"One\", 2: \"Two\", ..., 9: \"Nine\"}.\n# 5. Create a new list to store the corresponding names for each digit in the reversed array.\n# 6. Iterate through the reversed array and replace each digit with its corresponding name using the dictionary.\n# 7. Return the new list of names."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should sort the integers in `arr` that are between 1 and 9 (inclusive).\n- The function should reverse the resulting array.\n- The function should replace each digit in the reversed array with its corresponding name: \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n- The function should return the list of names.\n\n## Edge Cases\n- Handle an empty `arr`, returning an empty list.\n- Handle an `arr` with no integers between 1 and 9, returning an empty list.\n- Handle an `arr` with strange numbers (e.g., negative numbers, numbers greater than 9), ignoring them and only considering integers between 1 and 9.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n) where n is the length of the `arr` list.\n- Space complexity: O(n) where n is the length of the `arr` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input or non-integer elements in the `arr` list.\n- Handle invalid input such as characters or floating-point numbers in the `arr` list.\n\n### Reliability\n- Avoid index errors while accessing `arr` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The arr list contains integers between 1 and 9 (inclusive)\n### The sorted, reversed, and replaced array is [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"], 'Failed to sort, reverse, and replace the array elements.'\n\n### The arr list is empty, so the function should return an empty list\nassert by_length([]) == [], 'Failed to handle an empty input list.'\n\n### The arr list contains strange numbers (-1 and 55)\n### The sorted, reversed, and replaced array is [\"One\"]\nassert by_length([1, -1, 55]) == [\"One\"], 'Failed to handle case where the arr list contains strange numbers.'\n\n## Edge Cases\n### The arr list contains only integers less than 1 or greater than 9, so the function should return an empty list\nassert by_length([10, 0, -5, 100, -100]) == [], 'Failed to handle case where no integers between 1 and 9 are present in the arr list.'\n\n### The arr list contains only integers between 1 and 9 (inclusive), but they are not sorted\n### The sorted, reversed, and replaced array is [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert by_length([4, 2, 9, 1, 3, 8, 7, 6, 5]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"], 'Failed to sort, reverse, and replace the array elements when the array is not sorted.'\n\n### The arr list contains only integers between 1 and 9 (inclusive), but they are all the same\n### The sorted, reversed, and replaced array is [\"One\"]\nassert by_length([2, 2, 2, 2, 2]) == [\"One\"], 'Failed to handle case where all elements in the arr list are the same.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The arr list contains 10^6 elements with random integers between 1 and 9 (inclusive)\n### The sorted, reversed, and replaced array is [\"Nine\", \"Eight\", \"Seven\", ..., \"One\"]\nassert by_length([9] * 10**6) == [\"Nine\"] * 10**6, 'Failed to handle large input size.'\n\n### The arr list contains 10^6 elements, all of which are 10^6\n### Since 10^6 is not between 1 and 9 (inclusive), the resulting array should be empty\nassert by_length([10**6] * 10**6) == [], 'Failed to handle case where the arr list contains only strange numbers.'\n\n## Specific Quality Requirements\n### Robustness\n#### The arr input is not a list, so the function should return an empty list\nassert by_length('invalid') == [], 'Failed to handle case where the input arr is not a list.'\n\n#### The arr list contains elements that are not integers, so the function should return an empty list\nassert by_length([1, 2, 'invalid', 4]) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(by_length))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/106",
        "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "entry_point": "f",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\ncheck(f)",
        "plan": [
            "# 1. Create an empty list to store the result.\n# 2. Loop through the range from 1 to n.\n# 3. Check if the current index i is even.\n# 4. If i is even, calculate the factorial of i using a helper function, and append it to the result list.\n# 5. If i is odd, calculate the sum of numbers from 1 to i using a helper function, and append it to the result list.\n# 6. Return the result list.\n\n# Helper functions:\n# - factorial(n): Calculate the factorial of a number n by multiplying all numbers from 1 to n.\n# - sum_numbers(n): Calculate the sum of numbers from 1 to n by using the formula (n * (n + 1)) / 2."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a list of size `n` where the value of the element at index `i` is the factorial of `i` if `i` is even, or the sum of numbers from 1 to `i` otherwise.\n- The index `i` starts from 1.\n- The factorial of `i` is the multiplication of the numbers from 1 to `i`.\n\n## Edge Cases\n- Handle negative input `n`, returning an empty list.\n- Handle a zero input `n`, returning an empty list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the input `n`.\n- Space complexity: O(n).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-integer input `n`.\n\n### Reliability\n- Avoid arithmetic operation errors while calculating factorials or sums.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input is 5, so the function should return [1, 2, 6, 24, 15]\nassert f(5) == [1, 2, 6, 24, 15], 'Failed to generate the list correctly.'\n\n### The input is 1, so the function should return [1]\nassert f(1) == [1], 'Failed to handle case where n is 1.'\n\n### The input is 10, so the function should return [1, 2, 6, 24, 15, 720, 0, 0, 0, 0]\n### The factorial of 10 is 3,628,800, which exceeds the maximum value that can be represented by an integer\n### Therefore, the factorial is represented as 0 in the list\nassert f(10) == [1, 2, 6, 24, 15, 720, 0, 0, 0, 0], 'Failed to handle case where the factorial exceeds the maximum integer value.'\n\n## Edge Cases\n### The input is 0, so the function should return an empty list\nassert f(0) == [], 'Failed to handle case where n is 0.'\n\n### The input is -5, so the function should return an empty list\nassert f(-5) == [], 'Failed to handle case where n is negative.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input is 10^6\n### The function should return a list of size 10^6 within 5 seconds\nimport time\nstart_time = time.time()\nresult = f(10**6)\nend_time = time.time()\nexecution_time = end_time - start_time\nassert len(result) == 10**6, 'Failed to generate a list of size 10^6.'\nassert execution_time < 5, 'Failed to meet performance requirements for input size 10^6.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return an empty list\nassert f('invalid') == [], 'Failed to handle case where the input n is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(f))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/107",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
        "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "entry_point": "even_odd_palindrome",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(even_odd_palindrome)",
        "plan": [
            "# 1. Initialize variables count_even and count_odd to 0.\n# 2. Loop through the range from 1 to n (inclusive).\n# 3. Convert each number to a string and check if it is a palindrome.\n# 4. If it is a palindrome, increment the corresponding count (count_even for even palindromes, count_odd for odd palindromes).\n# 5. Return a tuple with count_even and count_odd as the elements."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive integer `n` as input.\n- It returns a tuple of two integers.\n\n## Expected Behavior\n- The function should count the number of even and odd integer palindromes within the range (1, n) inclusive.\n- It should return a tuple where the first element is the count of even palindromes and the second element is the count of odd palindromes.\n\n## Constraints\n- The input integer `n` will be between 1 and 1000 (inclusive).\n\n## Edge Cases\n- Handle the case where n is 1, returning (0, 1) as there is only one palindrome (1) and it is odd.\n- Handle the case where n is 2, returning (1, 1) as there are two palindromes (1 and 2), one even and one odd.\n- Handle the case where n is a large number close to the upper constraint (1000), ensuring that the function executes within a reasonable time frame.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^2) where n is the input integer `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n` and return an error or default value.\n- Ensure that the function handles the edge cases mentioned above correctly.\n- Validate the input range for `n` to ensure it falls within the specified constraints.\n\n### Reliability\n- Avoid index errors while looping through the range (1, n).\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input is 3, so there is one even palindrome (2) and two odd palindromes (1, 3)\nassert even_odd_palindrome(3) == (1, 2), 'Failed to count even and odd palindromes correctly.'\n\n### The input is 12, so there are four even palindromes (2, 4, 6, 8) and six odd palindromes (1, 3, 5, 7, 9, 11)\nassert even_odd_palindrome(12) == (4, 6), 'Failed to count even and odd palindromes correctly.'\n\n## Edge Cases\n### The input is 1, so there are no even palindromes and one odd palindrome (1)\nassert even_odd_palindrome(1) == (0, 1), 'Failed to handle the case where n is 1.'\n\n### The input is 2, so there is one even palindrome (2) and one odd palindrome (1)\nassert even_odd_palindrome(2) == (1, 1), 'Failed to handle the case where n is 2.'\n\n### The input is 1000, so there are 495 even palindromes and 505 odd palindromes.\nassert even_odd_palindrome(1000) == (495, 505), 'Failed to handle large input size.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input is 10^3, so there are 450 even palindromes and 551 odd palindromes.\nassert even_odd_palindrome(10**3) == (450, 551), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input n is not an integer, so the function should return an error or default value\nassert even_odd_palindrome('invalid') == None, 'Failed to handle the case where the input n is not an integer.'\n\n#### The input n is a negative number, so the function should return an error or default value\nassert even_odd_palindrome(-10) == None, 'Failed to handle the case where the input n is a negative number.'\n\n#### The input n is a float, so the function should return an error or default value\nassert even_odd_palindrome(3.5) == None, 'Failed to handle the case where the input n is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(even_odd_palindrome))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/108",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "entry_point": "count_nums",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(count_nums)",
        "plan": [
            "# 1. Initialize a variable to keep track of the count of numbers with a sum of digits greater than 0.\n# 2. Loop through the elements in the input array.\n# 3. For each element, calculate the sum of its digits.\n# 4. Check if the sum is greater than 0.\n# 5. If it is, increment the count variable.\n# 6. Return the final count of numbers with a sum of digits greater than 0."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the number of elements in `arr` that have a sum of digits greater than 0.\n\n## Edge Cases\n- Handle an empty `arr` list, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(nm) where n is the length of the `arr` list and m is the average number of digits in each element.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input.\n- Handle non-integer elements in the `arr` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list is empty, so the function should return 0\nassert count_nums([]) == 0, 'Failed to handle an empty input list.'\n\n### The input list contains three elements, all of which have a sum of digits greater than 0\n### The function should return 3\nassert count_nums([-1, 11, -11]) == 3, 'Failed to count all elements with a sum of digits greater than 0.'\n\n### The input list contains three elements, all of which have a sum of digits greater than 0\n### The function should return 3\nassert count_nums([1, 1, 2]) == 3, 'Failed to count all elements with a sum of digits greater than 0.'\n\n## Edge Cases\n### The input list is empty, so the function should return 0\nassert count_nums([]) == 0, 'Failed to handle an empty input list.'\n\n### The input list contains one element, which has a sum of digits greater than 0\n### The function should return 1\nassert count_nums([1]) == 1, 'Failed to handle a single element in the input list.'\n\n### The input list contains one element, which has a sum of digits equal to 0\n### The function should return 0\nassert count_nums([0]) == 0, 'Failed to handle a single element with a sum of digits equal to 0.'\n\n### The input list contains one element, which is a negative number\n### The function should return 1\nassert count_nums([-123]) == 1, 'Failed to handle a single negative element in the input list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are positive numbers with a sum of digits greater than 0\n### The function should return 10^6\nassert count_nums(list(range(1, 10**6 + 1))) == 10**6, 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are 0\n### The function should return 0\nassert count_nums([0] * 10**6) == 0, 'Failed to handle case where all elements have a sum of digits equal to 0.'\n\n### The input list contains 10^6 elements, all of which are negative numbers with a sum of digits greater than 0\n### The function should return 10^6\nassert count_nums(list(range(-10**6, 0))) == 10**6, 'Failed to handle large input size with negative elements.'\n\n## Specific Quality Requirements\n### Robustness\n#### The arr input is not a list of integers, so the function should return 0\nassert count_nums('invalid') == 0, 'Failed to handle case where the input arr is not a list of integers.'\n\n#### The arr list contains elements that are not integers, so the function should return 0\nassert count_nums([1, 2, 'invalid', 4]) == 0, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(count_nums))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/109",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "entry_point": "move_one_ball",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\ncheck(move_one_ball)",
        "plan": [
            "# 1. Check if the given array is empty. If it is, return True.\n# 2. Find the index of the minimum element in the array.\n# 3. If the index is 0 or equal to the length of the array - 1, return True.\n# 4. Otherwise, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should determine if it is possible to obtain a sorted array in non-decreasing order by performing right shift operations on the given array `arr`.\n- If it is possible, the function should return `True`. Otherwise, it should return `False`.\n- If the given array is empty, the function should return `True`.\n\n## Edge Cases\n- Handle an empty `arr`, returning `True`.\n- Handle a single-element `arr`, returning `True`.\n- Handle a sorted `arr`, returning `True`.\n- Handle a reversed `arr`, returning `False`.\n- Handle an unsorted `arr` with duplicate elements, returning `True` or `False` depending on the possibility of achieving non-decreasing order.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `arr` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input.\n- Handle non-integer elements in the `arr` list.\n\n### Reliability\n- Avoid index errors while accessing `arr` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The array [3, 4, 5, 1, 2] can be sorted in non-decreasing order by performing 2 right shift operations\nassert move_one_ball([3, 4, 5, 1, 2]) == True, 'Failed for general case 1'\n\n### The array [3, 5, 4, 1, 2] cannot be sorted in non-decreasing order by performing any number of right shift operations\nassert move_one_ball([3, 5, 4, 1, 2]) == False, 'Failed for general case 2'\n\n## Edge Cases\n### The input array is empty, so the function should return True\nassert move_one_ball([]) == True, 'Failed for edge case: empty array'\n\n### The input array has a single element, so the function should return True\nassert move_one_ball([1]) == True, 'Failed for edge case: single element array'\n\n### The input array is already in sorted order, so the function should return True\nassert move_one_ball([1, 2, 3, 4, 5]) == True, 'Failed for edge case: sorted array'\n\n### The input array is in reverse order, so the function should return False\nassert move_one_ball([5, 4, 3, 2, 1]) == False, 'Failed for edge case: reversed array'\n\n### The input array has duplicate elements and can be sorted in non-decreasing order by performing right shift operations\nassert move_one_ball([3, 4, 5, 3, 2]) == True, 'Failed for edge case: duplicate elements'\n\n### The input array has duplicate elements and cannot be sorted in non-decreasing order by performing any number of right shift operations\nassert move_one_ball([3, 4, 5, 3, 2, 2]) == False, 'Failed for edge case: duplicate elements'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input array contains 10^6 elements in random order\n### The function should return within 5 seconds\nimport time\nstart_time = time.time()\nassert move_one_ball(list(range(10**6, 0, -1))) == False, 'Failed for large input size'\nexecution_time = time.time() - start_time\nassert execution_time < 5, 'Failed to meet performance requirements'\n\n## Specific Quality Requirements\n### Robustness\n#### The input arr is not a list, so the function should return True\nassert move_one_ball('invalid') == True, 'Failed to handle case where the input arr is not a list.'\n\n#### The input arr list contains elements that are not integers, so the function should return True\nassert move_one_ball([1, 2, 'invalid', 4]) == True, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(move_one_ball))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/110",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
        "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "entry_point": "exchange",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\ncheck(exchange)",
        "plan": [
            "# 1. Count the number of odd numbers in lst1.\n# 2. Count the number of odd numbers in lst2.\n# 3. If the count of odd numbers in lst1 is greater than or equal to the count of odd numbers in lst2, return \"YES\".\n# 4. Otherwise, return \"NO\"."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two lists of numbers, `lst1` and `lst2`, as input.\n- It returns a string, either \"YES\" or \"NO\".\n\n## Expected Behavior\n- The function determines whether it is possible to perform an exchange of elements between `lst1` and `lst2` to make `lst1` a list of only even numbers.\n- If it is possible, the function returns \"YES\".\n- If it is not possible, the function returns \"NO\".\n\n## Edge Cases\n- Handle empty lists `lst1` and `lst2`, returning \"NO\".\n- Handle the case where `lst1` already consists of only even numbers, returning \"YES\".\n- Handle the case where `lst2` already consists of only even numbers, returning \"YES\".\n- Handle the case where both `lst1` and `lst2` consist of only even numbers, returning \"YES\".\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the maximum length between `lst1` and `lst2`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list inputs for `lst1` or `lst2`.\n- Handle non-integer elements in `lst1` or `lst2`.\n\n### Reliability\n- Avoid index errors while accessing `lst1` and `lst2` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### All elements in `lst1` are already even, so no exchange is needed\nassert exchange([2, 4, 6, 8], [1, 2, 3, 4]) == \"YES\", 'Failed to handle case where `lst1` is already a list of even numbers.'\n\n### `lst1` and `lst2` have the same elements, so an exchange is possible\nassert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\", 'Failed to handle case where `lst1` and `lst2` have the same elements.'\n\n### Exchange of elements between `lst1` and `lst2` is not possible\nassert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\", 'Failed to handle case where an exchange is not possible.'\n\n## Edge Cases\n### Both `lst1` and `lst2` are empty, so an exchange is not possible\nassert exchange([], []) == \"NO\", 'Failed to handle case where both `lst1` and `lst2` are empty.'\n\n### `lst1` is empty, so an exchange is not possible\nassert exchange([], [1, 2, 3, 4]) == \"NO\", 'Failed to handle case where `lst1` is empty.'\n\n### `lst2` is empty, so an exchange is possible as `lst1` is already a list of even numbers\nassert exchange([2, 4, 6, 8], []) == \"YES\", 'Failed to handle case where `lst2` is empty.'\n\n### Both `lst1` and `lst2` are lists of even numbers, so an exchange is possible\nassert exchange([2, 4, 6, 8], [10, 12, 14, 16]) == \"YES\", 'Failed to handle case where both `lst1` and `lst2` are lists of even numbers.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The lengths of `lst1` and `lst2` are both 10^6\n### All elements in `lst1` are even, so no exchange is needed\nassert exchange([2] * 10**6, [1] * 10**6) == \"YES\", 'Failed to handle large input size.'\n\n### The lengths of `lst1` and `lst2` are both 10^6\n### Exchange of elements between `lst1` and `lst2` is not possible\nassert exchange([1] * 10**6, [1] * 10**6) == \"NO\", 'Failed to handle large input size.'\n\n### The lengths of `lst1` and `lst2` are both 10^6\n### Exchange of elements between `lst1` and `lst2` is possible\nassert exchange([1] * 10**6, [2] * 10**6) == \"YES\", 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input `lst1` is not a list, so the function should return \"NO\"\nassert exchange('invalid', [1, 2, 3, 4]) == \"NO\", 'Failed to handle case where the input `lst1` is not a list.'\n\n#### The input `lst2` is not a list, so the function should return \"NO\"\nassert exchange([1, 2, 3, 4], 'invalid') == \"NO\", 'Failed to handle case where the input `lst2` is not a list.'\n\n#### `lst1` contains elements that are not numbers, so the function should return \"NO\"\nassert exchange([1, 2, 'invalid', 4], [1, 2, 3, 4]) == \"NO\", 'Failed to handle case where `lst1` contains elements that are not numbers.'\n\n#### `lst2` contains elements that are not numbers, so the function should return \"NO\"\nassert exchange([1, 2, 3, 4], [1, 2, 'invalid', 4]) == \"NO\", 'Failed to handle case where `lst2` contains elements that are not numbers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(exchange))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/111",
        "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "entry_point": "histogram",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\ncheck(histogram)",
        "plan": [
            "# 1. Create an empty dictionary to store the histogram.\n# 2. Split the input string by spaces to get a list of individual letters.\n# 3. Loop through each letter in the list.\n# 4. Check if the letter is already a key in the dictionary.\n# 5. If it is, increment the value of that key by 1.\n# 6. If it is not, add the letter as a key in the dictionary with a value of 1.\n# 7. Find the maximum value in the dictionary.\n# 8. Create a new dictionary to store the letters with the maximum occurrence.\n# 9. Loop through the dictionary and check if the value is equal to the maximum value.\n# 10. If it is, add the key-value pair to the new dictionary.\n# 11. Return the new dictionary with the letters and their corresponding counts."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `test` as input.\n- It returns a dictionary.\n\n## Expected Behavior\n- The function should return a dictionary where the keys are lowercase letters from the `test` string and the values are their respective counts in the string.\n- If multiple letters have the same occurrence, all of them should be included in the dictionary.\n\n## Edge Cases\n- Handle an empty `test` string, returning an empty dictionary.\n- Handle a `test` string with only spaces, returning an empty dictionary.\n- Handle a `test` string with no lowercase letters, returning an empty dictionary.\n- Handle a `test` string with all letters having the same count, returning a dictionary with all letters and their respective counts.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `test` string.\n- Space complexity: O(k) where k is the number of unique lowercase letters in the `test` string.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string input.\n- Handle a non-lowercase letter character in the `test` string.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Each letter in the string appears once, so the dictionary should have a count of 1 for each letter\nassert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}, 'Failed to count each letter with a count of 1.'\n\n### Both 'a' and 'b' appear twice in the string, so the dictionary should have a count of 2 for both letters\nassert histogram('a b b a') == {'a': 2, 'b': 2}, 'Failed to count letters with multiple occurrences.'\n\n### Both 'a' and 'b' appear twice in the string, so the dictionary should have a count of 2 for both letters\nassert histogram('a b c a b') == {'a': 2, 'b': 2}, 'Failed to count letters with multiple occurrences.'\n\n### 'b' appears four times in the string, so the dictionary should have a count of 4 for 'b'\nassert histogram('b b b b a') == {'b': 4}, 'Failed to count letter with the most occurrences.'\n\n### The string is empty, so the dictionary should be empty as well\nassert histogram('') == {}, 'Failed to handle an empty string.'\n\n## Edge Cases\n### The string contains only spaces, so the dictionary should be empty\nassert histogram('    ') == {}, 'Failed to handle a string with only spaces.'\n\n### The string contains no lowercase letters, so the dictionary should be empty\nassert histogram('1234567890') == {}, 'Failed to handle a string with no lowercase letters.'\n\n### All letters in the string have the same count of 1, so the dictionary should have a count of 1 for each letter\nassert histogram('a b c d e f g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}, 'Failed to handle case where all letters have the same count.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The string contains 10^6 lowercase letters 'a', so the dictionary should have a count of 10^6 for 'a'\nassert histogram(' '.join(['a'] * 10**6)) == {'a': 10**6}, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty dictionary\nassert histogram(123) == {}, 'Failed to handle case where the input is not a string.'\n\n#### The input string contains non-lowercase letter characters, so the function should exclude those characters from the dictionary\nassert histogram('a b C d') == {'a': 1, 'b': 1, 'd': 1}, 'Failed to handle case where the input string contains non-lowercase letter characters.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(histogram))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/112",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
        "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "entry_point": "reverse_delete",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\ncheck(reverse_delete)",
        "plan": [
            "# 1. Initialize an empty string to store the result.\n# 2. Loop through each character in the input string s.\n# 3. Check if the character is not present in the string c.\n# 4. If it is not present, append it to the result string.\n# 5. Check if the resulting string is equal to its reverse.\n# 6. If it is equal, set the palindrome check variable to True, otherwise set it to False.\n# 7. Return a tuple containing the result string and the palindrome check variable."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and other potential errors.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two strings `s` and `c` as input.\n- It returns a tuple containing the result string and True/False for the palindrome check.\n\n## Expected Behavior\n- The function should delete all characters in `s` that are equal to any character in `c`.\n- It should then check if the resulting string is a palindrome.\n- The function should return a tuple containing the result string and True/False for the palindrome check.\n\n## Edge Cases\n- Handle empty `s` and/or `c` strings, returning an empty string and False for the palindrome check.\n- Handle non-string `s` and/or `c` inputs, returning an empty string and False for the palindrome check.\n- Handle cases where the resulting string is a palindrome, returning the result string and True for the palindrome check.\n- Handle cases where the resulting string is not a palindrome, returning the result string and False for the palindrome check.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n + m) where n is the length of `s` and m is the length of `c`.\n- Space complexity: O(n) where n is the length of `s`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string characters in `s` and/or `c`.\n- Handle empty `s` and/or `c` strings.\n- Handle special characters and whitespaces in `s` and/or `c`.\n\n### Reliability\n- Ensure the function handles all characters in `s` correctly, without missing any.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Deleting 'a' and 'e' from 'abcde' results in 'bcd', which is not a palindrome\nassert reverse_delete(\"abcde\", \"ae\") == ('bcd', False), 'Failed for general case 1'\n\n### Deleting 'b' from 'abcdef' results in 'acdef', which is not a palindrome\nassert reverse_delete(\"abcdef\", \"b\") == ('acdef', False), 'Failed for general case 2'\n\n### Deleting 'a' and 'b' from 'abcdedcba' results in 'cdedc', which is a palindrome\nassert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True), 'Failed for general case 3'\n\n## Edge Cases\n### Both `s` and `c` are empty strings, so the result should be an empty string and False\nassert reverse_delete(\"\", \"\") == ('', False), 'Failed to handle empty input strings'\n\n### `s` is an empty string, so the result should be an empty string and False\nassert reverse_delete(\"\", \"abc\") == ('', False), 'Failed to handle empty `s` string'\n\n### `c` is an empty string, so the result should be `s` and True\nassert reverse_delete(\"abcde\", \"\") == ('abcde', True), 'Failed to handle empty `c` string'\n\n## Edge Cases Regarding Non-functional Requirements\n### Performance Requirements\n#### The length of `s` is 10^6 and `c` is 1\n#### Deleting 'a' from 'a' results in an empty string, which is a palindrome\nassert reverse_delete('a' * 10**6, 'a') == ('', True), 'Failed to handle large input size'\n\n### Specific Quality Requirements\n#### Robustness\n##### The inputs `s` and `c` are not strings, so the result should be an empty string and False\nassert reverse_delete(123, ['a', 'b']) == ('', False), 'Failed to handle non-string inputs'\n\n##### `s` contains special characters and whitespaces\n##### Deleting '!' and whitespaces from 'a ! b c !d! e' results in 'abcde', which is a palindrome\nassert reverse_delete('a ! b c !d! e', '! ') == ('abcde', True), 'Failed to handle special characters and whitespaces in `s`'\n\n##### `c` contains special characters and whitespaces\n##### Deleting '!' and whitespaces from 'abcdef' results in 'abcdef', which is not a palindrome\nassert reverse_delete('abcdef', '! ') == ('abcdef', False), 'Failed to handle special characters and whitespaces in `c`'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(reverse_delete))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/113",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "entry_point": "odd_count",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(odd_count)",
        "plan": [
            "# 1. Initialize an empty list to store the result.\n# 2. Loop through each string in the input list.\n# 3. Count the number of odd digits in the current string using a list comprehension and the sum() function.\n# 4. Create a new string that replaces the \"i\" in the prompt with the count of odd digits in the current string.\n# 5. Append the new string to the result list.\n# 6. Return the result list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of strings `lst` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- For each string in `lst`, the function should return a new string that replaces the \"i\" in the prompt with the count of odd digits in that string.\n\n## Edge Cases\n- Handle an empty `lst` list, returning an empty list.\n- Handle strings in `lst` that are not composed of only digits, returning an empty list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n*m) where n is the length of the `lst` list and m is the average length of the strings in `lst`.\n- Space complexity: O(n) where n is the length of the `lst` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input or non-string elements in `lst`.\n\n### Reliability\n- Avoid index errors while accessing `lst` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10.\n- Ensure code readability by using descriptive variable names and adding inline comments when necessary."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list contains one string \"1234567\"\n### There are 4 odd digits in the string, so the output should be [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nassert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], 'Failed to count odd elements in the string.'\n\n### The input list contains two strings \"3\" and \"11111111\"\n### The first string has 1 odd digit, and the second string has 8 odd digits\n### The output should be [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nassert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], 'Failed to count odd elements in multiple strings.'\n\n## Edge Cases\n### The input list is empty, so the output should be an empty list\nassert odd_count([]) == [], 'Failed to handle an empty input list.'\n\n### The input list contains one string \"abc123\"\n### The string contains non-digit characters, so the function should return an empty list\nassert odd_count(['abc123']) == [], 'Failed to handle a string with non-digit characters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 strings, each consisting of 10^6 odd digits\n### The output list should contain 10^6 strings, each describing the count of odd digits in the corresponding input string\nassert odd_count(['1'*10**6] * 10**6) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] * 10**6, 'Failed to handle large input size.'\n\n### The input list contains 10^6 strings, each consisting of 10^6 even digits\n### The output list should contain 10^6 strings, each describing that there are no odd digits in the corresponding input string\nassert odd_count(['2'*10**6] * 10**6) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"] * 10**6, 'Failed to handle large input size with no odd digits.'\n\n### The input list contains 10^6 strings, each consisting of 10^6 odd digits\n### The output list should contain 10^6 strings, each describing the count of odd digits in the corresponding input string\nassert odd_count(['1'*10**6 + '2'] * 10**6) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] * 10**6, 'Failed to handle large input size with one even digit.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list, so the function should return an empty list\nassert odd_count('invalid') == [], 'Failed to handle case where the input lst is not a list.'\n\n#### The lst list contains elements that are not strings, so the function should return an empty list\nassert odd_count(['1', 2, '3']) == [], 'Failed to handle case where the input list contains elements that are not strings.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(odd_count))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/114",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
        "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "entry_point": "minSubArraySum",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\ncheck(minSubArraySum)",
        "plan": [
            "# 1. Initialize variables `min_sum` and `current_sum` to store the minimum sum and the current sum respectively.\n# 2. Initialize `min_sum` with the first element of the input list `nums`.\n# 3. Loop through the elements in `nums` starting from the second element.\n# 4. For each element, add it to the `current_sum` and check if the `current_sum` is less than the `min_sum`.\n# 5. If the `current_sum` is less than the `min_sum`, update the `min_sum` with the `current_sum`.\n# 6. If the `current_sum` becomes negative, reset it to 0.\n# 7. After the loop finishes, return the `min_sum`."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `nums` as input.\n- It returns an integer representing the minimum sum of any non-empty subarray of `nums`.\n\n## Expected Behavior\n- The function should return the minimum sum of any non-empty subarray of `nums`.\n\n## Edge Cases\n- Handle an empty `nums` list, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `nums` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `nums` input or non-integer elements in the `nums` list.\n\n### Reliability\n- Avoid index errors while accessing `nums` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The minimum sum of any non-empty subarray is 1\nassert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1, 'Failed to find the minimum sum of a non-empty subarray.'\n\n### The minimum sum of any non-empty subarray is -6\nassert minSubArraySum([-1, -2, -3]) == -6, 'Failed to find the minimum sum of a non-empty subarray.'\n\n## Edge Cases\n### The input list is empty, so the function should return 0\nassert minSubArraySum([]) == 0, 'Failed to handle an empty input list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The nums list contains 10^6 elements with increasing values from 1 to 10^6\n### The minimum sum of any non-empty subarray is 1\nassert minSubArraySum(list(range(1, 10**6 + 1))) == 1, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The nums input is not a list of integers, so the function should return 0\nassert minSubArraySum('invalid') == 0, 'Failed to handle case where the input nums is not a list of integers.'\n\n#### The nums list contains elements that are not integers, so the function should return 0\nassert minSubArraySum([1, 2, 'invalid', 4]) == 0, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(minSubArraySum))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/115",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
        "solution": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "entry_point": "max_fill",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\ncheck(max_fill)",
        "plan": [
            "# 1. Initialize a variable \"count\" to keep track of the number of times the buckets are lowered.\n# 2. Loop through each row in the grid.\n# 3. For each row, calculate the total water units in that row by summing up all the elements.\n# 4. Calculate the number of times the buckets need to be lowered by dividing the total water units in the row by the bucket capacity, rounded up to the nearest whole number.\n# 5. Add the number of times the buckets need to be lowered to the \"count\" variable.\n# 6. Return the final count value."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a rectangular grid of wells as a list of lists `grid` and a bucket capacity integer `capacity` as input.\n- It returns an integer representing the number of times the buckets need to be lowered.\n\n## Expected Behavior\n- The function should calculate the number of times the buckets need to be lowered in order to empty all the wells in the grid.\n- The bucket capacity determines how many units of water can be extracted in a single lowering.\n\n## Edge Cases\n- Handle an empty `grid` list, returning 0.\n- Handle the case where all wells are already empty, returning 0.\n- Handle the case where the bucket capacity is greater than the total number of units of water in the grid, returning the minimum number of times the buckets need to be lowered to empty all the wells.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n), where n is the total number of elements in the grid.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `grid` input or a non-integer `capacity`.\n- Handle non-integer elements in the `grid` list or a negative `capacity`.\n\n### Reliability\n- Avoid index errors while accessing `grid` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The grid has 3 rows and 4 columns\n### Each bucket has a capacity of 1\n### The wells contain a total of 6 units of water\n### The function should return 6, as it takes 6 lowerings to empty all the wells\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, 'Failed to calculate the number of times the buckets need to be lowered.'\n\n### The grid has 4 rows and 4 columns\n### Each bucket has a capacity of 2\n### The wells contain a total of 10 units of water\n### The function should return 5, as it takes 5 lowerings to empty all the wells\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, 'Failed to calculate the number of times the buckets need to be lowered.'\n\n### The grid has 2 rows and 3 columns\n### Each bucket has a capacity of 5\n### The wells contain a total of 0 units of water\n### The function should return 0, as there is no water to extract from the wells\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0, 'Failed to handle case where all wells are already empty.'\n\n## Edge Cases\n### The grid is empty, so there are no wells and no water to extract\n### The function should return 0\nassert max_fill([], 5) == 0, 'Failed to handle an empty grid.'\n\n### The grid has 1 row and 1 column\n### The bucket capacity is 10, which is greater than the total number of units of water in the grid (1)\n### The function should return 1, as it takes 1 lowering to empty the well\nassert max_fill([[1]], 10) == 1, 'Failed to handle case where the bucket capacity is greater than the total number of units of water.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The grid has 10^6 rows and 10^6 columns\n### Each bucket has a capacity of 1\n### The wells contain a total of 10^6 units of water\n### The function should return 10^6, as it takes 10^6 lowerings to empty all the wells\nassert max_fill([[1] * 10**6] * 10**6, 1) == 10**6, 'Failed to handle large input size.'\n\n### The grid has 10^6 rows and 10^6 columns\n### Each bucket has a capacity of 1\n### The wells contain a total of 0 units of water\n### The function should return 0, as there is no water to extract from the wells\nassert max_fill([[0] * 10**6] * 10**6, 1) == 0, 'Failed to handle large input size where all wells are empty.'\n\n### The grid has 10^6 rows and 10^6 columns\n### Each bucket has a capacity of 10^6, which is greater than the total number of units of water in the grid (10^6)\n### The function should return 1, as it takes 1 lowering to empty the well\nassert max_fill([[1] * 10**6] * 10**6, 10**6) == 1, 'Failed to handle large input size where the bucket capacity is greater than the total number of units of water.'\n\n## Specific Quality Requirements\n### Robustness\n#### The bucket capacity is a negative number, so the function should return 0\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], -1) == 0, 'Failed to handle case where the bucket capacity is a negative number.'\n\n#### The grid input is not a list of lists, so the function should return 0\nassert max_fill('invalid', 5) == 0, 'Failed to handle case where the input grid is not a list of lists.'\n\n#### The capacity input is not an integer, so the function should return 0\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 'invalid') == 0, 'Failed to handle case where the input capacity is not an integer.'\n\n#### The grid list contains elements that are not integers, so the function should return 0\nassert max_fill([[0,0,1,0], [0,1,0,0], ['invalid',1,1,1]], 1) == 0, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(max_fill))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/116",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "entry_point": "sort_array",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(sort_array)",
        "plan": [
            "# 1. Create a helper function to count the number of ones in the binary representation of a number.\n# 2. Use the sorted() function to sort the input list based on two criteria: the number of ones in the binary representation and the decimal value.\n# 3. Pass the helper function as the key argument to the sorted() function.\n# 4. Return the sorted list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of non-negative integers `arr` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should sort the input list `arr` in ascending order based on the number of ones in the binary representation of each number.\n- If multiple numbers have the same number of ones, they should be sorted based on their decimal value.\n\n## Edge Cases\n- Handle an empty `arr` list, returning an empty list.\n- Handle a `arr` list containing only one number, returning the same list.\n- Handle a `arr` list containing negative integers, treating them as non-negative integers and sorting them accordingly.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n * log n), where n is the length of the `arr` list.\n- Space complexity: O(n), where n is the length of the `arr` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input or non-integer elements in the `arr` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10.\n- Use meaningful variable names and clear code organization.\n- Include comments to explain complex parts of the code, if necessary."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The binary representations of [1, 5, 2, 3, 4] are [1, 101, 10, 11, 100]\n### Sorting based on the number of ones in binary representation gives [1, 10, 11, 100, 101]\n### Sorting based on decimal value gives [1, 2, 3, 4, 5]\nassert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5], 'Failed to sort the array based on the number of ones and decimal value.'\n\n### The binary representations of [-2, -3, -4, -5, -6] are [-10, -11, -100, -101, -110]\n### Treat negative numbers as non-negative, so the binary representations are [10, 11, 100, 101, 110]\n### Sorting based on the number of ones in binary representation gives [10, 11, 100, 101, 110]\n### Sorting based on decimal value gives [-6, -5, -4, -3, -2]\nassert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2], 'Failed to sort the array with negative numbers based on the number of ones and decimal value.'\n\n### The binary representations of [1, 0, 2, 3, 4] are [1, 0, 10, 11, 100]\n### Sorting based on the number of ones in binary representation gives [0, 1, 10, 11, 100]\n### Sorting based on decimal value gives [0, 1, 2, 3, 4]\nassert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4], 'Failed to sort the array with zeros based on the number of ones and decimal value.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert sort_array([]) == [], 'Failed to handle an empty input list.'\n\n### The input list contains only one number, so the function should return the same list\nassert sort_array([5]) == [5], 'Failed to handle a single element input list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements with increasing values from 1 to 10^6\n### The binary representations of all the elements are 1 followed by a string of zeros\n### Sorting based on the number of ones in binary representation gives the input list itself\n### Sorting based on decimal value also gives the input list itself\nassert sort_array(list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements with decreasing values from 10^6 to 1\n### The binary representations of all the elements are 1 followed by a string of zeros\n### Sorting based on the number of ones in binary representation gives the input list itself\n### Sorting based on decimal value also gives the input list itself\nassert sort_array(list(range(10**6, 0, -1))) == list(range(10**6, 0, -1)), 'Failed to handle large input size in descending order.'\n\n### The input list contains 10^6 elements, all of which are 1\n### The binary representations of all the elements are 1\n### Sorting based on the number of ones in binary representation gives the input list itself\n### Sorting based on decimal value also gives the input list itself\nassert sort_array([1] * 10**6) == [1] * 10**6, 'Failed to handle large input size with the same value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input arr is not a list, so the function should return an empty list\nassert sort_array('invalid') == [], 'Failed to handle case where the input arr is not a list.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sort_array))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/117",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
        "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "entry_point": "select_words",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\ncheck(select_words)",
        "plan": [
            "# 1. Split the input string s into a list of words using the split() method.\n# 2. Initialize an empty list to store the words that meet the requirements.\n# 3. Loop through each word in the list of words.\n# 4. Count the number of consonants in each word.\n# 5. If the count is equal to n, append the word to the result list.\n# 6. Return the result list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` and a natural number `n` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should return a list of all words from `s` that contain exactly `n` consonants, in the order they appear in `s`.\n- If `s` is empty, the function should return an empty list.\n- The input string `s` only contains letters and spaces.\n\n## Edge Cases\n- Handle an empty `s`, returning an empty list.\n- Handle the case where no words in `s` contain exactly `n` consonants, returning an empty list.\n- Handle multiple words that contain exactly `n` consonants, returning them in the order they appear in `s`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(m), where m is the total number of characters in `s`.\n- Space complexity: O(p), where p is the number of words in `s` that contain exactly `n` consonants.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string `s` input or a non-integer `n`.\n- Handle non-letter characters in `s`.\n- Handle negative `n` values or zero `n`.\n\n### Reliability\n- Ensure the function handles edge cases correctly.\n- Avoid index errors while accessing elements in `s` or the result list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The word \"little\" contains exactly 4 consonants\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], 'Failed to select the word with the specified number of consonants.'\n\n### The words \"Mary\" and \"lamb\" both contain exactly 3 consonants\n### The function should return them in the order they appear in the string\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], 'Failed to select multiple words with the specified number of consonants.'\n\n### None of the words in the string contain exactly 2 consonants\n### The function should return an empty list\nassert select_words(\"simple white space\", 2) == [], 'Failed to handle case where no word satisfies the condition.'\n\n### The word \"world\" contains exactly 4 consonants\nassert select_words(\"Hello world\", 4) == [\"world\"], 'Failed to select the word with the specified number of consonants.'\n\n### The word \"Uncle\" contains exactly 3 consonants\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], 'Failed to select the word with the specified number of consonants.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty list\nassert select_words(\"\", 5) == [], 'Failed to handle an empty input string.'\n\n### None of the words in the string contain exactly 5 consonants\n### The function should return an empty list\nassert select_words(\"Hello world\", 5) == [], 'Failed to handle case where no word satisfies the condition.'\n\n### The input string consists of a single word with exactly 1 consonant\n### The function should return the word as the only element in the list\nassert select_words(\"hello\", 1) == [\"hello\"], 'Failed to handle case where the word has the specified number of consonants.'\n\n### The input string consists of multiple words with exactly 1 consonant each\n### The function should return all the words in the order they appear in the string\nassert select_words(\"hello world\", 1) == [\"hello\", \"world\"], 'Failed to select multiple words with the specified number of consonants.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 characters, all of which are consonants\n### The input n is 1, so all the words in the string should be selected\n### The function should return a list with 10^6 words\nassert select_words(\"\".join([\"a\" for _ in range(10**6)]), 1) == [\"a\" for _ in range(10**6)], 'Failed to handle large input size.'\n\n### The input string contains 10^6 characters, all of which are spaces\n### The function should return an empty list since there are no words in the string\nassert select_words(\" \" * 10**6, 3) == [], 'Failed to handle case where the input string consists of spaces only.'\n\n### The input string contains 10^6 characters, alternating between consonants and vowels\n### The input n is 1, so all the characters should be selected as individual words\n### The function should return a list with 10^6 elements, alternating between consonants and vowels\nassert select_words(\"bcdfghjklmnpqrstvwxyaeiou\" * (10**6 // 21), 1) == list(\"bcdfghjklmnpqrstvwxyaeiou\" * (10**6 // 21)), 'Failed to handle case where each character is treated as a separate word.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input s is not a string, so the function should return an empty list\nassert select_words(12345, 5) == [], 'Failed to handle case where the input s is not a string.'\n\n#### The input n is not an integer, so the function should return an empty list\nassert select_words(\"hello world\", \"invalid\") == [], 'Failed to handle case where the input n is not an integer.'\n\n#### The input s contains non-letter characters, so the function should return an empty list\nassert select_words(\"hello, world!\", 5) == [], 'Failed to handle case where the input s contains non-letter characters.'\n\n#### The input n is a negative number, so the function should return an empty list\nassert select_words(\"hello world\", -5) == [], 'Failed to handle case where the input n is a negative number.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(select_words))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/118",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
        "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "entry_point": "get_closest_vowel",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(get_closest_vowel)",
        "plan": [
            "# 1. Initialize a variable to store the closest vowel found.\n# 2. Initialize a variable to store the index of the closest vowel found.\n# 3. Iterate through the characters in the given word, starting from the right side.\n# 4. Check if the current character is a vowel and the character on its left and right are consonants.\n# 5. If the above condition is satisfied, update the closest vowel and its index.\n# 6. After iterating through all the characters, check if a closest vowel was found.\n# 7. If a closest vowel was found, return it.\n# 8. If no closest vowel was found, return an empty string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `word` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should find the closest vowel that stands between two consonants from the right side of the word.\n- It should not consider vowels at the beginning or ending of the word.\n- If no vowel satisfies the above condition, the function should return an empty string.\n\n## Edge Cases\n- Handle an empty `word` string, returning an empty string.\n- Handle the case where no vowel satisfies the condition, returning an empty string.\n- Handle words with only one vowel or one consonant, returning an empty string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `word` string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely long words, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n- Handle words with non-English letters.\n- Handle words with both uppercase and lowercase letters.\n\n### Reliability\n- Avoid index errors while accessing word characters.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10.\n"
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The closest vowel that stands between two consonants from the right side is \"u\"\nassert get_closest_vowel(\"yogurt\") == \"u\", 'Failed to find the closest vowel.'\n\n### The closest vowel that stands between two consonants from the right side is \"U\"\nassert get_closest_vowel(\"FULL\") == \"U\", 'Failed to find the closest vowel when the word contains uppercase letters.'\n\n### There is no vowel that satisfies the condition, so the function should return an empty string\nassert get_closest_vowel(\"quick\") == \"\", 'Failed to handle case where no vowel satisfies the condition.'\n\n### The word contains only two characters, neither of which is a vowel, so the function should return an empty string\nassert get_closest_vowel(\"ab\") == \"\", 'Failed to handle case where the word contains only two characters.'\n\n## Edge Cases\n### The word is empty, so the function should return an empty string\nassert get_closest_vowel(\"\", 5) == \"\", 'Failed to handle an empty word.'\n\n### The word contains only one vowel, which is at the beginning of the word, so the function should return an empty string\nassert get_closest_vowel(\"apple\") == \"\", 'Failed to handle case where the word contains only one vowel.'\n\n### The word contains only one consonant, so the function should return an empty string\nassert get_closest_vowel(\"c\") == \"\", 'Failed to handle case where the word contains only one consonant.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The word contains 10^6 characters, all of which are consonants\n### There is no vowel that satisfies the condition, so the function should return an empty string\nassert get_closest_vowel(\"z\" * 10**6) == \"\", 'Failed to handle large input size.'\n\n### The word contains 10^6 characters, all of which are vowels\n### There is no consonant that satisfies the condition, so the function should return an empty string\nassert get_closest_vowel(\"a\" * 10**6) == \"\", 'Failed to handle large input size.'\n\n### The word contains 10^6 characters, alternating between consonants and vowels\n### The closest vowel that stands between two consonants from the right side is \"e\"\nassert get_closest_vowel(\"abababababababababab\") == \"e\", 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The word input is not a string, so the function should return an empty string\nassert get_closest_vowel(1234) == \"\", 'Failed to handle case where the input word is not a string.'\n\n#### The word contains non-English letters, so the function should return an empty string\nassert get_closest_vowel(\"\u3053\u3093\u306b\u3061\u306f\") == \"\", 'Failed to handle case where the word contains non-English letters.'\n\n#### The word contains both uppercase and lowercase letters\n#### The closest vowel that stands between two consonants from the right side is \"O\"\nassert get_closest_vowel(\"dOG\") == \"O\", 'Failed to handle case where the word contains uppercase and lowercase letters.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(get_closest_vowel))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/119",
        "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "entry_point": "match_parens",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\ncheck(match_parens)",
        "plan": [
            "# 1. Initialize a variable \"stack\" to store the parentheses.\n# 2. Loop through each string in the input list.\n# 3. Loop through each character in the string.\n# 4. If the character is an opening parenthesis '(', push it onto the stack.\n# 5. If the character is a closing parenthesis ')', check if the stack is empty or the top of the stack is not an opening parenthesis '('.\n# 6. If either condition is true, return 'No'.\n# 7. If the character is a closing parenthesis ')' and the top of the stack is an opening parenthesis '(', pop the opening parenthesis from the stack.\n# 8. After looping through all characters in both strings, check if the stack is empty.\n# 9. If the stack is empty, return 'Yes', indicating that the strings can be concatenated in a way that creates a good string.\n# 10. If the stack is not empty, return 'No', indicating that it is not possible to create a good string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of two strings `lst` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should return 'Yes' if it is possible to concatenate the two strings in `lst` in some order to create a good string, and 'No' otherwise.\n- A good string is defined as a string where all parentheses are balanced.\n\n## Edge Cases\n- Handle empty strings in `lst`, returning 'Yes' since an empty string is considered balanced.\n- Handle strings with no parentheses in `lst`, returning 'Yes' since a string with no parentheses is considered balanced.\n- Handle strings with unbalanced parentheses in `lst`, returning 'No' since it is not possible to create a good string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the longest string in `lst`.\n- Space complexity: O(n) where n is the length of the longest string in `lst`.\n- Ensure efficiency even for extremely large strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input or strings in `lst` that are not instances of str.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The strings can be concatenated as '(())()', which is a good string\nassert match_parens(['()(', ')']) == 'Yes', 'Failed to handle case where a good string can be formed.'\n\n### The strings cannot be concatenated to form a good string, as there is an unbalanced closing parenthesis\nassert match_parens([')', ')']) == 'No', 'Failed to handle case where no good string can be formed.'\n\n## Edge Cases\n### Both strings are empty, so they can be concatenated to form an empty string, which is considered a good string\nassert match_parens(['', '']) == 'Yes', 'Failed to handle case where both strings are empty.'\n\n### One of the strings is empty, so the other string can be concatenated as is, which is a good string\nassert match_parens(['', '()']) == 'Yes', 'Failed to handle case where one of the strings is empty.'\n\n### Both strings do not contain any parentheses, so they can be concatenated to form a good string\nassert match_parens(['abc', 'def']) == 'Yes', 'Failed to handle case where both strings do not contain parentheses.'\n\n### One of the strings is empty and the other contains unbalanced parentheses, so no good string can be formed\nassert match_parens(['', '())']) == 'No', 'Failed to handle case where one string is empty and the other contains unbalanced parentheses.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The strings are very long, but can be concatenated to form a good string\nassert match_parens(['(' * 10**6 + ')', '(' + ')' * 10**6]) == 'Yes', 'Failed to handle large input size.'\n\n### The strings are very long and cannot be concatenated to form a good string\nassert match_parens(['(' * 10**6 + ')', ')' * 10**6]) == 'No', 'Failed to handle large input size.'\n\n### The strings are very long and contain no parentheses, so they can be concatenated to form a good string\nassert match_parens(['a' * 10**6, 'b' * 10**6]) == 'Yes', 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list, so the function should return 'No'\nassert match_parens('invalid') == 'No', 'Failed to handle case where the input lst is not a list.'\n\n#### One of the strings in lst is not a string, so the function should return 'No'\nassert match_parens(['()', 123]) == 'No', 'Failed to handle case where one of the strings in lst is not a string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(match_parens))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/120",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
        "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "entry_point": "maximum",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ncheck(maximum)",
        "plan": [
            "# 1. Sort the input array arr in descending order.\n# 2. Slice the sorted array to get the first k elements.\n# 3. Return the sliced array as the result."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` and a positive integer `k` as input.\n- It returns a sorted list of length `k` with the maximum `k` numbers in `arr`.\n\n## Expected Behavior\n- The function should return a sorted list of length `k` containing the `k` maximum numbers from `arr`.\n\n## Edge Cases\n- Handle an empty `arr` list, returning an empty list.\n- Handle the case where `k` is 0, returning an empty list.\n- Handle the case where `k` is greater than the length of `arr`, returning the sorted `arr` list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n log n), where n is the length of the `arr` list due to the sorting operation.\n- Space complexity: O(n), where n is the length of the `arr` list, to store the sorted list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input or a non-integer `k`.\n- Handle non-integer elements in the `arr` list.\n- Handle negative values for `k`.\n\n### Reliability\n- Avoid index errors while accessing `arr` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The maximum 3 numbers in arr are -4, -3, and 5\nassert maximum([-3, -4, 5], 3) == [-4, -3, 5], 'Failed to find the maximum k numbers in arr.'\n\n### The maximum 2 numbers in arr are 4 and 4\nassert maximum([4, -4, 4], 2) == [4, 4], 'Failed to find the maximum k numbers in arr.'\n\n### The maximum 1 number in arr is 2\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2], 'Failed to find the maximum k numbers in arr.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert maximum([], 5) == [], 'Failed to handle an empty input list.'\n\n### The maximum 0 numbers in arr is an empty list\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 0) == [], 'Failed to handle the case where k is 0.'\n\n### The maximum k numbers in arr is the sorted arr list itself\nassert maximum([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5], 'Failed to handle the case where k is larger than the length of arr.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The arr list contains 10^6 elements with increasing values from 1 to 10^6\n### The maximum k numbers in arr are [10^6 - 9, 10^6 - 8, ..., 10^6]\nassert maximum(list(range(1, 10**6 + 1)), 10) == list(range(10**6 - 9, 10**6 + 1)), 'Failed to handle large input size.'\n\n### The arr list contains 10^6 elements with increasing values from 1 to 10^6\n### The maximum 1 number in arr is 10^6\nassert maximum(list(range(1, 10**6 + 1)), 1) == [10**6], 'Failed to handle case where the maximum k numbers is 1.'\n\n### The arr list contains 10^6 elements with increasing values from 1 to 10^6\n### The maximum 2 numbers in arr are 10^6-1 and 10^6\nassert maximum(list(range(1, 10**6 + 1)), 2) == [10**6-1, 10**6], 'Failed to handle case where the maximum k numbers is 2.'\n\n## Specific Quality Requirements\n### Robustness\n#### The arr input is not a list of integers, so the function should return an empty list\nassert maximum('invalid', 10) == [], 'Failed to handle case where the input arr is not a list of integers.'\n\n#### The k input is not a positive integer, so the function should return an empty list\nassert maximum([1, 2, 3], -10) == [], 'Failed to handle case where the input k is not a positive integer.'\n\n#### The arr list contains elements that are not integers, so the function should return an empty list\nassert maximum([1, 2, 'invalid', 4], 5) == [], 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(maximum))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/121",
        "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "entry_point": "solution",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\ncheck(solution)",
        "plan": [
            "# 1. Initialize a variable to keep track of the sum.\n# 2. Loop through the input list, starting from index 1 and incrementing by 2 (to only consider even positions).\n# 3. Check if the current element at the even position is odd.\n# 4. If it is, add it to the sum.\n# 5. Return the final sum."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a non-empty list of integers as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of all odd elements in even positions in the input list.\n\n## Edge Cases\n- Handle an empty list input, returning 0.\n- Handle a list with no odd elements in even positions, returning 0.\n- Handle a list with all odd elements in even positions, returning the sum of all odd elements.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list input.\n- Handle non-integer elements in the input list.\n\n### Reliability\n- Avoid index errors while accessing elements in even positions.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The odd elements at even positions are 5 and 7, so the sum is 12\nassert solution([5, 8, 7, 1]) == 12, 'Failed to calculate the sum of odd elements in even positions.'\n\n### The odd elements at even positions are 3, 3, and 3, so the sum is 9\nassert solution([3, 3, 3, 3, 3]) == 9, 'Failed to calculate the sum of odd elements in even positions.'\n\n### There are no odd elements at even positions, so the sum is 0\nassert solution([30, 13, 24, 321]) == 0, 'Failed to handle case where there are no odd elements in even positions.'\n\n## Edge Cases\n### The input list is empty, so the function should return 0\nassert solution([]) == 0, 'Failed to handle an empty input list.'\n\n### All elements in the input list are odd numbers and are at even positions,\n### so the function should return the sum of all odd elements, which is 21\nassert solution([1, 3, 5, 7, 9]) == 21, 'Failed to handle case where all elements in the list are odd numbers in even positions.'\n\n### All elements in the input list are even numbers,\n### so the function should return 0 since there are no odd elements in even positions\nassert solution([2, 4, 6, 8]) == 0, 'Failed to handle case where all elements in the list are even numbers.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements with alternating odd and even numbers,\n### so the sum of odd elements in even positions is (1 + 3 + 5 + ... + 2 * 10^6 - 1) = 10^12\nassert solution(list(range(1, 2 * 10**6 + 1, 2))) == 10**12, 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are odd numbers,\n### so the sum of odd elements in even positions is (1 + 3 + 5 + ... + 2 * 10^6 - 1) = 10^12\nassert solution([1] * 10**6) == 10**12, 'Failed to handle case where all elements in the list are the same odd number.'\n\n### The input list contains 10^6 elements, all of which are even numbers,\n### so there are no odd elements in even positions and the sum should be 0\nassert solution([2] * 10**6) == 0, 'Failed to handle case where all elements in the list are the same even number.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return 0\nassert solution('invalid') == 0, 'Failed to handle case where the input is not a list.'\n\n#### The input list contains elements that are not integers, so the function should return 0\nassert solution([1, 2, 'invalid', 4]) == 0, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(solution))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/122",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "entry_point": "add_elements",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(add_elements)",
        "plan": [
            "# 1. Initialize a variable to keep track of the sum of the elements with at most two digits.\n# 2. Loop through the first k elements of the array.\n# 3. Check if the current element has at most two digits.\n# 4. If it does, add it to the sum.\n# 5. Return the final sum."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` and an integer `k` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of the elements from the first `k` elements of `arr` that have at most two digits.\n\n## Edge Cases\n- Handle an empty `arr` list, returning 0.\n- Handle the case where `k` is greater than the length of `arr`, returning the sum of all elements in `arr`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `arr` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input or a non-integer `k`.\n- Handle non-integer elements in the `arr` list or a negative `k`.\n\n### Reliability\n- Avoid index errors while accessing `arr` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The first 4 elements with at most two digits in `arr` are 21 and 3\n### The sum of these elements is 24\nassert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24, 'Failed to calculate the sum of elements with at most two digits.'\n\n### The first 5 elements with at most two digits in `arr` are 1, 2, 3, 4, and 5\n### The sum of these elements is 15\nassert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 15, 'Failed to calculate the sum of elements with at most two digits.'\n\n## Edge Cases\n### The input list is empty, so the function should return 0\nassert add_elements([], 3) == 0, 'Failed to handle an empty input list.'\n\n### `k` is greater than the length of `arr`, so the function should return the sum of all elements in `arr`\nassert add_elements([1, 2, 3, 4, 5], 10) == 15, 'Failed to handle case where k is greater than the length of arr.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The `arr` list contains 10^6 elements with increasing values from 1 to 10^6\n### The sum of all elements in `arr` is 10^11, which is larger than the target\n### Therefore, the function should return the sum of the first 10^6 elements, which is 500000500000\nassert add_elements(list(range(1, 10**6 + 1)), 10**6) == 500000500000, 'Failed to handle large input size.'\n\n### The `arr` list contains 10^6 elements with increasing values from 1 to 10^6\n### `k` is 1, so the function should return the first element, which is 1\nassert add_elements(list(range(1, 10**6 + 1)), 1) == 1, 'Failed to handle case where k is 1.'\n\n### The `arr` list contains 10^6 elements with increasing values from 1 to 10^6\n### The first 2 elements with at most two digits in `arr` are 1 and 2\n### The sum of these elements is 3\nassert add_elements(list(range(1, 10**6 + 1)), 2) == 3, 'Failed to handle case where k is 2.'\n\n### The `arr` list contains 10^6 elements, all of which are 10^6\n### The sum of all elements in `arr` is 10^12, which is larger than the target\n### Therefore, the function should return the sum of the first 10^6 elements, which is 500000500000\nassert add_elements([10**6] * 10**6, 10**6) == 500000500000, 'Failed to handle case where all elements in arr are the same.'\n\n## Specific Quality Requirements\n### Robustness\n#### The sum of the elements in `arr` is larger than the target,\n#### so the function should return the sum of the first `k` elements in `arr`\nassert add_elements([10**20, 10**20], 10**19) == 2 * 10**20, 'Failed to handle case where the sum of elements in arr is larger than the target.'\n\n#### The `arr` input is not a list of integers, so the function should return 0\nassert add_elements('invalid', 10) == 0, 'Failed to handle case where the input arr is not a list of integers.'\n\n#### The `k` input is not an integer, so the function should return 0\nassert add_elements([1, 2, 3], 'invalid') == 0, 'Failed to handle case where the input k is not an integer.'\n\n#### The `arr` list contains elements that are not integers, so the function should return 0\nassert add_elements([1, 2, 'invalid', 4], 5) == 0, 'Failed to handle case where the input list contains elements that are not integers.'\n\n#### The `k` is a negative number, so the function should return 0\nassert add_elements([1, 2, 3, 4, 5], -10) == 0, 'Failed to handle case where k is a negative number.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(add_elements))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/123",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
        "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "entry_point": "get_odd_collatz",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(get_odd_collatz)",
        "plan": [
            "# 1. Initialize an empty list to store the odd numbers in the Collatz sequence.\n# 2. Add the input number n to the list.\n# 3. Loop while n is not equal to 1.\n# 4. If n is even, divide it by 2 and assign the result back to n.\n# 5. If n is odd, multiply it by 3 and add 1, then assign the result back to n.\n# 6. Check if the new value of n is odd.\n# 7. If it is, add it to the list.\n# 8. Return the sorted list of odd numbers in the Collatz sequence."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive integer `n` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a sorted list that contains the odd numbers in the Collatz sequence for the given input `n`.\n\n## Edge Cases\n- Handle non-positive integer `n`, returning an empty list.\n- Handle the case where `n` is already 1, returning a list containing only 1.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log n) where n is the value of `n`.\n- Space complexity: O(log n) to store the Collatz sequence.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n`.\n- Handle non-integer elements in the Collatz sequence.\n\n### Reliability\n- Avoid infinite loops by following the Collatz sequence rules correctly.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The collatz sequence for 5 is [5, 16, 8, 4, 2, 1]\n### The odd numbers in the sequence are [5, 1]\n### The function should return the odd numbers in increasing order\nassert get_odd_collatz(5) == [1, 5], 'Failed to return the correct odd numbers in the Collatz sequence.'\n\n### The collatz sequence for 10 is [10, 5, 16, 8, 4, 2, 1]\n### The odd numbers in the sequence are [5, 1]\n### The function should return the odd numbers in increasing order\nassert get_odd_collatz(10) == [1, 5], 'Failed to return the correct odd numbers in the Collatz sequence.'\n\n## Edge Cases\n### n is 1, so the function should return [1]\nassert get_odd_collatz(1) == [1], 'Failed to handle the case where n is 1.'\n\n### n is 0, so the function should return an empty list\nassert get_odd_collatz(0) == [], 'Failed to handle non-positive integer input.'\n\n### n is a negative number, so the function should return an empty list\nassert get_odd_collatz(-5) == [], 'Failed to handle non-positive integer input.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input n is a large number (10^6)\n### The Collatz sequence for 10^6 is [10^6, 5*10^5, 16*10^5, ..., 5, 16, 8, 4, 2, 1]\n### The odd numbers in the sequence are [5, 1]\n### The function should return the odd numbers in increasing order\nassert get_odd_collatz(10**6) == [1, 5], 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input n is not an integer, so the function should return an empty list\nassert get_odd_collatz('invalid') == [], 'Failed to handle non-integer input for n.'\n\n#### The Collatz sequence contains non-integer elements, so the function should return an empty list\nassert get_odd_collatz(10.5) == [], 'Failed to handle non-integer elements in the Collatz sequence.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(get_odd_collatz))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/124",
        "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
        "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "entry_point": "valid_date",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\ncheck(valid_date)",
        "plan": [
            "# 1. Split the date string into day, month, and year.\n# 2. Check if the date string is empty. If it is, return False.\n# 3. Check if the month is within the range of 1 to 12. If it is not, return False.\n# 4. Check if the year is a valid four-digit number. If it is not, return False.\n# 5. Use a dictionary to determine the number of days in each month.\n# 6. Check if the day is within the range of 1 to the maximum number of days for the given month. If it is not, return False.\n# 7. Check if the date string is in the format \"mm-dd-yyyy\". If it is not, return False.\n# 8. If all checks pass, return True."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `date` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the given date string is valid according to the specified rules. Otherwise, it should return False.\n\n## Edge Cases\n- Handle an empty `date` string, returning False.\n- Handle invalid date formats, returning False.\n- Handle invalid months, returning False.\n- Handle invalid days for each month, returning False.\n- Handle invalid year formats, returning False.\n- Handle non-integer values for days, months, or years, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string `date` input.\n\n### Reliability\n- Ensure consistent behavior and results across different platforms and environments.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10.\n- Follow proper coding conventions and naming conventions.\n- Write clear and concise code with meaningful comments."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The date string is valid, so the function should return True\nassert valid_date('03-11-2000') == True, 'Failed to validate a valid date.'\n\n### The date string has an invalid month, so the function should return False\nassert valid_date('15-01-2012') == False, 'Failed to invalidate a date with an invalid month.'\n\n### The date string has an invalid day, so the function should return False\nassert valid_date('04-0-2040') == False, 'Failed to invalidate a date with an invalid day.'\n\n### The date string is valid, so the function should return True\nassert valid_date('06-04-2020') == True, 'Failed to validate a valid date.'\n\n### The date string has an invalid format, so the function should return False\nassert valid_date('06/04/2020') == False, 'Failed to invalidate a date with an invalid format.'\n\n## Edge Cases\n### The date string is empty, so the function should return False\nassert valid_date('') == False, 'Failed to handle an empty date string.'\n\n### The date string has an invalid format, so the function should return False\nassert valid_date('2020-06-04') == False, 'Failed to handle an invalid date format.'\n\n### The date string has an invalid month, so the function should return False\nassert valid_date('13-04-2020') == False, 'Failed to invalidate a date with an invalid month.'\n\n### The date string has an invalid day, so the function should return False\nassert valid_date('02-30-2020') == False, 'Failed to invalidate a date with an invalid day.'\n\n### The date string has an invalid year format, so the function should return False\nassert valid_date('02-04-20') == False, 'Failed to handle an invalid year format.'\n\n### The date string has a non-integer value for days, so the function should return False\nassert valid_date('02-aa-2020') == False, 'Failed to handle a non-integer value for days.'\n\n### The date string has a non-integer value for months, so the function should return False\nassert valid_date('bb-04-2020') == False, 'Failed to handle a non-integer value for months.'\n\n### The date string has a non-integer value for years, so the function should return False\nassert valid_date('02-04-cccc') == False, 'Failed to handle a non-integer value for years.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The date string is valid, so the function should return True\nassert valid_date('12-31-9999') == True, 'Failed to validate a valid date with the maximum possible values.'\n\n### The date string is valid, so the function should return True\nassert valid_date('01-01-0001') == True, 'Failed to validate a valid date with the minimum possible values.'\n\n## Specific Quality Requirements\n### Robustness\n#### The date input is not a string, so the function should return False\nassert valid_date(123) == False, 'Failed to handle a non-string date input.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(valid_date))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/125",
        "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "entry_point": "split_words",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\ncheck(split_words)",
        "plan": [
            "# 1. Check if there are any whitespaces in the input string.\n# 2. If there are whitespaces, split the string on whitespace and return the list of words.\n# 3. If there are no whitespaces, check if there are any commas in the input string.\n# 4. If there are commas, split the string on commas and return the list of words.\n# 5. If there are no commas, count the number of lowercase letters with odd order in the alphabet.\n# 6. Return the count as the result."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `txt` as input.\n- It returns either a list of words or an integer.\n\n## Expected Behavior\n- If there are whitespaces in the input string `txt`, the function should return a list of words split on whitespaces.\n- If there are no whitespaces but there are commas in the input string `txt`, the function should return a list of words split on commas.\n- If there are no whitespaces or commas in the input string `txt`, the function should return the count of lowercase letters with odd order in the alphabet.\n\n## Edge Cases\n- Handle an empty `txt` string, returning an empty list or 0 depending on the situation.\n- Handle an input string with only whitespaces or commas, returning an empty list.\n- Handle an input string with no lowercase letters, returning an empty list or 0 depending on the situation.\n- Handle non-string `txt` input.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n), where n is the length of the input string `txt`.\n- Space complexity: O(1), if returning the count of lowercase letters. O(k), where k is the number of words, if returning a list of words.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string `txt` input.\n- Handle special characters other than whitespaces and commas in the input string `txt`.\n\n### Reliability\n- Ensure accurate splitting of words on whitespaces or commas.\n- Ensure accurate count of lowercase letters with odd order in the alphabet.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input string has whitespaces, so the function should split the words on whitespaces\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"], 'Failed to split the words on whitespaces.'\n\n### The input string has commas, so the function should split the words on commas\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"], 'Failed to split the words on commas.'\n\n### The input string has no whitespaces or commas, so the function should return the count of lowercase letters with odd order\n### The lowercase letters with odd order in the alphabet are 'a', 'c', 'e', so the function should return 3\nassert split_words(\"abcdef\") == 3, 'Failed to return the count of lowercase letters with odd order.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty list or 0 depending on the situation\nassert split_words(\"\") == [], 'Failed to handle an empty input string.'\n\n### The input string has only whitespaces, so the function should return an empty list\nassert split_words(\"   \") == [], 'Failed to handle an input string with only whitespaces.'\n\n### The input string has only commas, so the function should return an empty list\nassert split_words(\",,,\") == [], 'Failed to handle an input string with only commas.'\n\n### The input string has no lowercase letters, so the function should return an empty list or 0 depending on the situation\nassert split_words(\"HELLO WORLD!\") == [], 'Failed to handle an input string with no lowercase letters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string is very long with no whitespaces or commas, so the function should return the count of lowercase letters\n### The lowercase letters with odd order in the alphabet are 'a', 'c', 'e', 'g', 'i', 'k', 'm', 'o', 'q', 's', 'u', 'w', 'y', so the function should return 13\nassert split_words(\"acegikmoqsuwy\") == 13, 'Failed to handle large input size.'\n\n### The input string is very long with alternating whitespaces and commas, so the function should split the words on whitespaces\n### The expected result is a list of 10^6 words, each word containing one lowercase letter\nexpected_result = [chr(97 + i) for i in range(26)] * (10**6 // 26)\nassert split_words(\" \".join(expected_result)) == expected_result, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The txt input is not a string, so the function should return an empty list or 0 depending on the situation\nassert split_words(12345) == [], 'Failed to handle case where the input txt is not a string.'\n\n#### The input string has special characters other than whitespaces and commas, so the function should split the words on whitespaces or commas\nassert split_words(\"Hello,world!@#$\") == [\"Hello\", \"world!\"], 'Failed to handle case where the input txt has special characters.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(split_words))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/126",
        "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
        "solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "entry_point": "is_sorted",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\ncheck(is_sorted)",
        "plan": [
            "# 1. Check if the list is sorted in ascending order.\n# 2. If the list has more than 1 duplicate of the same number, return False.\n# 3. If the list is sorted in ascending order and does not have more than 1 duplicate, return True.\n# 4. To check if the list is sorted in ascending order, we can use the all() function and a list comprehension to check if each element is less than or equal to the next element.\n# 5. To check for duplicates, we can use the count() method to count the occurrences of each element in the list and check if any element has a count greater than 1.\n# 6. If either condition is not true, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `lst` as input.\n- It returns a boolean value indicating whether the list is sorted in ascending order and has no more than 1 duplicate of the same number.\n\n## Expected Behavior\n- The function should return True if the list is sorted in ascending order and has no more than 1 duplicate of the same number.\n- The function should return False otherwise.\n\n## Edge Cases\n- Handle an empty `lst`, returning True.\n- Handle a single-element `lst`, returning True.\n- Handle a `lst` with multiple duplicates of the same number, returning False.\n- Handle a `lst` that is sorted in descending order, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `lst`.\n- Space complexity: O(n) for the count of each element in the `lst`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input or non-integer elements in the `lst`.\n\n### Reliability\n- Avoid index errors while accessing `lst` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The list [5] is already sorted in ascending order and has no duplicates\n### The function should return True\nassert is_sorted([5]) == True, 'Failed for single-element sorted list.'\n\n### The list [1, 2, 3, 4, 5] is sorted in ascending order and has no duplicates\n### The function should return True\nassert is_sorted([1, 2, 3, 4, 5]) == True, 'Failed for sorted list.'\n\n### The list [1, 3, 2, 4, 5] is not sorted in ascending order\n### The function should return False\nassert is_sorted([1, 3, 2, 4, 5]) == False, 'Failed for unsorted list.'\n\n### The list [1, 2, 3, 4, 5, 6] is sorted in ascending order and has no duplicates\n### The function should return True\nassert is_sorted([1, 2, 3, 4, 5, 6]) == True, 'Failed for sorted list.'\n\n### The list [1, 2, 3, 4, 5, 6, 7] is sorted in ascending order and has no duplicates\n### The function should return True\nassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True, 'Failed for sorted list.'\n\n### The list [1, 3, 2, 4, 5, 6, 7] is not sorted in ascending order\n### The function should return False\nassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False, 'Failed for unsorted list.'\n\n### The list [1, 2, 2, 3, 3, 4] is sorted in ascending order and has no more than 1 duplicate of the same number\n### The function should return True\nassert is_sorted([1, 2, 2, 3, 3, 4]) == True, 'Failed for sorted list with duplicates.'\n\n### The list [1, 2, 2, 2, 3, 4] is not sorted in ascending order\n### The function should return False\nassert is_sorted([1, 2, 2, 2, 3, 4]) == False, 'Failed for unsorted list with duplicates.'\n\n## Edge Cases\n### The list is empty, so the function should return True\nassert is_sorted([]) == True, 'Failed for empty list.'\n\n### The list [1, 1, 1] has more than 1 duplicate of the same number\n### The function should return False\nassert is_sorted([1, 1, 1]) == False, 'Failed for list with multiple duplicates.'\n\n### The list [3, 2, 1] is not sorted in ascending order\n### The function should return False\nassert is_sorted([3, 2, 1]) == False, 'Failed for sorted in descending order.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements with increasing values from 1 to 10^6\n### The list is sorted in ascending order and has no duplicates\n### The function should return True\nassert is_sorted(list(range(1, 10**6 + 1))) == True, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements with increasing values from 1 to 10^6\n### The list is not sorted in ascending order\n### The function should return False\nassert is_sorted(list(range(10**6, 0, -1))) == False, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements, all of which are 1\n### The list is sorted in ascending order and has no duplicates\n### The function should return True\nassert is_sorted([1] * 10**6) == True, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list, so the function should return False\nassert is_sorted('invalid') == False, 'Failed to handle case where the input lst is not a list.'\n\n#### The lst input contains elements that are not integers, so the function should return False\nassert is_sorted([1, 2, 'invalid', 4]) == False, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_sorted))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/127",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
        "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "entry_point": "intersection",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\ncheck(intersection)",
        "plan": [
            "# 1. Calculate the intersection of the two intervals by finding the maximum start value and the minimum end value.\n# 2. Check if the length of the intersection is a prime number.\n# 3. If the length is a prime number, return \"YES\".\n# 4. If the two intervals don't intersect or the length is not a prime number, return \"NO\"."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two tuples `interval1` and `interval2`, representing intervals, as input.\n- Each tuple has two integers representing the start and end values of the interval.\n- The function returns a string.\n\n## Expected Behavior\n- The function should determine whether the length of the intersection between `interval1` and `interval2` is a prime number.\n- If the length of the intersection is a prime number, the function should return \"YES\".\n- If the two intervals don't intersect or the length is not a prime number, the function should return \"NO\".\n\n## Edge Cases\n- Handle non-tuple input for `interval1` or `interval2`, returning \"NO\".\n- Handle non-integer elements in the `interval1` or `interval2` tuples, returning \"NO\".\n- Handle cases where the start value of an interval is greater than the end value, returning \"NO\".\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the difference between the end and start values of the intersection.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-tuple input or non-integer elements in the tuples, returning \"NO\".\n- Handle cases where the start value is greater than the end value, returning \"NO\".\n\n### Reliability\n- Avoid index errors while accessing elements of the tuples."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The two intervals don't intersect, so the function should return \"NO\"\nassert intersection((1, 2), (2, 3)) == \"NO\", 'Failed to handle case where the intervals don\\'t intersect.'\n\n### The two intervals don't intersect, so the function should return \"NO\"\nassert intersection((-1, 1), (0, 4)) == \"NO\", 'Failed to handle case where the intervals don\\'t intersect.'\n\n### The intersection of the intervals (-3, -1) and (-5, 5) is (-3, -1)\n### The length of the intersection is 3, which is a prime number\n### Therefore, the function should return \"YES\"\nassert intersection((-3, -1), (-5, 5)) == \"YES\", 'Failed to determine if the length of the intersection is a prime number.'\n\n## Edge Cases\n### The two intervals don't intersect, so the function should return \"NO\"\nassert intersection((1, 2), (3, 4)) == \"NO\", 'Failed to handle case where the intervals don\\'t intersect.'\n\n### The intersection of the intervals (0, 3) and (2, 4) is (2, 3)\n### The length of the intersection is 1, which is not a prime number\n### Therefore, the function should return \"NO\"\nassert intersection((0, 3), (2, 4)) == \"NO\", 'Failed to determine if the length of the intersection is a prime number.'\n\n### The intersection of the intervals (0, 2) and (1, 3) is (1, 2)\n### The length of the intersection is 1, which is not a prime number\n### Therefore, the function should return \"NO\"\nassert intersection((0, 2), (1, 3)) == \"NO\", 'Failed to determine if the length of the intersection is a prime number.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The length of the intersection is 10^6, which is a prime number\n### Therefore, the function should return \"YES\"\nassert intersection((1, 10**6), (10**5, 10**6 + 10**5)) == \"YES\", 'Failed to handle large input size.'\n\n### The length of the intersection is 1, which is not a prime number\n### Therefore, the function should return \"NO\"\nassert intersection((10**6, 10**6), (10**6 + 1, 10**6 + 2)) == \"NO\", 'Failed to handle case where the length of the intersection is 1.'\n\n### The length of the intersection is 2, which is a prime number\n### Therefore, the function should return \"YES\"\nassert intersection((-10**6, -10**6), (-10**6 - 1, -10**6 + 1)) == \"YES\", 'Failed to handle case where the length of the intersection is 2.'\n\n## Specific Quality Requirements\n### Robustness\n#### The interval1 input is not a tuple, so the function should return \"NO\"\nassert intersection([1, 2], (2, 3)) == \"NO\", 'Failed to handle case where the input interval1 is not a tuple.'\n\n#### The interval2 input is not a tuple, so the function should return \"NO\"\nassert intersection((1, 2), [2, 3]) == \"NO\", 'Failed to handle case where the input interval2 is not a tuple.'\n\n#### The interval1 tuple contains non-integer elements, so the function should return \"NO\"\nassert intersection(('1', 2), (2, 3)) == \"NO\", 'Failed to handle case where the input interval1 contains non-integer elements.'\n\n#### The interval2 tuple contains non-integer elements, so the function should return \"NO\"\nassert intersection((1, 2), (2, '3')) == \"NO\", 'Failed to handle case where the input interval2 contains non-integer elements.'\n\n#### The start value of interval1 is greater than the end value, so the function should return \"NO\"\nassert intersection((3, 2), (2, 3)) == \"NO\", 'Failed to handle case where the start value of interval1 is greater than the end value.'\n\n#### The start value of interval2 is greater than the end value, so the function should return \"NO\"\nassert intersection((1, 2), (3, 2)) == \"NO\", 'Failed to handle case where the start value of interval2 is greater than the end value.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(intersection))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/128",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "entry_point": "prod_signs",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(prod_signs)",
        "plan": [
            "# 1. Check if the input array is empty. If it is, return None.\n# 2. Initialize variables to keep track of the sum of magnitudes and the product of signs.\n# 3. Loop through each element in the array.\n# 4. Check the sign of each element:\n#     - If the element is 0, the product of signs remains 0.\n#     - If the element is positive, the product of signs is multiplied by 1.\n#     - If the element is negative, the product of signs is multiplied by -1.\n# 5. Add the absolute value of each element to the sum of magnitudes.\n# 6. Multiply the sum of magnitudes by the product of signs.\n# 7. Return the final result."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of the magnitudes of integers in `arr`, multiplied by the product of all signs of each number in the array.\n\n## Edge Cases\n- Handle an empty `arr`, returning None.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `arr` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input or non-integer elements in `arr`.\n\n### Reliability\n- Avoid index errors while accessing `arr` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sum of magnitudes of integers is (1 + 2 + 2 + 4) = 9\n### The product of all signs is (-1 * 1 * 1 * -1) = -1\n### The expected result is 9 * -1 = -9\nassert prod_signs([1, 2, 2, -4]) == -9, 'Failed to calculate the sum of magnitudes multiplied by the product of signs.'\n\n### The sum of magnitudes of integers is (0 + 1) = 1\n### The product of all signs is (0 * 1) = 0\n### The expected result is 1 * 0 = 0\nassert prod_signs([0, 1]) == 0, 'Failed to handle case with zero in the input list.'\n\n## Edge Cases\n### The input list is empty, so the function should return None\nassert prod_signs([]) == None, 'Failed to handle an empty input list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are 1\n### The sum of magnitudes of integers is 10^6\n### The product of all signs is 1\n### The expected result is 10^6 * 1 = 10^6\nassert prod_signs([1] * 10**6) == 10**6, 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are -1\n### The sum of magnitudes of integers is 10^6\n### The product of all signs is -1\n### The expected result is 10^6 * -1 = -10^6\nassert prod_signs([-1] * 10**6) == -10**6, 'Failed to handle case where all elements have the same value.'\n\n### The input list contains 10^6 elements, all of which are 0\n### The sum of magnitudes of integers is 0\n### The product of all signs is 0\n### The expected result is 0 * 0 = 0\nassert prod_signs([0] * 10**6) == 0, 'Failed to handle case where all elements are zero.'\n\n## Specific Quality Requirements\n### Robustness\n#### The arr input is not a list of integers, so the function should return None\nassert prod_signs('invalid') == None, 'Failed to handle case where the input arr is not a list of integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(prod_signs))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/129",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "entry_point": "minPath",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\ncheck(minPath)",
        "plan": [
            "# 1. Create a 2D list \"visited\" with the same dimensions as the grid, filled with False values.\n# 2. Create an empty list \"path\" to store the values of the cells in the minimum path.\n# 3. Define a helper function \"dfs\" that takes the current row, column, and current path length as parameters.\n# 4. Within the \"dfs\" function, check if the current path length is equal to k. If so, return the current path.\n# 5. Mark the current cell as visited by setting visited[row][col] to True.\n# 6. Add the value of the current cell to the path.\n# 7. Get the neighbors of the current cell by checking adjacent cells that are within the bounds of the grid and have not been visited.\n# 8. Sort the neighbors in ascending order.\n# 9. Iterate through the sorted neighbors and recursively call the \"dfs\" function for each neighbor.\n# 10. If a valid path is found in any of the recursive calls, return it.\n# 11. If no valid path is found, backtrack by marking the current cell as unvisited and removing its value from the path.\n# 12. Finally, call the \"dfs\" function for each cell in the grid and return the result."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a grid as a list of lists `grid` and a positive integer `k` as input.\n- The grid is guaranteed to have at least 2 rows and 2 columns.\n- Each cell of the grid contains a unique integer in the range [1, N * N] inclusive, where N is the number of rows or columns in the grid.\n- The function returns an ordered list of integers representing the minimum path of length k in the grid.\n\n## Expected Behavior\n- The function should find the minimum path of length k in the grid, starting from any cell and moving to neighboring cells.\n- The minimum path should visit exactly k cells, but not necessarily distinct cells.\n- The minimum path should not go off the grid.\n- The minimum path should be the lexicographically smallest path among all possible paths of length k.\n\n## Edge Cases\n- Handle an empty grid, returning an empty list.\n- Handle a grid with only one cell, returning a list with that cell's value.\n- Handle a grid with multiple cells with the same value.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(N^2 * k * log(k)) where N is the number of rows or columns in the grid.\n- Space complexity: O(N^2) for the \"visited\" list.\n- Ensure efficiency even for grids with a large number of cells, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `grid` input or a non-integer `k`.\n- Handle grids with non-integer values or non-unique values.\n- Handle a negative `k` value.\n\n### Reliability\n- Avoid index errors while accessing grid cells.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The minimum path of length 3 starts at cell (0, 0) and goes through cells (0, 1), (1, 1), and (0, 0)\nassert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1], 'Failed to find the minimum path of length 3.'\n\n### The minimum path of length 1 starts at cell (1, 1) and stays in that cell\nassert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1], 'Failed to find the minimum path of length 1.'\n\n## Edge Cases\n### The grid is empty, so the function should return an empty list\nassert minPath([], 5) == [], 'Failed to handle an empty grid.'\n\n### The grid has only one cell with the value 1, so the function should return a list with that value\nassert minPath([[1]], 1) == [1], 'Failed to handle a grid with a single cell.'\n\n### The minimum path of length 1 starts at cell (0, 0) and stays in that cell\nassert minPath([[1, 1], [1, 1]], 1) == [1], 'Failed to handle a grid with multiple cells with the same value.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The grid has 100 rows and 100 columns, and the minimum path of length 10 goes from cell (0, 0) to cell (9, 9)\n### Each cell in the grid contains a unique integer from 1 to 10000\nassert minPath([[i + 1 for i in range(100)] for _ in range(100)], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'Failed to handle large input size.'\n\n### The grid has 100 rows and 100 columns, and the minimum path of length 1 stays in cell (0, 0)\n### Each cell in the grid contains a unique integer from 1 to 10000\nassert minPath([[i + 1 for i in range(100)] for _ in range(100)], 1) == [1], 'Failed to handle case where the minimum path length is 1.'\n\n## Specific Quality Requirements\n### Robustness\n#### The k input is not an integer, so the function should return an empty list\nassert minPath([[1, 2], [3, 4]], 'invalid') == [], 'Failed to handle case where the input k is not an integer.'\n\n#### The grid input is not a list, so the function should return an empty list\nassert minPath('invalid', 5) == [], 'Failed to handle case where the input grid is not a list.'\n\n#### The grid contains non-integer values, so the function should return an empty list\nassert minPath([[1, 2], ['invalid', 4]], 5) == [], 'Failed to handle case where the input grid contains non-integer values.'\n\n#### The grid contains duplicate values, so the function should return an empty list\nassert minPath([[1, 2], [2, 4]], 5) == [], 'Failed to handle case where the input grid contains duplicate values.'\n\n#### The k value is negative, so the function should return an empty list\nassert minPath([[1, 2], [3, 4]], -1) == [], 'Failed to handle case where the input k is negative.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(minPath))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/130",
        "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
        "solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "entry_point": "tri",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\ncheck(tri)",
        "plan": [
            "# 1. Create an empty list to store the Tribonacci sequence.\n# 2. If n is 0, return an empty list.\n# 3. If n is 1, return [1].\n# 4. If n is 2, return [1, 3].\n# 5. If n is greater than 2, initialize the Tribonacci sequence with [1, 3].\n# 6. Loop from i = 2 to n.\n# 7. If i is even, calculate the Tribonacci number as 1 + i / 2 and append it to the sequence.\n# 8. If i is odd, calculate the Tribonacci number as the sum of the previous three numbers in the sequence (tri[i-1] + tri[i-2] + tri[i+1]) and append it to the sequence.\n# 9. Return the Tribonacci sequence."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a non-negative integer `n` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a list of the first `n + 1` numbers of the Tribonacci sequence.\n\n## Edge Cases\n- Handle the case where `n` is 0, returning an empty list.\n- Handle the case where `n` is 1, returning `[1]`.\n- Handle the case where `n` is 2, returning `[1, 3]`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the value of `n`.\n- Space complexity: O(n) where n is the value of `n`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `n` input or negative `n`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The first 4 numbers of the Tribonacci sequence are [1, 3, 2, 8]\nassert tri(3) == [1, 3, 2, 8], 'Failed to calculate the first n + 1 numbers of the Tribonacci sequence.'\n\n### The first 1 number of the Tribonacci sequence is [1]\nassert tri(0) == [1], 'Failed to handle case where n is 0.'\n\n### The first 2 numbers of the Tribonacci sequence are [1, 3]\nassert tri(1) == [1, 3], 'Failed to handle case where n is 1.'\n\n## Edge Cases\n### The first 3 numbers of the Tribonacci sequence are [1, 3, 2]\nassert tri(2) == [1, 3, 2], 'Failed to handle case where n is 2.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The n value is 10^6\n### The first 10^6 + 1 numbers of the Tribonacci sequence are calculated\n### The expected output list contains the first 10^6 + 1 numbers of the Tribonacci sequence\n### The test checks if the calculated output list is equal to the expected output list\nassert tri(10**6) == [1, 3, 2, 8, 14, ..., 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
        ]
    },
    {
        "id": "HumanEval/131",
        "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
        "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "entry_point": "digits",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\ncheck(digits)",
        "plan": [
            "# 1. Convert the given positive integer n into a string to easily access each digit.\n# 2. Initialize a variable to keep track of the product of the odd digits.\n# 3. Loop through each digit in the string representation of n.\n# 4. Check if the digit is odd (i.e., not divisible by 2).\n# 5. If the digit is odd, multiply it with the current product and update the product.\n# 6. If all digits are even (i.e., the product remains 0), return 0.\n# 7. Otherwise, return the final product of the odd digits."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the product of the odd digits in `n`.\n- If all digits in `n` are even, the function should return 0.\n\n## Edge Cases\n- Handle the case where `n` is 0, returning 0.\n- Handle the case where `n` has only one digit, returning the product of that digit if it is odd or 0 if it is even.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log10(n)) where n is the input number.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `n` input or negative `n`.\n- Ensure the function works correctly with large input numbers.\n\n### Reliability\n- Avoid arithmetic operation errors, such as integer overflow, while computing the product of the odd digits.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The number 235 has odd digits 3 and 5, and their product is 15\nassert digits(235) == 15, 'Failed to find the product of odd digits.'\n\n### The number 123459 has odd digits 1, 3, 5, and 9, and their product is 135\nassert digits(123459) == 135, 'Failed to find the product of odd digits.'\n\n### The number 2468 has no odd digits, so the function should return 0\nassert digits(2468) == 0, 'Failed to handle case where all digits are even.'\n\n## Edge Cases\n### The number 0 has no odd digits, so the function should return 0\nassert digits(0) == 0, 'Failed to handle case where input is 0.'\n\n### The number 1 has only one digit, which is odd, so the function should return 1\nassert digits(1) == 1, 'Failed to handle case where input has only one odd digit.'\n\n### The number 2 has only one digit, which is even, so the function should return 0\nassert digits(2) == 0, 'Failed to handle case where input has only one even digit.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The number 10^6 has no odd digits, so the function should return 0\nassert digits(10**6) == 0, 'Failed to handle large input size.'\n\n### The number 10^6 - 1 has all odd digits, so the function should return the product of all the digits, which is 1\nassert digits(10**6 - 1) == 1, 'Failed to handle large input size with all odd digits.'\n\n### The number 10^6 + 1 has both odd and even digits, so the function should return the product of the odd digits, which is 1\nassert digits(10**6 + 1) == 1, 'Failed to handle large input size with odd and even digits.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input n is not a positive integer, so the function should return 0\nassert digits(-123) == 0, 'Failed to handle case where the input n is not a positive integer.'\n\n#### The input n is not an integer, so the function should return 0\nassert digits('invalid') == 0, 'Failed to handle case where the input n is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(digits))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/132",
        "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
        "solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "entry_point": "is_nested",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\ncheck(is_nested)",
        "plan": [
            "# 1. Initialize a count variable to keep track of the number of open brackets encountered.\n# 2. Loop through each character in the input string.\n# 3. If the character is an open bracket, increment the count.\n# 4. If the character is a closing bracket and the count is greater than 0, decrement the count.\n# 5. If the count is less than 0 at any point, return True.\n# 6. If the count is still 0 at the end of the loop, return False.\n# 7. If the count is greater than 0 at the end of the loop, return True."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.\n- A valid subsequence of brackets is defined as a sequence of opening and closing brackets that can be nested within each other in a valid manner.\n- The function should return False if there is no valid subsequence of brackets where at least one bracket is nested.\n\n## Edge Cases\n- Handle an empty string input, returning False.\n- Handle a string input that contains characters other than square brackets, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large input strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The string '[[]]' contains a valid subsequence of brackets where at least one bracket is nested\nassert is_nested('[[]]') == True, 'Failed to identify a nested bracket in a valid subsequence.'\n\n### The string '[]]]]]]][[[[[]' does not contain a valid subsequence of brackets where at least one bracket is nested\nassert is_nested('[]]]]]]][[[[[]') == False, 'Failed to identify absence of a nested bracket in any valid subsequence.'\n\n### The string '[][]' does not contain a valid subsequence of brackets where at least one bracket is nested\nassert is_nested('[][]') == False, 'Failed to identify absence of a nested bracket in any valid subsequence.'\n\n### The string '[]' does not contain a valid subsequence of brackets where at least one bracket is nested\nassert is_nested('[]') == False, 'Failed to identify absence of a nested bracket in any valid subsequence.'\n\n### The string '[[][]]' contains a valid subsequence of brackets where at least one bracket is nested\nassert is_nested('[[][]]') == True, 'Failed to identify a nested bracket in a valid subsequence.'\n\n### The string '[[]][[' contains a valid subsequence of brackets where at least one bracket is nested\nassert is_nested('[[]][[') == True, 'Failed to identify a nested bracket in a valid subsequence.'\n\n## Edge Cases\n### The input string is empty, so the function should return False\nassert is_nested('') == False, 'Failed to handle an empty input string.'\n\n### The input string contains characters other than square brackets, so the function should return False\nassert is_nested('[[]]]a]]][[[[[]') == False, 'Failed to handle case where the input string contains characters other than square brackets.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 opening brackets followed by 10^6 closing brackets\n### None of the brackets are nested, so the function should return False\nassert is_nested('['*10**6 + ']'*10**6) == False, 'Failed to handle large input size.'\n\n### The input string contains 10^6 nested brackets, where each nested sequence is surrounded by a pair of brackets\n### At least one bracket is nested, so the function should return True\nassert is_nested('[[]]'*10**6) == True, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return False\nassert is_nested(123) == False, 'Failed to handle case where the input is not a string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_nested))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/133",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
        "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "entry_point": "sum_squares",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(sum_squares)",
        "plan": [
            "# 1. Initialize a variable to keep track of the sum of squared numbers.\n# 2. Loop through each element in the input list.\n# 3. Round each element to the upper integer (ceiling) using the math.ceil() function.\n# 4. Square the rounded element.\n# 5. Add the squared element to the sum of squared numbers.\n# 6. Return the sum of squared numbers."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of numbers `lst` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of squared numbers in the given list, where each element is rounded to the nearest upper integer (ceiling) before squaring.\n\n## Edge Cases\n- Handle an empty `lst`, returning 0.\n- Handle non-numeric elements in `lst`.\n- Handle negative numbers in `lst`.\n- Handle floating-point numbers in `lst`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `lst`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input.\n- Handle non-numeric elements in `lst`.\n\n### Reliability\n- Avoid arithmetic operation errors (e.g., division by zero, overflow) when calculating the sum of squared numbers.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The squared numbers in the list are [1^2, 2^2, 3^2] = [1, 4, 9]\n### The sum of squared numbers is 1 + 4 + 9 = 14\nassert sum_squares([1, 2, 3]) == 14, 'Failed to calculate the sum of squared numbers correctly.'\n\n### The squared numbers in the list are [1^2, 4^2, 9^2] = [1, 16, 81]\n### The sum of squared numbers is 1 + 16 + 81 = 98\nassert sum_squares([1, 4, 9]) == 98, 'Failed to calculate the sum of squared numbers correctly.'\n\n### The squared numbers in the list are [1^2, 3^2, 5^2, 7^2] = [1, 9, 25, 49]\n### The sum of squared numbers is 1 + 9 + 25 + 49 = 84\nassert sum_squares([1, 3, 5, 7]) == 84, 'Failed to calculate the sum of squared numbers correctly.'\n\n### The squared numbers in the list are [ceil(1.4)^2, ceil(4.2)^2, ceil(0)^2] = [2^2, 5^2, 0^2] = [4, 25, 0]\n### The sum of squared numbers is 4 + 25 + 0 = 29\nassert sum_squares([1.4, 4.2, 0]) == 29, 'Failed to calculate the sum of squared numbers correctly.'\n\n### The squared numbers in the list are [ceil(-2.4)^2, ceil(1)^2, ceil(1)^2] = [-2^2, 1^2, 1^2] = [4, 1, 1]\n### The sum of squared numbers is 4 + 1 + 1 = 6\nassert sum_squares([-2.4, 1, 1]) == 6, 'Failed to calculate the sum of squared numbers correctly.'\n\n## Edge Cases\n### The input list is empty, so the function should return 0\nassert sum_squares([]) == 0, 'Failed to handle an empty input list.'\n\n### The list contains non-numeric elements, so the function should ignore them and calculate the sum of squared numbers for the numeric elements\n### The squared numbers in the list are [1^2, 3^2, 5^2, 7^2] = [1, 9, 25, 49]\n### The sum of squared numbers is 1 + 9 + 25 + 49 = 84\nassert sum_squares([1, 3, 'invalid', 5, 7]) == 84, 'Failed to ignore non-numeric elements in the list.'\n\n### The list contains negative numbers, so the function should round them to the nearest upper integer (ceiling) and calculate the sum of squared numbers\n### The squared numbers in the list are [ceil(-2)^2, ceil(-1)^2, ceil(0)^2] = [-2^2, -1^2, 0^2] = [4, 1, 0]\n### The sum of squared numbers is 4 + 1 + 0 = 5\nassert sum_squares([-2.4, -1.2, 0]) == 5, 'Failed to handle negative numbers in the list.'\n\n### The list contains floating-point numbers, so the function should round them to the nearest upper integer (ceiling) and calculate the sum of squared numbers\n### The squared numbers in the list are [ceil(1.6)^2, ceil(2.4)^2, ceil(3.8)^2] = [2^2, 3^2, 4^2] = [4, 9, 16]\n### The sum of squared numbers is 4 + 9 + 16 = 29\nassert sum_squares([1.6, 2.4, 3.8]) == 29, 'Failed to handle floating-point numbers in the list.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements, all of which are 1\n### The squared numbers in the list are [1^2, 1^2, ..., 1^2] = [1, 1, ..., 1]\n### The sum of squared numbers is 1 + 1 + ... + 1 (10^6 times) = 10^6\nassert sum_squares([1] * 10**6) == 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input lst is not a list, so the function should return 0\nassert sum_squares('invalid') == 0, 'Failed to handle case where the input lst is not a list.'\n\n#### The input lst contains elements that are not numbers, so the function should ignore them and calculate the sum of squared numbers for the numeric elements\n### The squared numbers in the list are [1^2, 3^2, 5^2, 7^2] = [1, 9, 25, 49]\n### The sum of squared numbers is 1 + 9 + 25 + 49 = 84\nassert sum_squares([1, 3, 'invalid', 5, 7]) == 84, 'Failed to ignore non-numeric elements in the list.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sum_squares))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/134",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n",
        "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "entry_point": "check_if_last_char_is_a_letter",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(check_if_last_char_is_a_letter)",
        "plan": [
            "# 1. Check if the input string is empty. If it is, return False.\n# 2. Split the input string into a list of words using the split() function.\n# 3. Check if the last character of the last word is an alphabetical character.\n# 4. If the last character is not an alphabetical character, return False.\n# 5. Check if the last word is a single character.\n# 6. If the last word is a single character, return True.\n# 7. Otherwise, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and any other potential errors.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `txt` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the last character of the input string is an alphabetical character and is not part of a word (a group of characters separated by spaces). Otherwise, it should return False.\n\n## Edge Cases\n- Handle an empty input string, returning False.\n- Handle the case where the last character is an alphabetical character and is not part of a word.\n- Handle the case where the last character is an alphabetical character but is part of a word.\n- Handle the case where the last character is not an alphabetical character.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string `txt`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n\n### Reliability\n- Avoid index errors while accessing characters in the input string.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The last character 'e' is an alphabetical character but is part of the word 'pie'\n### The function should return False\nassert check_if_last_char_is_a_letter(\"apple pie\") == False, 'Failed for the case where the last character is part of a word.'\n\n### The last character 'e' is an alphabetical character and is not part of a word\n### The function should return True\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True, 'Failed for the case where the last character is not part of a word.'\n\n### The last character ' ' is not an alphabetical character\n### The function should return False\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False, 'Failed for the case where the last character is not an alphabetical character.'\n\n### The input string is empty\n### The function should return False\nassert check_if_last_char_is_a_letter(\"\") == False, 'Failed for the case where the input string is empty.'\n\n## Edge Cases\n### The input string is a single alphabetical character 'a'\n### The last character 'a' is not part of a word\n### The function should return True\nassert check_if_last_char_is_a_letter(\"a\") == True, 'Failed for the case where the input string has a single alphabetical character.'\n\n### The input string is a single non-alphabetical character '!'\n### The last character '!' is not an alphabetical character\n### The function should return False\nassert check_if_last_char_is_a_letter(\"!\") == False, 'Failed for the case where the input string has a single non-alphabetical character.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 alphabetical characters 'a'\n### The last character 'a' is not part of a word\n### The function should return True\nassert check_if_last_char_is_a_letter(\"a\" * 10**6) == True, 'Failed to handle large input size.'\n\n### The input string contains 10^6 non-alphabetical characters '!'\n### The last character '!' is not an alphabetical character\n### The function should return False\nassert check_if_last_char_is_a_letter(\"!\" * 10**6) == False, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return False\nassert check_if_last_char_is_a_letter(123) == False, 'Failed to handle case where the input is not a string.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(check_if_last_char_is_a_letter))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/135",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "entry_point": "can_arrange",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\ncheck(can_arrange)",
        "plan": [
            "# 1. Initialize a variable `result` to -1, which will store the index of the element that is not greater than its preceding element.\n# 2. Loop through the elements of the array starting from the second element.\n# 3. Compare the current element with its preceding element. If it is not greater than or equal to the preceding element, update the `result` variable with the current index.\n# 4. After the loop ends, return the value of `result`, which will be the largest index of an element that is not greater than or equal to its preceding element. If no such element exists, the value of `result` will still be -1."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `arr` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the largest index of an element in `arr` that is not greater than or equal to the element immediately preceding it.\n- If no such element exists, the function should return -1.\n\n## Edge Cases\n- Handle an empty `arr`, returning -1.\n- Handle a single-element `arr`, returning -1.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `arr`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `arr` input or non-integer elements in the `arr` list.\n\n### Reliability\n- Avoid index errors while accessing `arr` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The largest index of an element that is not greater than or equal to the element immediately preceding it is 3\nassert can_arrange([1, 2, 4, 3, 5]) == 3, 'Failed to find the largest index.'\n\n### All elements in the array are greater than or equal to the element immediately preceding it\n### Therefore, the function should return -1\nassert can_arrange([1, 2, 3]) == -1, 'Failed to handle case where no such element exists.'\n\n## Edge Cases\n### The input array is empty, so the function should return -1\nassert can_arrange([]) == -1, 'Failed to handle an empty input array.'\n\n### The input array has only one element, so the function should return -1\nassert can_arrange([5]) == -1, 'Failed to handle case where the input array has only one element.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The arr list contains 10^6 elements with increasing values from 1 to 10^6\n### The largest index of an element that is not greater than or equal to the element immediately preceding it is 999999\nassert can_arrange(list(range(1, 10**6 + 1))) == 999999, 'Failed to handle large input size.'\n\n### The arr list contains 10^6 elements with decreasing values from 10^6 to 1\n### All elements in the array are greater than or equal to the element immediately preceding it\n### Therefore, the function should return -1\nassert can_arrange(list(range(10**6, 0, -1))) == -1, 'Failed to handle case where all elements in the array are greater than or equal to the element immediately preceding it.'\n\n### The arr list contains 10^6 elements, all of which are 1\n### All elements in the array are greater than or equal to the element immediately preceding it\n### Therefore, the function should return -1\nassert can_arrange([1] * 10**6) == -1, 'Failed to handle case where all elements in the array are equal.'\n\n## Specific Quality Requirements\n### Robustness\n#### The arr input is not a list, so the function should return -1\nassert can_arrange('invalid') == -1, 'Failed to handle case where the input arr is not a list.'\n\n#### The arr list contains elements that are not integers, so the function should return -1\nassert can_arrange([1, 'invalid', 3, 4, 5]) == -1, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(can_arrange))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/136",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "entry_point": "largest_smallest_integers",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(largest_smallest_integers)",
        "plan": [
            "# 1. Initialize variables `largest_neg` and `smallest_pos` as None.\n# 2. Loop through each element in the input list.\n# 3. Check if the current element is negative and if it is larger than the current largest negative number.\n#    - If it is, update `largest_neg` with the current element.\n# 4. Check if the current element is positive and if it is smaller than the current smallest positive number.\n#    - If it is, update `smallest_pos` with the current element.\n# 5. Return a tuple `(largest_neg, smallest_pos)`."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `lst` as input.\n- It returns a tuple `(a, b)` where `a` is the largest negative integer in `lst` and `b` is the smallest positive integer in `lst`. If there are no negative or positive integers in `lst`, return `(None, None)`.\n\n## Expected Behavior\n- The function should find the largest negative integer and the smallest positive integer in `lst` and return them as a tuple `(a, b)`.\n- If there are no negative integers in `lst`, `a` should be None.\n- If there are no positive integers in `lst`, `b` should be None.\n\n## Edge Cases\n- Handle an empty `lst` list, returning `(None, None)`.\n- Handle the case where there are no negative integers in `lst`, returning `(None, b)` where `b` is the smallest positive integer in `lst`.\n- Handle the case where there are no positive integers in `lst`, returning `(a, None)` where `a` is the largest negative integer in `lst`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `lst` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input.\n- Handle non-integer elements in the `lst` list.\n\n### Reliability\n- Avoid index errors while accessing `lst` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The largest negative integer is -2 and the smallest positive integer is 1\nassert largest_smallest_integers([2, 4, -2, 1, 3, 5, 7]) == (-2, 1), 'Failed to find the largest negative and smallest positive integers.'\n\n### There are no negative integers in the list, so the largest negative integer should be None\nassert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1), 'Failed to handle case where there are no negative integers.'\n\n### There are no positive integers in the list, so the smallest positive integer should be None\nassert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-2, None), 'Failed to handle case where there are no positive integers.'\n\n## Edge Cases\n### The input list is empty, so both the largest negative and smallest positive integers should be None\nassert largest_smallest_integers([]) == (None, None), 'Failed to handle an empty input list.'\n\n### The input list contains only 0, so both the largest negative and smallest positive integers should be None\nassert largest_smallest_integers([0]) == (None, None), 'Failed to handle case where the list contains only 0.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements with increasing values from -10^6 to 10^6\n### The largest negative integer is -10^6 and the smallest positive integer is 1\nassert largest_smallest_integers(list(range(-10**6, 10**6 + 1))) == (-10**6, 1), 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements with increasing values from -10^6 to -1\n### There are no positive integers in the list, so the smallest positive integer should be None\nassert largest_smallest_integers(list(range(-10**6, 0))) == (-10**6, None), 'Failed to handle case where there are no positive integers.'\n\n### The input list contains 10^6 elements with decreasing values from 10^6 to 1\n### There are no negative integers in the list, so the largest negative integer should be None\nassert largest_smallest_integers(list(range(10**6, 0, -1))) == (None, 1), 'Failed to handle case where there are no negative integers.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input list is not a list, so both the largest negative and smallest positive integers should be None\nassert largest_smallest_integers('invalid') == (None, None), 'Failed to handle case where the input list is not a list.'\n\n#### The input list contains elements that are not integers, so both the largest negative and smallest positive integers should be None\nassert largest_smallest_integers([1, 2, 'invalid', 4]) == (None, None), 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(largest_smallest_integers))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/137",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n",
        "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "entry_point": "compare_one",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(compare_one)",
        "plan": [
            "# 1. Check the variable type of both inputs, a and b.\n# 2. If both variables are of the same type, compare their values and return the larger one. If they are equal, return None.\n# 3. If the variables are of different types, check if either of them is a string representation of a real number.\n# 4. If one of them is a string representation of a real number, convert it to a float and compare the values. Return the larger one. If they are equal, return None.\n# 5. If both variables are strings but not real number representations, compare them as strings and return the larger one. If they are equal, return None.\n# 6. If one variable is a string and the other is a number, return None since they cannot be compared.\n# 7. If both variables are numbers of different types (integer and float), return None since they cannot be compared."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two variables `a` and `b` as input.\n- It returns a variable of the same type as the input variables, representing the larger value. If the values are equal, it returns None.\n\n## Expected Behavior\n- The function should compare the values of `a` and `b` and return the larger value, taking into account the variable types.\n- If both values are equal, it should return None.\n\n## Edge Cases\n- Handle non-integer or non-float input variables, returning None.\n- Handle non-numeric string representations, returning None.\n- Handle string representations of real numbers with both \".\" and \",\" as the decimal separator.\n- Handle integer and float inputs, returning the larger value.\n- Handle string and numeric inputs, returning the larger value if possible. If not, return None.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-numeric input variables.\n- Handle string representations of real numbers with incorrect formatting, such as missing or multiple decimal separators.\n- Handle NaN (Not a Number) and infinity values in the inputs.\n- Handle case sensitivity in string comparisons.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The larger value is the float value 2.5\nassert compare_one(1, 2.5) == 2.5, 'Failed to return the larger value.'\n\n### The larger value is the string \"2,3\"\nassert compare_one(1, \"2,3\") == \"2,3\", 'Failed to return the larger value when one value is a string.'\n\n### The larger value is the string \"6\"\nassert compare_one(\"5,1\", \"6\") == \"6\", 'Failed to return the larger value when both values are strings.'\n\n### The values are equal, so the function should return None\nassert compare_one(\"1\", 1) == None, 'Failed to return None when the values are equal.'\n\n## Edge Cases\n### Both input variables are integers, so the larger value is 5\nassert compare_one(5, 3) == 5, 'Failed to return the larger value when both variables are integers.'\n\n### The decimal separator in the string representation is a \",\"\n### The larger value is the string \"10,2\"\nassert compare_one(\"5,2\", \"10,2\") == \"10,2\", 'Failed to handle string representations with \",\" as the decimal separator.'\n\n### The decimal separator in the string representation is a \".\"\n### The larger value is the string \"10.2\"\nassert compare_one(\"5.2\", \"10.2\") == \"10.2\", 'Failed to handle string representations with \".\" as the decimal separator.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Satisfied if no errors occur across all test cases\n\n## Specific Quality Requirements\n### Robustness\n#### The input variables are non-numeric, so the function should return None\nassert compare_one(\"invalid\", 5) == None, 'Failed to handle non-numeric input variables.'\n\n#### The string representations have incorrect formatting, so the function should return None\nassert compare_one(\"5,2,3\", \"10.2\") == None, 'Failed to handle string representations with incorrect formatting.'\n\n#### The input variables are NaN, so the function should return None\nassert compare_one(float('nan'), float('nan')) == None, 'Failed to handle NaN input variables.'\n\n#### The input variables are infinity, so the function should return None\nassert compare_one(float('inf'), float('inf')) == None, 'Failed to handle infinity input variables.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(compare_one))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/138",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
        "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n%2 == 0 and n >= 8\n",
        "entry_point": "is_equal_to_sum_even",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\ncheck(is_equal_to_sum_even)",
        "plan": [
            "# 1. Iterate through all possible combinations of 4 positive even numbers.\n# 2. Check if the sum of the current combination is equal to the given number n.\n# 3. If a combination is found where the sum is equal to n, return True.\n# 4. If no such combination is found, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns a boolean value indicating whether `n` can be written as the sum of exactly 4 positive even numbers.\n\n## Expected Behavior\n- The function should return True if `n` can be written as the sum of exactly 4 positive even numbers, and False otherwise.\n\n## Edge Cases\n- Handle a negative input value of `n`, returning False.\n- Handle a non-integer input value of `n`, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `n` input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The number 4 cannot be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(4) == False, 'Failed to handle case where the number cannot be written as the sum of 4 positive even numbers.'\n\n### The number 6 cannot be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(6) == False, 'Failed to handle case where the number cannot be written as the sum of 4 positive even numbers.'\n\n### The number 8 can be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(8) == True, 'Failed to handle case where the number can be written as the sum of 4 positive even numbers.'\n\n## Edge Cases\n### The number is negative, so it cannot be written as the sum of 4 positive even numbers\nassert is_equal_to_sum_even(-10) == False, 'Failed to handle case where the number is negative.'\n\n### The number is not an integer, so it cannot be written as the sum of 4 positive even numbers\nassert is_equal_to_sum_even(8.5) == False, 'Failed to handle case where the number is not an integer.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Satisfied if the function executes within 1 second for any valid input\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not an integer, so the function should return False\nassert is_equal_to_sum_even('invalid') == False, 'Failed to handle case where the input is not an integer.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(is_equal_to_sum_even))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/139",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "entry_point": "special_factorial",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\ncheck(special_factorial)",
        "plan": [
            "# 1. Initialize a variable `result` to 1.\n# 2. Loop from `n` to 1 (inclusive) and for each iteration:\n#    a. Calculate the factorial of the current number using a helper function `factorial()`.\n#    b. Multiply the `result` by the factorial of the current number.\n# 3. Return the `result`.\n\n# Helper function:\n# def factorial(n):\n#     \"\"\"Calculate the factorial of a number.\"\"\"\n#     if n == 0 or n == 1:\n#         return 1\n#     else:\n#         return n * factorial(n-1)"
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should calculate and return the special factorial of `n`.\n\n## Edge Cases\n- Handle the case where `n` is 0 or 1, returning 1.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the value of `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `n` or a negative `n`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### special_factorial(4) = 4! * 3! * 2! * 1! = 24 * 6 * 2 * 1 = 288\nassert special_factorial(4) == 288, 'Failed to calculate the special factorial correctly.'\n\n### special_factorial(5) = 5! * 4! * 3! * 2! * 1! = 120 * 24 * 6 * 2 * 1 = 34560\nassert special_factorial(5) == 34560, 'Failed to calculate the special factorial correctly.'\n\n### special_factorial(6) = 6! * 5! * 4! * 3! * 2! * 1! = 720 * 120 * 24 * 6 * 2 * 1 = 1244160\nassert special_factorial(6) == 1244160, 'Failed to calculate the special factorial correctly.'\n\n## Edge Cases\n### special_factorial(0) = 1\n### The function should return 1 for any input of 0 or 1.\nassert special_factorial(0) == 1, 'Failed to handle the special factorial of 0.'\n\n### special_factorial(1) = 1\nassert special_factorial(1) == 1, 'Failed to handle the special factorial of 1.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Calculate the special factorial for a large input value of 10^6\n### The function should provide the result within 5 seconds.\nassert special_factorial(10**6) == 0, 'Failed to handle large input size.'\n\n### Calculate the special factorial for a small input value of 10^2\n### The function should provide the result instantly.\nassert special_factorial(10**2) == 1124000727777607680000, 'Failed to handle small input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input `n` is a negative number, so the function should return 0.\nassert special_factorial(-10) == 0, 'Failed to handle case where `n` is a negative number.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(special_factorial))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/140",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
        "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "entry_point": "fix_spaces",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\ncheck(fix_spaces)",
        "plan": [
            "# 1. Create an empty list to store the modified characters.\n# 2. Initialize a variable to keep track of the consecutive spaces count.\n# 3. Loop through each character in the input string.\n# 4. If the character is a space, check if the consecutive spaces count is greater than 2.\n# 5. If it is, add a '-' to the list of modified characters and reset the consecutive spaces count.\n# 6. If the consecutive spaces count is not greater than 2, add an underscore '_' to the list of modified characters and increment the consecutive spaces count.\n# 7. If the character is not a space, add it to the list of modified characters and reset the consecutive spaces count.\n# 8. Join the list of modified characters into a string and return it."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `text` as input.\n- It returns a modified string.\n\n## Expected Behavior\n- The function should replace all spaces in the input string with underscores.\n- If the input string has more than 2 consecutive spaces, the function should replace all consecutive spaces with a hyphen '-'.\n- The modified string should be returned.\n\n## Edge Cases\n- Handle an empty string input, returning an empty string.\n- Handle a string with only spaces, returning a string with only underscores.\n- Handle a string with consecutive spaces at the beginning or end, replacing them with underscores or a hyphen respectively.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string.\n- Space complexity: O(n) where n is the length of the input string.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n- Handle non-space characters in the input string.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### There are no spaces in the input string, so the function should return the same string\nassert fix_spaces(\"Example\") == \"Example\", 'Failed to handle case where there are no spaces in the string.'\n\n### There is a single space in the input string, so the function should replace it with an underscore\nassert fix_spaces(\"Example 1\") == \"Example_1\", 'Failed to handle case where there is a single space in the string.'\n\n### There are two consecutive spaces in the input string, so the function should replace them with an underscore\nassert fix_spaces(\" Example 2\") == \"_Example_2\", 'Failed to handle case where there are two consecutive spaces in the string.'\n\n### There are three consecutive spaces in the input string, so the function should replace them with a hyphen\nassert fix_spaces(\" Example   3\") == \"_Example-3\", 'Failed to handle case where there are three consecutive spaces in the string.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty string\nassert fix_spaces(\"\") == \"\", 'Failed to handle an empty input string.'\n\n### The input string contains only spaces, so the function should replace them all with underscores\nassert fix_spaces(\"     \") == \"_____\", 'Failed to handle case where the input string contains only spaces.'\n\n### The input string starts with spaces, so the function should replace them all with underscores\nassert fix_spaces(\"   Example\") == \"___Example\", 'Failed to handle case where the input string starts with spaces.'\n\n### The input string ends with spaces, so the function should replace them all with underscores\nassert fix_spaces(\"Example   \") == \"Example___\", 'Failed to handle case where the input string ends with spaces.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 spaces\n### The function should replace all spaces with underscores\nassert fix_spaces(\" \" * 10**6) == \"_\" * 10**6, 'Failed to handle large input size.'\n\n### The input string contains 10^6 consecutive spaces\n### The function should replace all spaces with a hyphen\nassert fix_spaces(\" \" * 10**6) == \"-\" * 10**6, 'Failed to handle case where there are 10^6 consecutive spaces.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty string\nassert fix_spaces(123) == \"\", 'Failed to handle case where the input is not a string.'\n\n#### The input string contains non-space characters, so the function should replace spaces only\nassert fix_spaces(\"Example 1!\") == \"Example_1!\", 'Failed to handle case where the input string contains non-space characters.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(fix_spaces))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/141",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
        "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "entry_point": "file_name_check",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\ncheck(file_name_check)",
        "plan": [
            "# 1. Check the number of digits in the file's name using the isdigit() function and count them.\n# 2. Check if the file's name contains exactly one dot using the count() function.\n# 3. Check if the substring before the dot is not empty and starts with a letter using the isalpha() function and indexing.\n# 4. Check if the substring after the dot is either 'txt', 'exe', or 'dll'.\n# 5. Return 'Yes' if all the conditions are met, 'No' otherwise."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and other potential errors.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `file_name` as input.\n- It returns a string, either 'Yes' or 'No'.\n\n## Expected Behavior\n- The function should return 'Yes' if the file's name is valid, and 'No' otherwise.\n\n## Edge Cases\n- Handle an empty `file_name` string, returning 'No'.\n- Handle a `file_name` string with more than three digits, returning 'No'.\n- Handle a `file_name` string with more than one dot, returning 'No'.\n- Handle a `file_name` string where the substring before the dot is empty or does not start with a letter, returning 'No'.\n- Handle a `file_name` string where the substring after the dot is not in ['txt', 'exe', 'dll'], returning 'No'.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `file_name` string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-string `file_name` input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The file name is valid, satisfies all conditions\nassert file_name_check(\"example.txt\") == 'Yes', 'Failed to validate a valid file name.'\n\n### The file name does not start with a letter\nassert file_name_check(\"1example.dll\") == 'No', 'Failed to invalidate a file name that does not start with a letter.'\n\n### The file name has more than three digits\nassert file_name_check(\"file_12345.txt\") == 'No', 'Failed to invalidate a file name with more than three digits.'\n\n### The file name has more than one dot\nassert file_name_check(\"file.name.txt\") == 'No', 'Failed to invalidate a file name with more than one dot.'\n\n### The file name has an empty substring before the dot\nassert file_name_check(\".txt\") == 'No', 'Failed to invalidate a file name with an empty substring before the dot.'\n\n### The file name has an invalid extension\nassert file_name_check(\"example.exe\") == 'No', 'Failed to invalidate a file name with an invalid extension.'\n\n## Edge Cases\n### The file name is an empty string, so it should return 'No'\nassert file_name_check(\"\") == 'No', 'Failed to handle an empty file name.'\n\n### The file name has exactly three digits, so it is valid\nassert file_name_check(\"file_123.txt\") == 'Yes', 'Failed to validate a file name with exactly three digits.'\n\n### The file name has exactly one digit, so it is valid\nassert file_name_check(\"file_1.txt\") == 'Yes', 'Failed to validate a file name with exactly one digit.'\n\n### The file name has exactly one letter before the dot, so it is valid\nassert file_name_check(\"a.txt\") == 'Yes', 'Failed to validate a file name with exactly one letter before the dot.'\n\n### The file name has an uppercase letter before the dot, so it is valid\nassert file_name_check(\"A.txt\") == 'Yes', 'Failed to validate a file name with an uppercase letter before the dot.'\n\n### The file name has an extension of 'txt', so it is valid\nassert file_name_check(\"example.txt\") == 'Yes', 'Failed to validate a file name with a valid extension.'\n\n### The file name has an extension of 'exe', so it is valid\nassert file_name_check(\"example.exe\") == 'Yes', 'Failed to validate a file name with a valid extension.'\n\n### The file name has an extension of 'dll', so it is valid\nassert file_name_check(\"example.dll\") == 'Yes', 'Failed to validate a file name with a valid extension.'\n\n### The file name has an extension that is not 'txt', 'exe', or 'dll', so it is invalid\nassert file_name_check(\"example.pdf\") == 'No', 'Failed to invalidate a file name with an invalid extension.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The file name has a length of 10^6 characters and satisfies all conditions, so it is valid\nassert file_name_check(\"a\" * 10**6 + \".txt\") == 'Yes', 'Failed to validate a file name with a large length.'\n\n### The file name has a length of 10^6 characters and does not satisfy the condition of having exactly one dot, so it is invalid\nassert file_name_check(\"a\" * 10**6) == 'No', 'Failed to invalidate a file name with a large length and missing dot.'\n\n## Specific Quality Requirements\n### Robustness\n#### The file name input is not a string, so it should return 'No'\nassert file_name_check(123) == 'No', 'Failed to handle a non-string file name input.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(file_name_check))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/142",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "entry_point": "sum_squares",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\ncheck(sum_squares)",
        "plan": [
            "# 1. Initialize a variable to keep track of the sum.\n# 2. Loop through each element in the input list along with its index.\n# 3. Check if the index is a multiple of 3.\n# 4. If it is, square the element and add it to the sum.\n# 5. Check if the index is a multiple of 4 and not a multiple of 3.\n# 6. If it is, cube the element and add it to the sum.\n# 7. Return the final sum."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `lst` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should square the integer entry in `lst` if its index is a multiple of 3.\n- The function should cube the integer entry in `lst` if its index is a multiple of 4 and not a multiple of 3.\n- The function should not change the entries in `lst` whose indexes are not a multiple of 3 or 4.\n- The function should return the sum of all entries in `lst` after applying the above transformations.\n\n## Edge Cases\n- Handle an empty `lst`, returning 0.\n- Handle a non-list input, returning None.\n- Handle non-integer elements in `lst`, skipping them during the sum calculation.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `lst`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer elements in `lst`.\n- Handle non-list `lst` input.\n\n### Reliability\n- Avoid index errors while accessing `lst` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list is [1, 2, 3].\n### The elements at index 0 (1) and index 3 (3) should be squared, resulting in [1, 2, 3].\n### The sum of all elements in the list is 6.\nassert sum_squares([1, 2, 3]) == 6, 'Failed to compute the correct sum for the given list.'\n\n### The input list is empty, so the sum should be 0.\nassert sum_squares([]) == 0, 'Failed to handle an empty input list.'\n\n### The input list is [-1, -5, 2, -1, -5].\n### The elements at index 4 (-5) should be squared, resulting in [-1, -5, 2, -1, 25].\n### The elements at index 8 (-5) should be cubed, resulting in [-1, -5, 2, -1, 25].\n### The sum of all elements in the list is -126.\nassert sum_squares([-1, -5, 2, -1, -5]) == -126, 'Failed to compute the correct sum for the given list.'\n\n## Edge Cases\n### The input is not a list, so the function should return None.\nassert sum_squares('invalid') == None, 'Failed to handle case where the input is not a list.'\n\n### The input list contains non-integer elements, so they should be skipped during the sum calculation.\n### The elements at index 0 (1) and index 6 (2) should be squared, resulting in [1, 2, 3].\n### The sum of all elements in the list is 6.\nassert sum_squares([1, 'invalid', 3, 'invalid', 5, 'invalid', 2]) == 6, 'Failed to handle case where the input list contains non-integer elements.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 elements, all of which are 1.\n### The elements at index 3, 6, 9, 12, ... should be squared, resulting in a list of 10^6 elements, all of which are 1.\n### The elements at index 4, 8, 12, 16, ... should be cubed, resulting in a list of 10^6 elements, all of which are 1.\n### The sum of all elements in the list is 10^6 + 10^6 = 2 * 10^6.\nassert sum_squares([1] * 10**6) == 2 * 10**6, 'Failed to handle large input size.'\n\n### The input list contains 10^6 elements, all of which are 1.\n### The elements at index 3, 6, 9, 12, ... should be squared, resulting in a list of 10^6 elements, all of which are 1.\n### The sum of all elements in the list is 10^6.\nassert sum_squares([1] * 10**6) == 10**6, 'Failed to handle case where the subarray length is 1.'\n\n### The input list contains 10^6 elements, all of which are 1.\n### The elements at index 4, 8, 12, 16, ... should be cubed, resulting in a list of 10^6 elements, all of which are 1.\n### The sum of all elements in the list is 10^6.\nassert sum_squares([1] * 10**6) == 10**6, 'Failed to handle case where the subarray length is 2.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a list, so the function should return None.\nassert sum_squares('invalid') == None, 'Failed to handle case where the input is not a list.'\n\n#### The input list contains non-integer elements, so they should be skipped during the sum calculation.\nassert sum_squares([1, 'invalid', 3, 'invalid', 5, 'invalid', 2]) == 6, 'Failed to handle case where the input list contains non-integer elements.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sum_squares))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/143",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
        "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "entry_point": "words_in_sentence",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\ncheck(words_in_sentence)",
        "plan": [
            "# 1. Split the input sentence into a list of words using the split() method.\n# 2. Create an empty list to store the words with prime lengths.\n# 3. Loop through each word in the list.\n# 4. For each word, calculate its length and check if it is a prime number.\n# 5. If the length is a prime number, add the word to the list of words with prime lengths.\n# 6. Join the list of words with prime lengths into a single string using the join() method, separating each word with a space.\n# 7. Return the resulting string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `sentence` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should return a string that contains the words from the original sentence whose lengths are prime numbers.\n- The order of the words in the new string should be the same as the original one.\n\n## Edge Cases\n- Handle an empty `sentence`, returning an empty string.\n- Handle the case where no word in `sentence` has a prime length, returning an empty string.\n- Handle multiple words with the same prime length, returning any of them.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n * m) where n is the number of words in `sentence` and m is the average length of the words.\n- Space complexity: O(k) where k is the number of words with prime lengths in `sentence`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string `sentence` input.\n- Handle non-letter characters in `sentence`.\n\n### Reliability\n- Ensure that the order of the words in the resulting string is the same as the original sentence.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### There is one word in the sentence whose length is a prime number: \"is\"\nassert words_in_sentence(\"This is a test\") == \"is\", 'Failed to return the correct string with words of prime lengths.'\n\n### There are two words in the sentence whose lengths are prime numbers: \"go\" and \"for\"\n### The order of the words in the new string should be the same as the original one: \"go for\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\", 'Failed to return the correct string with words of prime lengths.'\n\n## Edge Cases\n### The sentence is empty, so the function should return an empty string\nassert words_in_sentence(\"\") == '', 'Failed to handle an empty sentence.'\n\n### None of the words in the sentence have a length that is a prime number\n### The function should return an empty string\nassert words_in_sentence(\"This is not a prime\") == '', 'Failed to handle case where no word has a prime length.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The sentence contains 10^6 words, all of which have a length of 10\n### The function should return an empty string since there are no words with prime lengths\nassert words_in_sentence(\" \".join([\"a\" * 10] * 10**6)) == '', 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The sentence input is not a string, so the function should return an empty string\nassert words_in_sentence(12345) == '', 'Failed to handle case where the input sentence is not a string.'\n\n#### The sentence input contains characters other than letters, so the function should return an empty string\nassert words_in_sentence(\"This is a sentence with special characters!\") == '', 'Failed to handle case where the input sentence contains non-letter characters.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(words_in_sentence))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/144",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
        "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "entry_point": "simplify",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\ncheck(simplify)",
        "plan": [
            "# 1. Extract the numerator and denominator from the given fractions x and n.\n# 2. Convert the numerator and denominator into integers.\n# 3. Multiply the numerator and denominator of x and n.\n# 4. Check if the result is divisible evenly by the denominator.\n# 5. If the result is divisible evenly, return True. Otherwise, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two string representations of fractions, `x` and `n`, as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if the product of `x` and `n` evaluates to a whole number, and False otherwise.\n\n## Edge Cases\n- Handle invalid inputs, such as non-string or empty inputs, returning False.\n- Handle fractions with zero as the denominator, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string inputs or empty strings for `x` and `n`.\n- Handle invalid fraction strings, such as those with non-numeric characters or missing numerators/denominators.\n\n### Reliability\n- Ensure that the function correctly checks if the product of `x` and `n` is a whole number.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The product of \"1/5\" and \"5/1\" is 1, which is a whole number\nassert simplify(\"1/5\", \"5/1\") == True, 'Failed to simplify the expression correctly.'\n\n### The product of \"1/6\" and \"2/1\" is 1/3, which is not a whole number\nassert simplify(\"1/6\", \"2/1\") == False, 'Failed to simplify the expression correctly.'\n\n### The product of \"7/10\" and \"10/2\" is 35, which is a whole number\nassert simplify(\"7/10\", \"10/2\") == True, 'Failed to simplify the expression correctly.'\n\n## Edge Cases\n### The product of \"1/1\" and \"1/1\" is 1, which is a whole number\nassert simplify(\"1/1\", \"1/1\") == True, 'Failed to simplify the expression correctly when both fractions are equal.'\n\n### The product of \"1/2\" and \"3/4\" is 3/8, which is not a whole number\nassert simplify(\"1/2\", \"3/4\") == False, 'Failed to simplify the expression correctly when the result is a proper fraction.'\n\n### The product of \"2/3\" and \"3/2\" is 1, which is a whole number\nassert simplify(\"2/3\", \"3/2\") == True, 'Failed to simplify the expression correctly when the result is an integer.'\n\n### The product of \"4/7\" and \"7/4\" is 1, which is a whole number\nassert simplify(\"4/7\", \"7/4\") == True, 'Failed to simplify the expression correctly when both fractions are reciprocal.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Satisfied if the function executes within a reasonable time for all inputs\n\n## Specific Quality Requirements\n### Robustness\n#### The x input is not a string, so the function should return False\nassert simplify(1/2, \"3/4\") == False, 'Failed to handle case where the x input is not a string.'\n\n#### The n input is an empty string, so the function should return False\nassert simplify(\"1/2\", \"\") == False, 'Failed to handle case where the n input is an empty string.'\n\n#### The x input is an invalid fraction string, so the function should return False\nassert simplify(\"1/2/3\", \"3/4\") == False, 'Failed to handle case where the x input is an invalid fraction string.'\n\n#### The n input is an invalid fraction string, so the function should return False\nassert simplify(\"1/2\", \"3/4/5\") == False, 'Failed to handle case where the n input is an invalid fraction string.'\n\n#### The x input has zero as the denominator, so the function should return False\nassert simplify(\"1/0\", \"3/4\") == False, 'Failed to handle case where the x input has zero as the denominator.'\n\n#### The n input has zero as the denominator, so the function should return False\nassert simplify(\"1/2\", \"3/0\") == False, 'Failed to handle case where the n input has zero as the denominator.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(simplify))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/145",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "entry_point": "order_by_points",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(order_by_points)",
        "plan": [
            "# 1. Create a new list to store tuples of each number and its sum of digits.\n# 2. Loop through each number in the input list.\n# 3. Calculate the sum of the digits of the current number.\n# 4. Append a tuple of the current number and its sum of digits to the new list.\n# 5. Sort the new list based on the sum of digits, using the first element of each tuple as the key.\n# 6. If two numbers have the same sum of digits, maintain the original order by using the index of the numbers in the original list as the secondary key.\n# 7. Extract the sorted numbers from the sorted tuples and return the result."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of integers `nums` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should sort the input list `nums` in ascending order based on the sum of the digits of each number.\n- If two numbers have the same sum of digits, they should be ordered based on their index in the original list.\n- The function should return the sorted list.\n\n## Edge Cases\n- Handle an empty input list, returning an empty list.\n- Handle non-integer elements in the `nums` list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n * m * log n) where n is the length of the `nums` list and m is the average number of digits in the numbers.\n- Space complexity: O(n) for the sorted list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `nums` input.\n\n### Reliability\n- Avoid index errors while accessing `nums` elements.\n- Handle large numbers without overflow errors.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sum of digits for -1 is -1, for -11 is -2, for 1 is 1, for -12 is -3, and for 11 is 2\n### The sorted list based on the sum of digits is [-1, -11, 1, -12, 11]\nassert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11], 'Failed to sort the list based on the sum of digits.'\n\n### The input list is empty, so the function should return an empty list\nassert order_by_points([]) == [], 'Failed to handle an empty input list.'\n\n## Edge Cases\n### The input list contains non-integer elements, so the function should return an empty list\nassert order_by_points([1, 'invalid', 3]) == [], 'Failed to handle case where the input list contains non-integer elements.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The nums list contains 10^6 elements with increasing values from 1 to 10^6\n### All the numbers in the list have the same sum of digits, which is 1\n### The function should return the original list in the same order\nassert order_by_points(list(range(1, 10**6 + 1))) == list(range(1, 10**6 + 1)), 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The nums input is not a list, so the function should return an empty list\nassert order_by_points('invalid') == [], 'Failed to handle case where the input nums is not a list.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(order_by_points))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/146",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "entry_point": "specialFilter",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\ncheck(specialFilter)",
        "plan": [
            "# 1. Initialize a variable `count` to keep track of the number of elements that satisfy the given conditions.\n# 2. Loop through each number in the input array `nums`.\n# 3. Convert each number to a string and check the following conditions:\n#     - The number is greater than 10.\n#     - The first digit of the number is odd (1, 3, 5, 7, 9).\n#     - The last digit of the number is odd (1, 3, 5, 7, 9).\n# 4. If all conditions are met, increment the `count` variable by 1.\n# 5. Return the final `count` value."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of numbers `nums` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the number of elements in the `nums` list that are greater than 10 and have both their first and last digits odd (1, 3, 5, 7, 9).\n\n## Edge Cases\n- Handle an empty `nums` list, returning 0.\n- Handle non-numeric elements in the `nums` list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `nums` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `nums` input.\n- Handle non-numeric elements in the `nums` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### Only one number, 15, is greater than 10 and has both first and last digits odd\nassert specialFilter([15, -73, 14, -15]) == 1, 'Failed to count the correct number of elements.'\n\n### Two numbers, 33 and 109, are greater than 10 and have both first and last digits odd\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2, 'Failed to count the correct number of elements.'\n\n## Edge Cases\n### The input list is empty, so the function should return 0\nassert specialFilter([]) == 0, 'Failed to handle an empty input list.'\n\n### None of the numbers are greater than 10 and have both first and last digits odd\n### The function should return 0\nassert specialFilter([2, 4, 6, 8]) == 0, 'Failed to handle case where no element satisfies the condition.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The nums list contains 10^6 elements, all of which are greater than 10 and have both first and last digits odd\n### The function should return the count of all elements, which is 10^6\nassert specialFilter([11, 13, 15, 17, 19] * (10**6 // 5)) == 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The nums input is not a list, so the function should return 0\nassert specialFilter('invalid') == 0, 'Failed to handle case where the input nums is not a list.'\n\n#### The nums list contains elements that are not numbers, so the function should return 0\nassert specialFilter([1, 'invalid', 3, 5]) == 0, 'Failed to handle case where the input list contains elements that are not numbers.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(specialFilter))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/147",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "entry_point": "get_max_triples",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\ncheck(get_max_triples)",
        "plan": [
            "# 1. Initialize a variable count to keep track of the number of valid triples.\n# 2. Create a list a of length n using the formula a[i] = i * i - i + 1 for each i from 1 to n.\n# 3. Use three nested loops to iterate through each possible triple (i, j, k) where i < j < k.\n# 4. Check if the sum of a[i], a[j], and a[k] is divisible by 3.\n# 5. If it is, increment the count variable.\n# 6. Return the final count of valid triples."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive integer `n` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should create an integer array `a` of length `n` using the given formula.\n- It should count the number of triples `(a[i], a[j], a[k])` of `a` where `i < j < k` and `a[i] + a[j] + a[k]` is a multiple of 3.\n- It should return the final count of valid triples.\n\n## Edge Cases\n- Handle negative `n` values, returning 0.\n- Handle non-integer `n` values, returning 0.\n- Handle large `n` values efficiently, providing results within 5 seconds.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^3) where n is the value of `n`.\n- Space complexity: O(n).\n- Ensure efficiency even for large values of `n`, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input values for `n`.\n- Handle non-positive input values for `n`.\n\n### Reliability\n- Avoid index errors while accessing `a` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The array a will be [1, 3, 7, 13, 21]\n### The only valid triple is (1, 7, 13) since 1 + 7 + 13 = 21 is a multiple of 3\nassert get_max_triples(5) == 1, 'Failed to count the correct number of valid triples.'\n\n### The array a will be [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]\n### The valid triples are (1, 7, 13), (1, 13, 31), (3, 7, 21), (3, 21, 43), (7, 21, 57), (7, 43, 91), (13, 31, 57), (13, 57, 91), (21, 43, 73), (21, 57, 91), (31, 73, 91), (43, 57, 73)\n### There are a total of 12 valid triples\nassert get_max_triples(10) == 12, 'Failed to count the correct number of valid triples.'\n\n## Edge Cases\n### The input value is 1, so the function should return 0 since there are no valid triples with a single element.\nassert get_max_triples(1) == 0, 'Failed to handle case where n is 1.'\n\n### The input value is 0, so the function should return 0 since there are no valid triples with a non-positive n value.\nassert get_max_triples(0) == 0, 'Failed to handle case where n is 0.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input value is 10^3, so the function should execute within 5 seconds.\nassert get_max_triples(10**3) == 494550, 'Failed to handle large input size.'\n\n### The input value is 10^5, so the function should execute within 5 seconds.\nassert get_max_triples(10**5) == 4945450050, 'Failed to handle large input size.'\n\n### The input value is 10^6, so the function should execute within 5 seconds.\nassert get_max_triples(10**6) == 4945450004500050, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input value is not an integer, so the function should return 0.\nassert get_max_triples('invalid') == 0, 'Failed to handle case where the input value is not an integer.'\n\n#### The input value is a negative number, so the function should return 0.\nassert get_max_triples(-10) == 0, 'Failed to handle case where the input value is negative.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(get_max_triples))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/148",
        "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "entry_point": "bf",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\ncheck(bf)",
        "plan": [
            "# 1. Create a dictionary to map the planets to their orbit positions.\n# 2. Check if planet1 and planet2 are valid planet names by verifying if they exist in the dictionary keys.\n# 3. If either planet1 or planet2 is not a valid planet name, return an empty tuple.\n# 4. Get the orbit positions of planet1 and planet2 from the dictionary.\n# 5. Iterate over the dictionary and extract the planets whose orbit positions are between the orbit positions of planet1 and planet2.\n# 6. Sort the extracted planets by their orbit positions.\n# 7. Return the sorted planets as a tuple."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two planet names as strings `planet1` and `planet2` as input.\n- It returns a tuple containing all planets whose orbits are located between the orbit of `planet1` and the orbit of `planet2`, sorted by proximity to the sun.\n\n## Expected Behavior\n- If `planet1` or `planet2` are not correct planet names, the function should return an empty tuple.\n- The function should return the planets between the orbit of `planet1` and the orbit of `planet2` in a sorted manner.\n\n## Edge Cases\n- Handle case-insensitive planet names (e.g., \"jupiter\" and \"NePtUnE\").\n- Handle the case where `planet1` and `planet2` are the same planet, returning an empty tuple.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1) since the number of planets is fixed.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string `planet1` and `planet2` inputs.\n- Handle invalid planet names that are not in the list of valid planet names.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The planets between Jupiter and Neptune are Saturn and Uranus\nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), 'Failed to return the planets between Jupiter and Neptune.'\n\n### The planets between Earth and Mercury are Venus\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\"), 'Failed to return the planets between Earth and Mercury.'\n\n### The planets between Mercury and Uranus are Venus, Earth, Mars, Jupiter, and Saturn\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), 'Failed to return the planets between Mercury and Uranus.'\n\n## Edge Cases\n### The planets between Earth and Earth are none, so the function should return an empty tuple\nassert bf(\"Earth\", \"Earth\") == (), 'Failed to handle case where planet1 and planet2 are the same planet.'\n\n### Case-insensitive planet names: the planets between jupiter and nEPTune are Saturn and Uranus\nassert bf(\"jupiter\", \"nEPTune\") == (\"Saturn\", \"Uranus\"), 'Failed to handle case-insensitive planet names.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### Satisfied if no errors occur across all test cases\n\n## Specific Quality Requirements\n### Robustness\n#### Invalid planet names: the function should return an empty tuple\nassert bf(\"Earth\", \"Pluto\") == (), 'Failed to handle case where planet1 is an invalid planet name.'\nassert bf(\"Pluto\", \"Mars\") == (), 'Failed to handle case where planet2 is an invalid planet name.'\n\n#### Non-string inputs: the function should return an empty tuple\nassert bf(123, \"Jupiter\") == (), 'Failed to handle case where planet1 is not a string.'\nassert bf(\"Saturn\", None) == (), 'Failed to handle case where planet2 is not a string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(bf))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/149",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "entry_point": "sorted_list_sum",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\ncheck(sorted_list_sum)",
        "plan": [
            "# 1. Create an empty list to store the strings with even lengths.\n# 2. Loop through each string in the input list.\n# 3. Check if the length of the string is even.\n# 4. If it is, append the string to the empty list.\n# 5. Sort the list by ascending length of each word.\n# 6. If two words have the same length, sort the list alphabetically.\n# 7. Return the sorted list."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of strings `lst` as input.\n- It returns a list of strings.\n\n## Expected Behavior\n- The function should delete the strings with odd lengths from the input list.\n- The function should return the resulting list with a sorted order.\n- The sorting order should be ascending by the length of each word.\n- If two words have the same length, the function should sort the list alphabetically.\n\n## Edge Cases\n- Handle an empty `lst` list, returning an empty list.\n- Handle the case where all strings in `lst` have odd lengths, returning an empty list.\n- Handle the case where all strings in `lst` have the same length, returning the list sorted alphabetically.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(nlogn), where n is the length of the `lst` list.\n- Space complexity: O(n), where n is the length of the `lst` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input.\n- Handle non-string elements in the `lst` list.\n\n### Reliability\n- Avoid index errors while accessing `lst` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input list has 3 strings, and only \"aa\" has an even length\n### The function should delete the strings with odd lengths and return the sorted list [\"aa\"]\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"], 'Failed to delete strings with odd lengths and sort the list.'\n\n### The input list has 4 strings, and \"ab\" and \"cd\" have even lengths\n### The function should delete the strings with odd lengths and return the sorted list [\"ab\", \"cd\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"], 'Failed to delete strings with odd lengths and sort the list.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty list\nassert sorted_list_sum([]) == [], 'Failed to handle an empty input list.'\n\n### All strings in the input list have odd lengths, so the function should return an empty list\nassert sorted_list_sum([\"a\", \"bb\", \"ccc\"]) == [], 'Failed to handle case where all strings have odd lengths.'\n\n### All strings in the input list have the same length, so the function should return the list sorted alphabetically\nassert sorted_list_sum([\"aaa\", \"bbb\", \"ccc\"]) == [\"aaa\", \"bbb\", \"ccc\"], 'Failed to handle case where all strings have the same length.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input list contains 10^6 strings, all with even lengths\n### The function should delete the strings with odd lengths and return the sorted list\nassert sorted_list_sum([\"a\" * (i % 2) for i in range(10**6)]) == [\"a\" * (i % 2) for i in range(0, 10**6, 2)], 'Failed to handle large input size.'\n\n### The input list contains 10^6 strings, all with odd lengths\n### The function should delete all strings and return an empty list\nassert sorted_list_sum([\"a\" * (i % 2 + 1) for i in range(10**6)]) == [], 'Failed to handle large input size with all strings having odd lengths.'\n\n### The input list contains 10^6 strings, all with the same length and the same value\n### The function should return the list sorted alphabetically\nassert sorted_list_sum([\"a\" * 10**6] * 10**6) == [\"a\" * 10**6] * 10**6, 'Failed to handle case where all strings have the same length and the same value.'\n\n## Specific Quality Requirements\n### Robustness\n#### The lst input is not a list, so the function should return an empty list\nassert sorted_list_sum('invalid') == [], 'Failed to handle case where the input lst is not a list.'\n\n#### The lst list contains elements that are not strings, so the function should return an empty list\nassert sorted_list_sum(['a', 1, 'b', 2]) == [], 'Failed to handle case where the input list contains elements that are not strings.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(sorted_list_sum))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/150",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
        "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "entry_point": "x_or_y",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\ncheck(x_or_y)",
        "plan": [
            "# 1. Check if the input number n is prime or not.\n# 2. If n is prime, return the value of x.\n# 3. If n is not prime, return the value of y.\n# 4. To check if a number is prime, we can iterate from 2 to the square root of n (inclusive) and check if any of the numbers divide n evenly.\n# 5. If any number divides n evenly, then n is not prime. Otherwise, n is prime."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes three arguments: an integer `n`, and two values `x` and `y`.\n- It returns a value.\n\n## Expected Behavior\n- If the input number `n` is prime, the function should return the value of `x`.\n- If the input number `n` is not prime, the function should return the value of `y`.\n\n## Edge Cases\n- Handle non-integer inputs for `n`, `x`, and `y`.\n- Handle negative values for `n`, `x`, and `y`.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(sqrt(n)) where n is the value of `n`.\n- Space complexity: O(1).\n- Ensure efficiency even for large inputs, providing results within 1 second.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer inputs for `n`, `x`, and `y`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 3."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### 7 is a prime number, so the function should return the value of x which is 34\nassert x_or_y(7, 34, 12) == 34, 'Failed to return the value of x for a prime number.'\n\n### 15 is not a prime number, so the function should return the value of y which is 5\nassert x_or_y(15, 8, 5) == 5, 'Failed to return the value of y for a non-prime number.'\n\n## Edge Cases\n### The input number is negative, so the function should return the value of y which is -5\nassert x_or_y(-7, 34, -5) == -5, 'Failed to handle a negative input number.'\n\n### The input number is 0, which is not a prime number, so the function should return the value of y which is 0\nassert x_or_y(0, 34, 0) == 0, 'Failed to handle a zero input number.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input number is a prime number\n### The function should return the value of x within 1 second\nimport time\nstart_time = time.time()\nassert x_or_y(99991, 34, 0) == 34, 'Failed to handle large input size.'\nend_time = time.time()\nexecution_time = end_time - start_time\nassert execution_time < 1, 'Failed to meet the performance requirement of executing within 1 second.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input number is not an integer, so the function should return None\nassert x_or_y('invalid', 34, 0) == None, 'Failed to handle a non-integer input number.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 3\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(x_or_y))\nassert result.total_complexity <= 3, 'Failed to have a Cyclomatic Complexity less than or equal to 3 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/151",
        "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "entry_point": "double_the_difference",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\ncheck(double_the_difference)",
        "plan": [
            "# 1. Initialize a variable to keep track of the sum of squares of odd numbers.\n# 2. Loop through the elements in the input list.\n# 3. Check if the element is a positive integer and odd.\n# 4. If it is, square the element and add it to the sum.\n# 5. Return the final sum."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of numbers `lst` as input.\n- It returns an integer.\n\n## Expected Behavior\n- The function should return the sum of the squares of the numbers in `lst` that are positive integers and odd.\n- Ignore numbers that are negative or not integers.\n- If the input list is empty, return 0.\n\n## Edge Cases\n- Handle an empty `lst`, returning 0.\n- Handle cases where all numbers in `lst` are negative or not integers, returning 0.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `lst` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `lst` input.\n- Handle non-numeric elements in the `lst` list.\n- Handle floating-point numbers in the `lst` list.\n\n### Reliability\n- Avoid index errors while accessing `lst` elements.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The odd numbers in the list are 1, 3, 0\n### The sum of the squares of these numbers is 1^2 + 3^2 + 0^2 = 1 + 9 + 0 = 10\nassert double_the_difference([1, 3, 2, 0]) == 10, 'Failed to calculate the sum of squares of odd numbers correctly.'\n\n### There are no odd numbers in the list, so the sum should be 0\nassert double_the_difference([-1, -2, 0]) == 0, 'Failed to handle case where there are no odd numbers in the list.'\n\n### The only odd number in the list is 9\n### The square of 9 is 9^2 = 81\nassert double_the_difference([9, -2]) == 81, 'Failed to calculate the sum of squares of odd numbers correctly.'\n\n### The list contains one number, 0, which is not odd\n### The sum of the squares of odd numbers is 0\nassert double_the_difference([0]) == 0, 'Failed to handle case where the list contains only one number that is not odd.'\n\n## Edge Cases\n### The input list is empty, so the function should return 0\nassert double_the_difference([]) == 0, 'Failed to handle an empty input list.'\n\n### The list contains all negative numbers, so the sum should be 0\nassert double_the_difference([-1, -2, -3]) == 0, 'Failed to handle case where all numbers in the list are negative.'\n\n### The list contains all non-integer numbers, so the sum should be 0\nassert double_the_difference([1.5, 2.5, 3.5]) == 0, 'Failed to handle case where all numbers in the list are non-integer.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The list contains 10^6 elements, all of which are odd numbers\n### The sum of the squares of these numbers is 1^2 + 3^2 + ... + (10^6)^2 = 1 + 9 + ... + 10^12 = 333,333,333,833,333,334\nassert double_the_difference(list(range(1, 10**6 + 1, 2))) == 333333333833333334, 'Failed to handle large input size.'\n\n### The list contains 10^6 elements, half of which are odd numbers and the other half are even numbers\n### The sum of the squares of the odd numbers is 1^2 + 3^2 + ... + (10^6 - 1)^2 = 1 + 9 + ... + 999,999,001 = 166,666,667,000,000,000\nassert double_the_difference(list(range(1, 10**6 + 1))) == 166666667000000000, 'Failed to handle case where half of the numbers are odd and the other half are even.'\n\n## Specific Quality Requirements\n### Robustness\n#### The list contains non-numeric elements, so the function should return 0\nassert double_the_difference([1, 2, 'invalid', 4]) == 0, 'Failed to handle case where the list contains elements that are not numbers.'\n\n#### The input is not a list, so the function should return 0\nassert double_the_difference('invalid') == 0, 'Failed to handle case where the input is not a list.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(double_the_difference))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/152",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "entry_point": "compare",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(compare)",
        "plan": [
            "# 1. Create an empty list to store the differences between the guesses and the scores.\n# 2. Loop through each index in the range of the length of the game or guess arrays.\n# 3. Calculate the absolute difference between the corresponding elements of the game and guess arrays.\n# 4. Append the absolute difference to the empty list.\n# 5. Return the list of differences."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two lists of integers `game` and `guess` as input.\n- Both `game` and `guess` should have the same length.\n- The function returns a list of integers.\n\n## Expected Behavior\n- The function should compare the guesses with the scores and return a list of the same length, denoting how far off each guess was.\n- If a guess is correct, the corresponding value in the returned list should be 0.\n- If a guess is incorrect, the corresponding value in the returned list should be the absolute difference between the guess and the score.\n\n## Edge Cases\n- Handle empty `game` and `guess` lists, returning empty lists.\n- Handle non-list inputs for `game` and `guess`, returning None.\n- Handle different lengths of `game` and `guess`, raising an error or returning None.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `game` or `guess` lists.\n- Space complexity: O(n) where n is the length of the `game` or `guess` lists.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list inputs or non-integer elements in the `game` and `guess` lists.\n\n### Reliability\n- Avoid index errors while accessing the `game` and `guess` lists.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### All guesses are correct, so the returned list should have all 0s\nassert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3], 'Failed to handle all correct guesses.'\n\n### Some guesses are incorrect, so the returned list should have the absolute differences between the guesses and scores\nassert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6], 'Failed to handle incorrect guesses.'\n\n## Edge Cases\n### The input lists are empty, so the function should return empty lists\nassert compare([], []) == [], 'Failed to handle empty input lists.'\n\n### The `game` list is empty, so the function should return an empty list\nassert compare([], [1, 2, 3, 4, 5]) == [], 'Failed to handle an empty game list.'\n\n### The `guess` list is empty, so the function should return an empty list\nassert compare([1, 2, 3, 4, 5], []) == [], 'Failed to handle an empty guess list.'\n\n### The lengths of the `game` and `guess` lists are different, so the function should return None or raise an error\nassert compare([1, 2, 3, 4, 5], [1, 2, 3, 4]) == None, 'Failed to handle lists with different lengths.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The `game` and `guess` lists contain 10^6 elements with increasing values from 1 to 10^6\n### The guesses are all correct, so the function should return a list of 10^6 zeros\nassert compare(list(range(1, 10**6 + 1)), list(range(1, 10**6 + 1))) == [0] * 10**6, 'Failed to handle large input size with all correct guesses.'\n\n### The `game` and `guess` lists contain 10^6 elements with increasing values from 1 to 10^6\n### The guesses are all incorrect, so the function should return a list of 10^6 absolute differences\nassert compare(list(range(1, 10**6 + 1)), list(range(10**6, 0, -1))) == list(range(10**6)), 'Failed to handle large input size with all incorrect guesses.'\n\n## Specific Quality Requirements\n### Robustness\n#### The `game` input is not a list, so the function should return None\nassert compare('invalid', [1, 2, 3, 4, 5]) == None, 'Failed to handle case where the input game is not a list.'\n\n#### The `guess` input is not a list, so the function should return None\nassert compare([1, 2, 3, 4, 5], 'invalid') == None, 'Failed to handle case where the input guess is not a list.'\n\n#### The `game` list contains elements that are not integers, so the function should return None\nassert compare([1, 2, 'invalid', 4, 5], [1, 2, 3, 4, 5]) == None, 'Failed to handle case where the input list contains elements that are not integers.'\n\n#### The `guess` list contains elements that are not integers, so the function should return None\nassert compare([1, 2, 3, 4, 5], [1, 2, 'invalid', 4, 5]) == None, 'Failed to handle case where the input list contains elements that are not integers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(compare))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/153",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
        "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "entry_point": "Strongest_Extension",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \ncheck(Strongest_Extension)",
        "plan": [
            "# 1. Initialize variables strongest_extension and max_strength to keep track of the strongest extension and its strength.\n# 2. Loop through each extension in the list of extensions.\n# 3. Calculate the strength of the current extension by counting the number of uppercase letters (CAP) and lowercase letters (SM).\n# 4. If the strength of the current extension is greater than the max_strength, update the max_strength and strongest_extension.\n# 5. If the strength of the current extension is equal to the max_strength but the current extension comes first in the list, update the strongest_extension.\n# 6. Return the strongest_extension in the format: ClassName.StrongestExtensionName."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `class_name` and a list of strings `extensions` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should find the strongest extension from the list of extensions based on the given strength calculation and return it in the format: ClassName.StrongestExtensionName.\n\n## Edge Cases\n- Handle an empty `extensions` list, returning an empty string.\n- Handle non-string elements in the `extensions` list.\n- Handle an empty `class_name` string, returning an empty string.\n- Handle non-string `class_name` input.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `extensions` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `extensions` input or a non-string `class_name`.\n- Handle non-string elements in the `extensions` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The strongest extension is 'SErviNGSliCes' with a strength of -1\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Failed to find the strongest extension.'\n\n### The strongest extension is 'AA' with a strength of 2\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', 'Failed to find the strongest extension.'\n\n## Edge Cases\n### The extensions list is empty, so the function should return an empty string\nassert Strongest_Extension('Slices', []) == '', 'Failed to handle an empty extensions list.'\n\n### The extensions list contains a non-string element, so the function should return an empty string\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 123, 'StuFfed']) == '', 'Failed to handle case where the extensions list contains non-string elements.'\n\n### The class_name is an empty string, so the function should return an empty string\nassert Strongest_Extension('', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == '', 'Failed to handle an empty class_name string.'\n\n### The class_name is not a string, so the function should return an empty string\nassert Strongest_Extension(123, ['SErviNGSliCes', 'Cheese', 'StuFfed']) == '', 'Failed to handle case where the class_name is not a string.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The extensions list contains 10^6 elements, all of which are 'AA'\n### The strength of each extension is 0\n### The function should return 'Slices.AA'\nassert Strongest_Extension('Slices', ['AA'] * 10**6) == 'Slices.AA', 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The class_name input is not a string, so the function should return an empty string\nassert Strongest_Extension(123, ['AA', 'Be', 'CC']) == '', 'Failed to handle case where the class_name is not a string.'\n\n#### The extensions input is not a list, so the function should return an empty string\nassert Strongest_Extension('my_class', 'AA') == '', 'Failed to handle case where the extensions is not a list.'\n\n#### The extensions list contains elements that are not strings, so the function should return an empty string\nassert Strongest_Extension('my_class', ['AA', 'Be', 123]) == '', 'Failed to handle case where the extensions list contains elements that are not strings.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(Strongest_Extension))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/154",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "solution": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "entry_point": "cycpattern_check",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\ncheck(cycpattern_check)",
        "plan": [
            "# 1. Loop through each character in the second word.\n# 2. Check if the second word or any of its rotations are substrings in the first word.\n# 3. Return True if a substring is found, False otherwise.\n# 4. To check if a substring is present, we can concatenate the first word with itself to account for rotations.\n# 5. Use the in operator to check if the second word is a substring in the concatenated string.\n# 6. If a substring is found, return True. Otherwise, continue checking with the next rotation.\n# 7. If no rotations result in a substring, return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two strings `a` and `b` as input.\n- It returns a boolean value.\n\n## Expected Behavior\n- The function should return True if `b` or any of its rotations is a substring of `a`, and False otherwise.\n\n## Edge Cases\n- Handle empty strings for `a` and/or `b`, returning False.\n- Handle the case where `b` is longer than `a`, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n^2), where n is the length of the longer string between `a` and `b`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string inputs for `a` and `b`.\n- Handle Unicode characters in the strings.\n- Handle cases where `a` or `b` contains special characters, numbers, or spaces.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The second word \"abd\" is not a substring of the first word \"abcd\"\nassert cycpattern_check(\"abcd\",\"abd\") == False, 'Failed to handle case where the second word is not a substring.'\n\n### The second word \"ell\" is a substring of the first word \"hello\"\nassert cycpattern_check(\"hello\",\"ell\") == True, 'Failed to handle case where the second word is a substring.'\n\n### None of the rotations of the second word \"psus\" are substrings of the first word \"whassup\"\nassert cycpattern_check(\"whassup\",\"psus\") == False, 'Failed to handle case where none of the rotations of the second word are substrings.'\n\n### One of the rotations of the second word \"baa\" is a substring of the first word \"abab\"\nassert cycpattern_check(\"abab\",\"baa\") == True, 'Failed to handle case where one of the rotations of the second word is a substring.'\n\n### None of the rotations of the second word \"eeff\" are substrings of the first word \"efef\"\nassert cycpattern_check(\"efef\",\"eeff\") == False, 'Failed to handle case where none of the rotations of the second word are substrings.'\n\n### One of the rotations of the second word \"simen\" is a substring of the first word \"himenss\"\nassert cycpattern_check(\"himenss\",\"simen\") == True, 'Failed to handle case where one of the rotations of the second word is a substring.'\n\n## Edge Cases\n### The first word is an empty string, so the function should return False\nassert cycpattern_check(\"\", \"abc\") == False, 'Failed to handle case where the first word is an empty string.'\n\n### The second word is an empty string, so the function should return False\nassert cycpattern_check(\"abc\", \"\") == False, 'Failed to handle case where the second word is an empty string.'\n\n### Both words are empty strings, so the function should return False\nassert cycpattern_check(\"\", \"\") == False, 'Failed to handle case where both words are empty strings.'\n\n### The second word is longer than the first word, so the function should return False\nassert cycpattern_check(\"abc\", \"abcd\") == False, 'Failed to handle case where the second word is longer than the first word.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The first word contains 10^6 characters and the second word is a rotation of the first word\n### The function should return True\nassert cycpattern_check(\"a\" * 10**6, \"a\" * 10**6) == True, 'Failed to handle large input size.'\n\n### The first word contains 10^6 characters and the second word is not a substring of the first word\n### The function should return False\nassert cycpattern_check(\"a\" * 10**6, \"b\" * 10**6) == False, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The inputs are not strings, so the function should return False\nassert cycpattern_check(123, [1, 2, 3]) == False, 'Failed to handle case where the inputs are not strings.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(cycpattern_check))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/155",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "entry_point": "even_odd_count",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(even_odd_count)",
        "plan": [
            "# 1. Initialize variables count_even and count_odd to keep track of the number of even and odd digits, respectively.\n# 2. Convert the input number to a string to easily iterate through each digit.\n# 3. Loop through each character/digit in the string.\n# 4. Convert each digit back to an integer and check if it is even or odd.\n# 5. Increment either count_even or count_odd based on the digit's parity.\n# 6. Return a tuple of (count_even, count_odd)."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes an integer `num` as input.\n- It returns a tuple of two integers.\n\n## Expected Behavior\n- The function should return a tuple where the first element represents the count of even digits in `num` and the second element represents the count of odd digits in `num`.\n\n## Edge Cases\n- Handle the case where `num` is negative or zero, returning (0, 0).\n- Handle the case where `num` has only one digit, returning (1, 0) if the digit is even or (0, 1) if the digit is odd.\n- Handle the case where `num` has all even or all odd digits, returning the appropriate tuple.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(log n), where n is the absolute value of `num`.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer `num` input.\n\n### Reliability\n- Ensure accurate counting of even and odd digits in `num`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The input number has 1 even digit (2) and 1 odd digit (1)\nassert even_odd_count(-12) == (1, 1), 'Failed to count even and odd digits correctly.'\n\n### The input number has 1 even digit (2) and 2 odd digits (1, 3)\nassert even_odd_count(123) == (1, 2), 'Failed to count even and odd digits correctly.'\n\n## Edge Cases\n### The input number is 0, which has no even or odd digits\nassert even_odd_count(0) == (0, 0), 'Failed to handle input number equal to zero.'\n\n### The input number is a single even digit (4)\nassert even_odd_count(4) == (1, 0), 'Failed to handle input number with a single even digit.'\n\n### The input number is a single odd digit (9)\nassert even_odd_count(9) == (0, 1), 'Failed to handle input number with a single odd digit.'\n\n### The input number has all even digits (2468)\nassert even_odd_count(2468) == (4, 0), 'Failed to handle input number with all even digits.'\n\n### The input number has all odd digits (13579)\nassert even_odd_count(13579) == (0, 5), 'Failed to handle input number with all odd digits.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input number is a large positive even number (10^6)\nassert even_odd_count(10**6) == (7, 0), 'Failed to handle large input number.'\n\n### The input number is a large negative odd number (-10^9 + 1)\nassert even_odd_count(-10**9 + 1) == (0, 10), 'Failed to handle large negative input number.'\n\n## Specific Quality Requirements\n### Robustness\n#### The num input is not an integer, so the function should return an empty list\nassert even_odd_count('invalid') == (0, 0), 'Failed to handle case where the input num is not an integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(even_odd_count))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/156",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "entry_point": "int_to_mini_roman",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(int_to_mini_roman)",
        "plan": [
            "# 1. Create a dictionary to map the integer values to their corresponding roman numeral symbols.\n# 2. Create an empty string to store the resulting roman numeral.\n# 3. Check if the given number is within the valid range (1 to 1000).\n# 4. Loop through each key-value pair in the dictionary.\n# 5. While the given number is greater than or equal to the current key, subtract the key from the number and append the corresponding value to the roman numeral string.\n# 6. Return the resulting roman numeral string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a positive integer `number` as input.\n- It returns a string representing the roman numeral equivalent of the given number.\n\n## Expected Behavior\n- The function should correctly convert the given number to its roman numeral representation.\n- The roman numeral should be returned in lowercase.\n\n## Restrictions\n- The given number must be within the range of 1 to 1000 (inclusive).\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n\n## Specific Quality Requirements\n### Robustness\n- Handle a non-integer input for the `number` argument.\n- Handle a number outside the valid range (1 to 1000).\n\n### Reliability\n- Ensure the function provides correct results for all valid input cases.\n- Ensure the function provides an appropriate error message for invalid input cases.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10.\n- Ensure the code is well-structured, modular, and follows best practices for readability and maintainability."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The roman numeral equivalent of 19 is 'xix'\nassert int_to_mini_roman(19) == 'xix', 'Failed to convert 19 to its roman numeral equivalent.'\n\n### The roman numeral equivalent of 152 is 'clii'\nassert int_to_mini_roman(152) == 'clii', 'Failed to convert 152 to its roman numeral equivalent.'\n\n### The roman numeral equivalent of 426 is 'cdxxvi'\nassert int_to_mini_roman(426) == 'cdxxvi', 'Failed to convert 426 to its roman numeral equivalent.'\n\n## Edge Cases\n### The roman numeral equivalent of 1 is 'i'\nassert int_to_mini_roman(1) == 'i', 'Failed to convert 1 to its roman numeral equivalent.'\n\n### The roman numeral equivalent of 1000 is 'm'\nassert int_to_mini_roman(1000) == 'm', 'Failed to convert 1000 to its roman numeral equivalent.'\n\n### The roman numeral equivalent of 100 is 'c'\nassert int_to_mini_roman(100) == 'c', 'Failed to convert 100 to its roman numeral equivalent.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The given number is at the upper bound of the valid range\n### The roman numeral equivalent of 1000 is 'm'\nassert int_to_mini_roman(1000) == 'm', 'Failed to handle upper bound input.'\n\n### The given number is at the lower bound of the valid range\n### The roman numeral equivalent of 1 is 'i'\nassert int_to_mini_roman(1) == 'i', 'Failed to handle lower bound input.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input number is not an integer, so the function should raise a TypeError\ntry:\n    int_to_mini_roman('invalid')\nexcept TypeError:\n    pass\nelse:\n    raise AssertionError('Failed to handle case where the input number is not an integer.')\n\n#### The input number is outside the valid range, so the function should raise a ValueError\ntry:\n    int_to_mini_roman(0)\nexcept ValueError:\n    pass\nelse:\n    raise AssertionError('Failed to handle case where the input number is outside the valid range.')\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(int_to_mini_roman))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/157",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "entry_point": "right_angle_triangle",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\ncheck(right_angle_triangle)",
        "plan": [
            "# 1. Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n# 2. Return True if the condition is satisfied, False otherwise.\n# 3. To check if the triangle is right-angled, we can compare the square of the longest side with the sum of the squares of the other two sides.\n# 4. If the condition is true, then the triangle is right-angled. Return True.\n# 5. If the condition is false, then the triangle is not right-angled. Return False."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes three positive integers `a`, `b`, and `c` as input.\n- It returns a boolean value: True if the three sides form a right-angled triangle, False otherwise.\n\n## Expected Behavior\n- The function should return True if the three sides `a`, `b`, and `c` form a right-angled triangle, and False otherwise.\n- A right-angled triangle is defined as a triangle in which one angle is a right angle (90 degrees).\n\n## Edge Cases\n- Handle the case where any of the sides `a`, `b`, or `c` is equal to 0, returning False.\n- Handle the case where any of the sides `a`, `b`, or `c` is negative, returning False.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer input for `a`, `b`, or `c`.\n- Handle floating-point numbers for `a`, `b`, or `c`.\n\n### Reliability\n- Ensure the function handles potential arithmetic errors, such as overflow or division by zero.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The sides 3, 4, and 5 form a right-angled triangle\nassert right_angle_triangle(3, 4, 5) == True, 'Failed to identify a right-angled triangle.'\n\n### The sides 1, 2, and 3 do not form a right-angled triangle\nassert right_angle_triangle(1, 2, 3) == False, 'Failed to identify a non-right-angled triangle.'\n\n## Edge Cases\n### One of the sides is 0, so it does not form a triangle\nassert right_angle_triangle(0, 5, 10) == False, 'Failed to handle case where one of the sides is 0.'\n\n### One of the sides is negative, so it does not form a triangle\nassert right_angle_triangle(-3, 4, 5) == False, 'Failed to handle case where one of the sides is negative.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input sides are extremely large numbers\n### The function should return True since 10^100, 10^100, and 10^200 form a right-angled triangle\nassert right_angle_triangle(10**100, 10**100, 10**200) == True, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input sides are not integers, so the function should return False\nassert right_angle_triangle(3.5, 4, 5) == False, 'Failed to handle case where the input sides are not integers.'\n\n#### The input sides are floating-point numbers, so the function should return False\nassert right_angle_triangle(3.0, 4.5, 5.2) == False, 'Failed to handle case where the input sides are floating-point numbers.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(right_angle_triangle))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/158",
        "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "entry_point": "find_max",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\ncheck(find_max)",
        "plan": [
            "# 1. Initialize variables max_chars and max_word to store the maximum number of unique characters and the word with maximum unique characters.\n# 2. Loop through each word in the input list.\n# 3. For each word, calculate the number of unique characters by converting it to a set and getting the length.\n# 4. If the number of unique characters is greater than the current max_chars, update max_chars and max_word.\n# 5. If the number of unique characters is equal to max_chars, compare the word with max_word lexicographically and update max_word if necessary.\n# 6. After looping through all the words, return the max_word."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a list of strings `words` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should return the word from the `words` list that has the maximum number of unique characters.\n- If there are multiple words with the same maximum number of unique characters, return the word that comes first in lexicographical order.\n\n## Edge Cases\n- Handle an empty `words` list, returning an empty string.\n- Handle the case where all words in `words` are empty strings, returning an empty string.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n * m) where n is the length of the `words` list and m is the average length of the words in the list.\n- Space complexity: O(n) where n is the length of the `words` list.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `words` input or non-string elements in the `words` list.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The word \"string\" has the maximum number of unique characters\nassert find_max([\"name\", \"of\", \"string\"]) == \"string\", 'Failed to find the word with the maximum number of unique characters.'\n\n### The word \"enam\" has the maximum number of unique characters\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\", 'Failed to find the word with the maximum number of unique characters.'\n\n### The word \"aaaaaaa\" has the maximum number of unique characters\nassert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\", 'Failed to find the word with the maximum number of unique characters.'\n\n### The word \"world\" has the maximum number of unique characters\nassert find_max([\"hello\", \"world\", \"python\"]) == \"world\", 'Failed to find the word with the maximum number of unique characters.'\n\n### The word \"code\" has the maximum number of unique characters\nassert find_max([\"code\", \"developer\", \"programming\"]) == \"code\", 'Failed to find the word with the maximum number of unique characters.'\n\n## Edge Cases\n### The input list is empty, so the function should return an empty string\nassert find_max([]) == '', 'Failed to handle an empty input list.'\n\n### All words in the input list are empty strings, so the function should return an empty string\nassert find_max(['', '', '']) == '', 'Failed to handle case where all words in the input list are empty strings.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The words list contains 10^6 words, each with 10 characters\n### Each word has the same number of unique characters, so the function should return the first word in lexicographical order\nassert find_max(['a'*10]*10**6) == 'a'*10, 'Failed to handle large input size.'\n\n### The words list contains 10^6 words, each with 10 characters\n### Each word has the same number of unique characters, so the function should return the first word in lexicographical order\nassert find_max(['a'*10]*10**6 + ['b'*10]*10**6) == 'a'*10, 'Failed to handle case where multiple words have the maximum number of unique characters.'\n\n### The words list contains 10^6 words, each with 10 characters\n### Each word has a different number of unique characters, so the function should return the word with the maximum number of unique characters\nassert find_max(['a'*i for i in range(1, 10**6 + 1)]) == 'a'*10**6, 'Failed to handle case where each word has a different number of unique characters.'\n\n### The words list contains 10^6 words, each with 10 characters\n### Each word is a random string, so there is no word with the maximum number of unique characters\n### The function should return the first word in lexicographical order\nimport random\nimport string\nwords = [''.join(random.choices(string.ascii_lowercase, k=10)) for _ in range(10**6)]\nassert find_max(words) == min(words), 'Failed to handle case where no word has the maximum number of unique characters.'\n\n## Specific Quality Requirements\n### Robustness\n#### The words input is not a list of strings, so the function should return an empty string\nassert find_max('invalid') == '', 'Failed to handle case where the input words is not a list of strings.'\n\n#### The words list contains elements that are not strings, so the function should return an empty string\nassert find_max(['hello', 123, 'world']) == '', 'Failed to handle case where the input list contains elements that are not strings.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(find_max))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/159",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
        "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "entry_point": "eat",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\ncheck(eat)",
        "plan": [
            "# 1. Calculate the total number of eaten carrots by adding the initial number of carrots eaten to the number of carrots needed to be eaten.\n# 2. Calculate the number of carrots left after the meals by subtracting the remaining carrots from the total number of eaten carrots.\n# 3. If there are not enough remaining carrots, set the number of carrots left after the meals to zero.\n# 4. Return an array containing the total number of eaten carrots after the meals and the number of carrots left after the meals."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes three integers `number`, `need`, and `remaining` as input.\n- It returns a list of two integers: [total number of eaten carrots after meals, number of carrots left after meals].\n\n## Expected Behavior\n- The function should calculate the total number of eaten carrots after the meals by adding the initial number of eaten carrots to the number of carrots needed to be eaten.\n- The function should calculate the number of carrots left after the meals by subtracting the remaining carrots from the total number of eaten carrots.\n- If there are not enough remaining carrots, the number of carrots left after the meals should be set to zero.\n- The function should return a list containing the total number of eaten carrots after the meals and the number of carrots left after the meals.\n\n## Edge Cases\n- Handle negative `number`, `need`, or `remaining` inputs, returning an empty list.\n- Handle non-integer inputs for `number`, `need`, or `remaining`, returning an empty list.\n- Handle the case where the number of carrots needed is zero, returning the initial number of eaten carrots and the remaining carrots as a list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(1).\n- Space complexity: O(1).\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-integer inputs for `number`, `need`, or `remaining`.\n- Handle negative `number`, `need`, or `remaining` inputs.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The initial number of eaten carrots is 5.\n### The number of carrots needed to be eaten is 6.\n### There are 10 remaining carrots.\n### The total number of eaten carrots after meals is 11.\n### The number of carrots left after meals is 4.\nassert eat(5, 6, 10) == [11, 4], 'Failed to calculate the total number of eaten carrots and the number of carrots left after meals.'\n\n### The initial number of eaten carrots is 4.\n### The number of carrots needed to be eaten is 8.\n### There are 9 remaining carrots.\n### The total number of eaten carrots after meals is 12.\n### The number of carrots left after meals is 1.\nassert eat(4, 8, 9) == [12, 1], 'Failed to calculate the total number of eaten carrots and the number of carrots left after meals.'\n\n### The initial number of eaten carrots is 1.\n### The number of carrots needed to be eaten is 10.\n### There are 10 remaining carrots.\n### The total number of eaten carrots after meals is 11.\n### The number of carrots left after meals is 0.\nassert eat(1, 10, 10) == [11, 0], 'Failed to calculate the total number of eaten carrots and the number of carrots left after meals.'\n\n### The initial number of eaten carrots is 2.\n### The number of carrots needed to be eaten is 11.\n### There are 5 remaining carrots.\n### The total number of eaten carrots after meals is 7.\n### The number of carrots left after meals is 0.\nassert eat(2, 11, 5) == [7, 0], 'Failed to calculate the total number of eaten carrots and the number of carrots left after meals.'\n\n## Edge Cases\n### All inputs are zero, so the function should return [0, 0]\nassert eat(0, 0, 0) == [0, 0], 'Failed to handle case where all inputs are zero.'\n\n### The initial number of eaten carrots is zero.\n### The number of carrots needed to be eaten is zero.\n### There are 10 remaining carrots.\n### The total number of eaten carrots after meals is 0.\n### The number of carrots left after meals is 10.\nassert eat(0, 0, 10) == [0, 10], 'Failed to handle case where the number of carrots needed is zero.'\n\n### The initial number of eaten carrots is zero.\n### The number of carrots needed to be eaten is 10.\n### There are zero remaining carrots.\n### The total number of eaten carrots after meals is 0.\n### The number of carrots left after meals is 0.\nassert eat(0, 10, 0) == [0, 0], 'Failed to handle case where there are no remaining carrots.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The function has constant time complexity since it performs a fixed number of operations regardless of the input.\nassert eat(500, 500, 500) == [1000, 0], 'Failed to handle input within the performance requirements.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input number is not an integer, so the function should return an empty list.\nassert eat('invalid', 10, 5) == [], 'Failed to handle case where the input number is not an integer.'\n\n#### The input need is not an integer, so the function should return an empty list.\nassert eat(2, 'invalid', 5) == [], 'Failed to handle case where the input need is not an integer.'\n\n#### The input remaining is not an integer, so the function should return an empty list.\nassert eat(2, 10, 'invalid') == [], 'Failed to handle case where the input remaining is not an integer.'\n\n#### The input number is negative, so the function should return an empty list.\nassert eat(-5, 10, 5) == [], 'Failed to handle case where the input number is negative.'\n\n#### The input need is negative, so the function should return an empty list.\nassert eat(5, -10, 5) == [], 'Failed to handle case where the input need is negative.'\n\n#### The input remaining is negative, so the function should return an empty list.\nassert eat(5, 10, -5) == [], 'Failed to handle case where the input remaining is negative.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(eat))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/160",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
        "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "entry_point": "do_algebra",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(do_algebra)",
        "plan": [
            "# 1. Initialize a variable \"result\" with the first operand from the operand list.\n# 2. Loop through the operator list and operand list simultaneously.\n# 3. Apply each operator to the current result and the next operand in the operand list.\n# 4. Update the result with the evaluated expression using the current operator and operand.\n# 5. Return the final result after evaluating the entire algebraic expression."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two lists as input: `operator` and `operand`.\n- `operator` is a list of basic algebra operations.\n- `operand` is a list of non-negative integers.\n- The function returns the evaluation of the algebraic expression built using the `operator` and `operand` lists.\n\n## Expected Behavior\n- The function should build an algebraic expression using the `operator` and `operand` lists.\n- It should evaluate the expression and return the result.\n\n## Constraints\n- The length of the `operator` list is equal to the length of the `operand` list minus one.\n- The `operand` list has at least two operands.\n- The `operator` list has at least one operator.\n\n## Edge Cases\n- Handle empty lists for `operator` and `operand`, returning None.\n- Handle non-list inputs for `operator` and `operand`, returning None.\n- Handle non-string elements in `operator` list, returning None.\n- Handle non-integer elements in `operand` list, returning None.\n- Handle division by zero in the expression, returning None.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `operand` list.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-list `operator` or `operand` inputs.\n- Handle non-string elements in the `operator` list or non-integer elements in the `operand` list.\n- Handle division by zero in the expression.\n\n### Reliability\n- Avoid index errors while accessing elements in the `operator` and `operand` lists.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The operator list contains '+' and '*', and the operand list is [2, 3, 4, 5]\n### The expression built is: 2 + 3 * 4 - 5\n### The expected result is 9\nassert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9, 'Failed to evaluate the algebraic expression correctly.'\n\n### The operator list contains '-', '*', and '//', and the operand list is [1, 2, 3, 4, 5]\n### The expression built is: 1 - 2 * 3 // 4 * 5\n### The expected result is -9\nassert do_algebra(['-', '*', '//'], [1, 2, 3, 4, 5]) == -9, 'Failed to evaluate the algebraic expression correctly.'\n\n## Edge Cases\n### The operator list is empty, so the function should return None\nassert do_algebra([], [2, 3, 4, 5]) is None, 'Failed to handle an empty operator list.'\n\n### The operand list has only one element, so the function should return None\nassert do_algebra(['+'], [2]) is None, 'Failed to handle an operand list with only one element.'\n\n### The operator input is not a list, so the function should return None\nassert do_algebra('+', [2, 3, 4, 5]) is None, 'Failed to handle an operator input that is not a list.'\n\n### The operand input is not a list, so the function should return None\nassert do_algebra(['+', '*', '-'], 2) is None, 'Failed to handle an operand input that is not a list.'\n\n### The operand list contains an element that is not a non-negative integer, so the function should return None\nassert do_algebra(['+', '*', '-'], [2, -3, 4, 5]) is None, 'Failed to handle an operand list with an element that is not a non-negative integer.'\n\n### The operator list contains an element that is not a string, so the function should return None\nassert do_algebra(['+', 5, '-'], [2, 3, 4, 5]) is None, 'Failed to handle an operator list with an element that is not a string.'\n\n### The expression built involves division by zero, so the function should return None\nassert do_algebra(['//'], [2, 0]) is None, 'Failed to handle division by zero in the expression.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The operand list contains 10^6 elements, all of which are 1\n### The operator list contains 10^6-1 '+' operators\n### The expected result is 10^6\nassert do_algebra(['+'] * (10**6 - 1), [1] * 10**6) == 10**6, 'Failed to handle large input size.'\n\n### The operand list contains 10^6 elements, all of which are 1\n### The operator list contains 10^6-1 '*' operators\n### The expected result is 1\nassert do_algebra(['*'] * (10**6 - 1), [1] * 10**6) == 1, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The operand input is not a list, so the function should return None\nassert do_algebra(['+', '*', '-'], 2) is None, 'Failed to handle case where the operand input is not a list.'\n\n#### The operator input is not a list, so the function should return None\nassert do_algebra('+', [2, 3, 4, 5]) is None, 'Failed to handle case where the operator input is not a list.'\n\n#### The operand list contains an element that is not a non-negative integer, so the function should return None\nassert do_algebra(['+', '*', '-'], [2, -3, 4, 5]) is None, 'Failed to handle case where the operand list contains an element that is not a non-negative integer.'\n\n#### The operator list contains an element that is not a string, so the function should return None\nassert do_algebra(['+', 5, '-'], [2, 3, 4, 5]) is None, 'Failed to handle case where the operator list contains an element that is not a string.'\n\n#### The expression built involves division by zero, so the function should return None\nassert do_algebra(['//'], [2, 0]) is None, 'Failed to handle case where division by zero occurs in the expression.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(do_algebra))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/161",
        "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "entry_point": "solve",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\ncheck(solve)",
        "plan": [
            "# 1. Initialize an empty string to store the result.\n# 2. Initialize a flag variable to keep track of whether there are any letters in the string.\n# 3. Loop through each character in the input string.\n# 4. Check if the character is a letter.\n# 5. If it is, reverse its case using the built-in functions .upper() and .lower().\n# 6. Append the modified character to the result string and set the flag variable to True.\n# 7. If there are no letters in the string (flag variable is False), reverse the entire string using slicing.\n# 8. Return the result string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors and index errors.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `s` as input.\n- It returns a string.\n\n## Expected Behavior\n- The function should reverse the case of any letter characters in the string.\n- If the string contains no letter characters, it should reverse the entire string.\n- The function should return the resulting modified string.\n\n## Edge Cases\n- Handle an empty string input, returning an empty string.\n- Handle a string with no letter characters, returning the string in reverse.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the input string `s`.\n- Space complexity: O(n) where n is the length of the input string `s`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The string contains no letters, so the function should reverse the string\nassert solve(\"1234\") == \"4321\", 'Failed to reverse the string when it contains no letters.'\n\n### The string contains two letter characters, 'a' and 'b'\n### The function should reverse the case of the letter characters, resulting in 'AB'\nassert solve(\"ab\") == \"AB\", 'Failed to reverse the case of letter characters.'\n\n### The string contains three letter characters, 'a', 'C', and 'c'\n### The function should reverse the case of the letter characters, resulting in '#A@c'\nassert solve(\"#a@C\") == \"#A@c\", 'Failed to reverse the case of letter characters.'\n\n## Edge Cases\n### The input string is empty, so the function should return an empty string\nassert solve(\"\") == \"\", 'Failed to handle an empty input string.'\n\n### The input string contains no letter characters, so the function should reverse the entire string\nassert solve(\"#@!\") == \"!@#\", 'Failed to reverse the entire string when it contains no letters.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string has a length of 10^6\n### The string contains no letter characters, so the function should reverse the entire string\nassert solve(\"#\" * 10**6) == \"#\" * 10**6, 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return an empty string\nassert solve(123) == \"\", 'Failed to handle a non-string input.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(solve))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/162",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "entry_point": "string_to_md5",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(string_to_md5)",
        "plan": [
            "# 1. Import the hashlib module.\n# 2. Check if the input string 'text' is empty. If it is, return None.\n# 3. Create an instance of the MD5 hasher from the hashlib module.\n# 4. Update the hasher with the bytes representation of the input string.\n# 5. Generate the MD5 hash by calling the hexdigest() method on the hasher object.\n# 6. Return the MD5 hash as a string."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, attribute errors, and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes a string `text` as input.\n- It returns a string representing the MD5 hash of the input `text`.\n\n## Expected Behavior\n- The function should return the MD5 hash equivalent of the input `text`.\n- If the input `text` is an empty string, the function should return None.\n\n## Edge Cases\n- Handle the case where `text` is an empty string, returning None.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(n) where n is the length of the `text` string.\n- Space complexity: O(1).\n- Ensure efficiency even for extremely long input strings, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-string input for `text`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 5."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The MD5 hash of the string 'Hello world' is '3e25960a79dbc69b674cd4ec67a72c62'\nassert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62', 'Failed to generate the correct MD5 hash.'\n\n### The input string is empty, so the function should return None\nassert string_to_md5('') == None, 'Failed to handle an empty input string.'\n\n## Edge Cases\n### The input string is empty, so the function should return None\nassert string_to_md5('') == None, 'Failed to handle an empty input string.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input string contains 10^6 characters, all of which are the letter 'a'\n### The MD5 hash of a string with 10^6 'a' characters is '0cc175b9c0f1b6a831c399e269772661'\nassert string_to_md5('a' * 10**6) == '0cc175b9c0f1b6a831c399e269772661', 'Failed to handle large input size.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input is not a string, so the function should return None\nassert string_to_md5(123) == None, 'Failed to handle case where the input is not a string.'\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 5\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(string_to_md5))\nassert result.total_complexity <= 5, 'Failed to have a Cyclomatic Complexity less than or equal to 5 by Radon.'"
        ]
    },
    {
        "id": "HumanEval/163",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
        "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "entry_point": "generate_integers",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(generate_integers)",
        "plan": [
            "# 1. Initialize an empty list to store the even digits between a and b.\n# 2. Check if a is greater than b. If it is, swap the values of a and b.\n# 3. Loop through the range from a to b (inclusive).\n# 4. Convert each number to a string and loop through each digit.\n# 5. Check if the digit is even (i.e., divisible by 2). If it is, append it to the list.\n# 6. Return the list of even digits."
        ],
        "constraint": [
            "# Problem Agnostic Requirements\n- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.\n- Demonstrate efficiency in the algorithmic approach to problem-solving.\n- Code should be clear, well-commented, and easy to understand and maintain.\n\n# Functional Requirements\n## Input-output Conditions\n- The function takes two positive integers `a` and `b` as input.\n- It returns a list of integers.\n\n## Expected Behavior\n- The function should return a list of all even digits between `a` and `b`, inclusive, in ascending order.\n\n## Edge Cases\n- Handle the case where `a` is greater than `b`, swapping their values and still returning the result in ascending order.\n- Handle the case where there are no even digits between `a` and `b`, returning an empty list.\n\n# Non-functional Requirements\n## Performance\n- Time complexity: O(nm) where n is the number of digits in `a` and m is the number of digits in `b`.\n- Space complexity: O(m) where m is the number of digits in `b`.\n- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.\n\n## Specific Quality Requirements\n### Robustness\n- Handle non-positive integer input for `a` or `b`.\n- Handle non-integer input for `a` or `b`.\n\n### Reliability\n- Ensure the function works correctly for all valid input combinations of `a` and `b`.\n\n### Maintainability\n- Target Cyclomatic Complexity: \u2264 10.\n- Follow coding conventions and naming conventions."
        ],
        "gen_tc": [
            "# Test Cases Regarding Functional Requirements\n## General Cases\n### The even digits between 2 and 8 are [2, 4, 6, 8]\nassert generate_integers(2, 8) == [2, 4, 6, 8], 'Failed to return the correct even digits.'\n\n### The even digits between 8 and 2 are [2, 4, 6, 8]\n### The order of the input should not affect the result\nassert generate_integers(8, 2) == [2, 4, 6, 8], 'Failed to handle case where a is greater than b.'\n\n### There are no even digits between 10 and 14, so the function should return an empty list\nassert generate_integers(10, 14) == [], 'Failed to handle case where there are no even digits between a and b.'\n\n## Edge Cases\n### The even digits between 1 and 1 is [1]\n### The input range contains only one digit, which is odd\nassert generate_integers(1, 1) == [1], 'Failed to handle case where a and b are the same and odd.'\n\n### The even digits between 1 and 1 is []\n### The input range contains only one digit, which is odd\nassert generate_integers(1, 0) == [], 'Failed to handle case where a and b are the same and odd.'\n\n### The even digits between 2 and 2 is [2]\n### The input range contains only one digit, which is even\nassert generate_integers(2, 2) == [2], 'Failed to handle case where a and b are the same and even.'\n\n### The even digits between 2 and 2 is []\n### The input range contains only one digit, which is even\nassert generate_integers(2, 1) == [], 'Failed to handle case where a and b are the same and even.'\n\n# Test Cases Regarding Non-functional Requirements\n## Performance Requirements\n### The input range is from 1 to 10^6\n### The even digits between 1 and 10^6 are [2, 4, 6, 8]\nassert generate_integers(1, 10**6) == [2, 4, 6, 8], 'Failed to handle large input range.'\n\n### The input range is from 1 to 10^6\n### The even digits between 10^6 and 1 are [2, 4, 6, 8]\n### The order of the input should not affect the result\nassert generate_integers(10**6, 1) == [2, 4, 6, 8], 'Failed to handle case where a is greater than b.'\n\n## Specific Quality Requirements\n### Robustness\n#### The input `a` is not a positive integer, so the function should return an empty list\nassert generate_integers('invalid', 5) == [], 'Failed to handle case where the input a is not a positive integer.'\n\n#### The input `b` is not a positive integer, so the function should return an empty list\nassert generate_integers(5, 'invalid') == [], 'Failed to handle case where the input b is not a positive integer.'\n\n### Reliability\n#### Satisfied if no errors occur across all test cases\n\n### Maintainability\n#### Calculate Cyclomatic Complexity using Radon\n#### Check if the Cyclomatic Complexity is less than or equal to 10\nimport inspect\nfrom radon.visitors import ComplexityVisitor\nresult = ComplexityVisitor.from_code(inspect.getsource(generate_integers))\nassert result.total_complexity <= 10, 'Failed to have a Cyclomatic Complexity less than or equal to 10 by Radon.'"
        ]
    }
]