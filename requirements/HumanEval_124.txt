# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes a string `date` as input.
- It returns a boolean value.

## Expected Behavior
- The function should return True if the given date string is valid according to the specified rules. Otherwise, it should return False.

## Edge Cases
- Handle an empty `date` string, returning False.
- Handle invalid date formats, returning False.
- Handle invalid months, returning False.
- Handle invalid days for each month, returning False.
- Handle invalid year formats, returning False.
- Handle non-integer values for days, months, or years, returning False.

# Non-functional Requirements
## Performance
- Time complexity: O(1).
- Space complexity: O(1).
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-string `date` input.

### Reliability
- Ensure consistent behavior and results across different platforms and environments.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.
- Follow proper coding conventions and naming conventions.
- Write clear and concise code with meaningful comments.