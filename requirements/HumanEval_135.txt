# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes a list of integers `arr` as input.
- It returns an integer.

## Expected Behavior
- The function should return the largest index of an element in `arr` that is not greater than or equal to the element immediately preceding it.
- If no such element exists, the function should return -1.

## Edge Cases
- Handle an empty `arr`, returning -1.
- Handle a single-element `arr`, returning -1.

# Non-functional Requirements
## Performance
- Time complexity: O(n) where n is the length of the `arr`.
- Space complexity: O(1).
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-list `arr` input or non-integer elements in the `arr` list.

### Reliability
- Avoid index errors while accessing `arr` elements.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.