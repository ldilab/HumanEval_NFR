# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes an array of non-negative integers as input.
- It returns a new array of integers.

## Expected Behavior
- The function should return a copy of the given array after sorting it in ascending order if the sum of the first and last elements is odd, or sorting it in descending order if the sum is even.

## Edge Cases
- Handle an empty input array, returning an empty array.
- Handle an input array with a single element, returning a copy of the input array.

# Non-functional Requirements
## Performance
- Time complexity: O(n log n), where n is the length of the input array.
- Space complexity: O(n), where n is the length of the input array.
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-array input or non-integer elements in the input array.
- Handle negative integer elements in the input array.

### Reliability
- Avoid index errors while accessing array elements.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.