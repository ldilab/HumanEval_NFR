# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes two integers, `n` and `p`, as input.
- It returns an integer.

## Expected Behavior
- The function should return the value of 2 raised to the power `n` modulo `p`.

## Edge Cases
- Handle negative values of `n` and `p`.
- Handle large values of `n` and `p`.
- Handle the case where `n` and `p` are both zero, returning 1.

# Non-functional Requirements
## Performance
- Time complexity: O(log n), where n is the value of `n`.
- Space complexity: O(1).
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-integer input for `n` or `p`.
- Handle negative values of `n` or `p`.

### Reliability
- Avoid arithmetic operation errors, such as division by zero or overflow.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.