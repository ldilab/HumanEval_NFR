# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes an integer `n` as input.
- It returns an integer.

## Expected Behavior
- The function should return the largest prime factor of `n`.

## Edge Cases
- Handle `n` less than or equal to 1, raising a ValueError.
- Handle `n` as a prime number, raising a ValueError.
- Handle large inputs, providing results within a reasonable time.

# Non-functional Requirements
## Performance
- Time complexity: O(sqrt(n)), where n is the input integer.
- Space complexity: O(1).
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-integer input or negative `n`.

### Reliability
- Avoid arithmetic errors and ensure correct handling of factors.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 5.