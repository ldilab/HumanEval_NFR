# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes a string `value` representing a number as input.
- It returns an integer.

## Expected Behavior
- The function should return the closest integer to the given number.
- If the number is equidistant from two integers, it should round away from zero.

## Edge Cases
- Handle non-string `value` input, returning None.
- Handle empty string input, returning None.
- Handle non-numeric characters in the input value, returning None.
- Handle the case where the input value is already an integer, returning the same value.

# Non-functional Requirements
## Performance
- Time complexity: O(1).
- Space complexity: O(1).

## Specific Quality Requirements
### Robustness
- Handle non-string `value` input or an empty string.
- Handle non-numeric characters in the input value.
- Handle the case where the input value is already an integer.

### Reliability
- Avoid type errors while converting the input value to a float.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 5.