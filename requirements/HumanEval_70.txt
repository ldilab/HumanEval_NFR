# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes a list of integers `lst` as input.
- It returns a list of integers.

## Expected Behavior
- The function should return a new list in a "strange" order, where the strange sorting starts with the minimum value, then the maximum value of the remaining integers, then the minimum, and so on.

## Edge Cases
- Handle an empty `lst` input, returning an empty list.
- Handle a `lst` input with one element, returning a list with that element.

# Non-functional Requirements
## Performance
- Time complexity: O(n log n), where n is the length of the `lst` list due to the sorting operation.
- Space complexity: O(n), where n is the length of the `lst` list to store the strange sorted list.

## Specific Quality Requirements
### Robustness
- Handle non-list `lst` input.
- Handle non-integer elements in the `lst` list.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.