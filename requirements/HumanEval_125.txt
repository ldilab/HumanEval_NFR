# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes a string `txt` as input.
- It returns either a list of words or an integer.

## Expected Behavior
- If there are whitespaces in the input string `txt`, the function should return a list of words split on whitespaces.
- If there are no whitespaces but there are commas in the input string `txt`, the function should return a list of words split on commas.
- If there are no whitespaces or commas in the input string `txt`, the function should return the count of lowercase letters with odd order in the alphabet.

## Edge Cases
- Handle an empty `txt` string, returning an empty list or 0 depending on the situation.
- Handle an input string with only whitespaces or commas, returning an empty list.
- Handle an input string with no lowercase letters, returning an empty list or 0 depending on the situation.
- Handle non-string `txt` input.

# Non-functional Requirements
## Performance
- Time complexity: O(n), where n is the length of the input string `txt`.
- Space complexity: O(1), if returning the count of lowercase letters. O(k), where k is the number of words, if returning a list of words.
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-string `txt` input.
- Handle special characters other than whitespaces and commas in the input string `txt`.

### Reliability
- Ensure accurate splitting of words on whitespaces or commas.
- Ensure accurate count of lowercase letters with odd order in the alphabet.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.