# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes an integer `n` as input.
- It returns an integer.

## Expected Behavior
- The function should return the sum of numbers from 1 to `n`.

## Edge Cases
- Handle negative `n`, returning 0.
- Handle 0 as `n`, returning 0.

# Non-functional Requirements
## Performance
- Time complexity: O(1).
- Space complexity: O(1).
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-integer `n` input.

### Reliability
- Avoid arithmetic operation errors, such as overflow.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 5.