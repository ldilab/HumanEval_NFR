# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes a 2-dimensional list `lst` and an integer `x` as input.
- It returns a list of tuples.

## Expected Behavior
- The function should find all occurrences of `x` in the list `lst` and return a list of tuples representing the coordinates of each occurrence.
- The tuples should be sorted initially by row index in ascending order and within each row, by column index in descending order.

## Edge Cases
- Handle an empty `lst` list, returning an empty list.
- Handle the case where `x` does not appear in any row of `lst`, returning an empty list.
- Handle the case where a row in `lst` is an empty list, skipping that row in the output.
- Handle the case where there are multiple occurrences of `x` in a single row, returning the coordinates in descending order of column index.

# Non-functional Requirements
## Performance
- Time complexity: O(n*m*log(m)) where n is the number of rows in `lst` and m is the maximum number of columns in any row.
- Space complexity: O(k) where k is the number of occurrences of `x` in `lst`.
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-list `lst` input or a non-integer `x`.
- Handle non-integer elements in the `lst` list.

### Reliability
- Avoid index errors while accessing elements in `lst`.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.