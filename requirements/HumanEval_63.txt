# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes an integer `n` as input.
- It returns an integer.

## Expected Behavior
- The function should return the n-th element of the fibfib number sequence.

## Edge Cases
- Handle non-integer input, returning None.
- Handle negative input, returning None.

# Non-functional Requirements
## Performance
- Time complexity: O(n) where n is the input integer.
- Space complexity: O(n) to store the fibfib sequence.
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-integer input.
- Handle negative input.

### Reliability
- Avoid index errors while accessing elements in the fibfib sequence.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.