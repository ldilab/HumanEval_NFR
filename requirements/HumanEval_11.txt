# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes two strings `a` and `b` as input.
- The strings consist only of 1s and 0s.
- It returns a string as output.

## Expected Behavior
- The function should perform a binary XOR operation on the two input strings `a` and `b`.
- The result of the XOR operation should be returned as a string.

## Edge Cases
- Handle empty strings `a` and `b`, returning an empty string.
- Handle strings `a` and `b` of different lengths, returning an empty string.
- Handle strings `a` and `b` with non-numeric characters, returning an empty string.

# Non-functional Requirements
## Performance
- Time complexity: O(n) where n is the length of the longer input string.
- Space complexity: O(1).
- Ensure efficiency even for extremely large input strings, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-string inputs for `a` or `b`.
- Handle non-numeric characters in the input strings.
- Handle empty strings for `a` or `b`.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.
