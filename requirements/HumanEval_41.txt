# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes an integer `n` as input.
- It returns an integer.

## Expected Behavior
- The function should return the number of collisions that occur between the two sets of cars.

## Edge Cases
- Handle a negative or zero value of `n`, returning 0.

# Non-functional Requirements
## Performance
- Time complexity: O(n^2), where n is the number of cars in each set.
- Space complexity: O(1).
- Ensure efficiency even for large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-integer input for `n`.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.