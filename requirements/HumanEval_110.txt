# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes two lists of numbers, `lst1` and `lst2`, as input.
- It returns a string, either "YES" or "NO".

## Expected Behavior
- The function determines whether it is possible to perform an exchange of elements between `lst1` and `lst2` to make `lst1` a list of only even numbers.
- If it is possible, the function returns "YES".
- If it is not possible, the function returns "NO".

## Edge Cases
- Handle empty lists `lst1` and `lst2`, returning "NO".
- Handle the case where `lst1` already consists of only even numbers, returning "YES".
- Handle the case where `lst2` already consists of only even numbers, returning "YES".
- Handle the case where both `lst1` and `lst2` consist of only even numbers, returning "YES".

# Non-functional Requirements
## Performance
- Time complexity: O(n) where n is the maximum length between `lst1` and `lst2`.
- Space complexity: O(1).
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-list inputs for `lst1` or `lst2`.
- Handle non-integer elements in `lst1` or `lst2`.

### Reliability
- Avoid index errors while accessing `lst1` and `lst2` elements.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 5.