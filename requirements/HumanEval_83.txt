# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes a positive integer `n` as input.
- It returns an integer.

## Expected Behavior
- The function should return the count of n-digit positive integers that start or end with 1.

## Edge Cases
- Handle negative or zero values of `n` by returning 0.
- Handle non-integer values of `n` by raising a `TypeError` or returning 0.

# Non-functional Requirements
## Performance
- Time complexity: O(10^n) where n is the value of `n`.
- Space complexity: O(1).
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-positive `n` input or a non-integer `n`.

### Reliability
- Handle potential arithmetic errors, such as overflow, when calculating 10^n.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 5.