# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes a string `string` as input.
- It returns an integer.

## Expected Behavior
- The function should return the count of distinct characters in the input string, regardless of case.

## Edge Cases
- Handle an empty string input, returning 0.
- Handle a string consisting of only whitespace characters, returning 0.
- Handle a string with no distinct characters, returning 0.

# Non-functional Requirements
## Performance
- Time complexity: O(n) where n is the length of the input string.
- Space complexity: O(k) where k is the number of distinct characters in the input string.
- Ensure efficiency even for extremely large strings, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-string input.

### Reliability
- Ensure that the function accurately counts distinct characters, regardless of case.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 5.