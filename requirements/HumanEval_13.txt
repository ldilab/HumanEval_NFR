# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes two integers, `a` and `b`, as input.
- It returns an integer, the greatest common divisor (GCD) of `a` and `b`.

## Expected Behavior
- The function should calculate and return the GCD of `a` and `b` using the Euclidean algorithm.

## Edge Cases
- Handle the case where one or both of the inputs are zero, returning the non-zero input as the GCD.
- Handle negative inputs, returning the GCD as a positive integer.
- Handle the case where `a` and `b` are the same number, returning that number as the GCD.

# Non-functional Requirements
## Performance
- Time complexity: O(log(min(a, b))), where a and b are the input integers.
- Space complexity: O(1).
- Ensure efficiency even for extremely large inputs, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-integer inputs for `a` and `b`.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 5.