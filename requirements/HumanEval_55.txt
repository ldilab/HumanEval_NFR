# Problem Agnostic Requirements
- Ensure error-free execution, avoiding type errors, index errors, arithmetic operation errors (e.g., division by zero, overflow), and so on.
- Demonstrate efficiency in the algorithmic approach to problem-solving.
- Code should be clear, well-commented, and easy to understand and maintain.

# Functional Requirements
## Input-output Conditions
- The function takes an integer `n` as input.
- It returns an integer.

## Expected Behavior
- The function should return the n-th Fibonacci number.

## Edge Cases
- Handle negative values of `n`, returning None.
- Handle non-integer input, returning None.
- Handle large values of `n` (e.g., n > 50) within a reasonable time frame.

# Non-functional Requirements
## Performance
- Time complexity: O(n), where n is the input value.
- Space complexity: O(1).
- Ensure efficiency even for large values of `n`, providing results within 5 seconds.

## Specific Quality Requirements
### Robustness
- Handle non-integer input for `n`.
- Handle negative values of `n`.

### Reliability
- Avoid index errors while accessing elements of the Fibonacci sequence.

### Maintainability
- Target Cyclomatic Complexity: â‰¤ 10.